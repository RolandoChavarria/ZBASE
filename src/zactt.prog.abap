*//The purpose of this "read only" script is to download data that can be analyzed as part of our audit.
*//We expect that you will follow your company’s regular change management policies and procedures prior to running the script.
*//To the extent permitted by law, regulation and our professional standards, this script is provided "as is," without any warranty,
*//and the Deloitte Network and its contractors will not be liable for any damages relating to this script or its use.
*//As used herein, "we" and "our" refers to the Deloitte Network entity that provided the script to you, and the "Deloitte Network"
*//refers to Deloitte Touche Tohmatsu Limited ("DTTL"), the member firms of DTTL, and each of their affiliates and related entities.
*//
*//© 2020.  For more information, contact Deloitte Touche Tohmatsu Limited.  All rights reserved.
*//
*//====================================================================

************************************************************************
* Modification Log                                                     *
*                                                                      *
* Vrsn    Date           Name           Details of the change          *
*----------------------------------------------------------------------*
*17.0    04/28/2020    Bharat Panjala  New tables (EDIDS,EDIDC,EDBAST,EDIMSGT,TEDS2,T685,USOBT_C,T682I,KNKK,T163Y,GRACCONFIG,GRACCONFIGT,GRACONFIGSET,GRACFFCTRL,GRACFFUSER,GRACFFOWNER).
*17.0    04/28/2020    Bharat Panjala  Columns reduced for tables ANLA,TVAP,ANLB.
*17.0    04/28/2020    Bharat Panjala  SM20 logs extraction.
*17.0    04/28/2020    Bharat Panjala  Encoding standard aligned, exclusion of duplicate records in TRDIR, T001B_LOGS column adjustment as per SAP release version.
*17.0    04/28/2020    Bharat Panjala  Time column added in extraction of SE06 settings change logs.
*16.1    09/08/2019    Gautam Jha      Removed column XSONU definition from table TBSLT.
*16.0    03/20/2019    Gautam Jha      New Tables (TRDIRT,CVERS,CVERS_REF,PRDVERS,LFA1,LFB1,T683T,T687T,SE06 logs, T001B logs) added*
*16.0    04/15/2019    Gautam Jha      New Columns added in existing table (T090NAZ-AFAPL,PHASE;T691F-WSREA,WLSET,MAREA,MASET)*
*16.0    04/15/2019    Gautam Jha      All tables are now part of exclusion feauture. Tables have been added with skipping feature*
*16.0    04/15/2019    Gautam Jha      Chunking feature has been re-written for huge tables like CDHDR,CDPOS, AGR_1251,UST12,ANLA etc*
*16.0    04/15/2019    Gautam Jha      End Date has also now been added to filter data on date related tables.
*15.1    08/20/2018    Gautam Jha      Functionality to Exclude RSUSR100N and Table Logs added
*15.0.1  01/27/2018    Gautam Jha      TADIR_LOGS table removed*
*15.0    04/25/2018    Anshul Bhatia   Added MANDT column for AGR_TEXTS table*
*15.0    04/25/2018    Gautam Jha      Tables TVDIR, OBJH, DD02T & DD02L added*
*15.0    04/25/2018    Anshul Bhatia   DBTABLOG table removed*
*15.0    04/25/2018    Gautam Jha      SCU3 tcode functionality added to retrieve change logs of tables T000, DEVACCESS, PAHI and TADIR*
*15.0    04/25/2018    Anshul Bhatia   USOBHASH table added for S4HANA system support*
*15.0    04/25/2018    Gautam Jha      Code added to extract report RSUSR100n*
*15.0    04/25/2018    Anshul Bhatia   Exclusion function is now tagged to 16 more tables in addition to 8 tables from the previous version*
*15.0    04/25/2018    Anshul Bhatia   Filters applied on the extraction of TPALOG table.
************************************************************************
REPORT z_20200411_141538.
DATA : LV_TIME1 TYPE SY-UZEIT.
DATA : LV_TIME2 TYPE SY-UZEIT.
DATA : LV_TYPE TYPE C.
DATA : LV_LEN TYPE NUMC5.
DATA : TABLE_COUNT TYPE NUMC5.
TABLE_COUNT = 0.

DATA : it_ddprs TYPE STANDARD TABLE OF ddprs.

data: ls_dd02l type dd02l,
      ls_dd03m type dd03m .
*********************************************************************
*  Begin of Code for Data Extraction of RSUSR100N report - Madhuri KL - 1/20/2018
*********************************************************************

TYPES: BEGIN OF ty_asci,
  line TYPE char2048,
  END OF ty_asci.
DATA : list_asci TYPE TABLE OF ty_asci WITH HEADER LINE,
      list_tab TYPE TABLE OF abaplist,
      lv_lines TYPE numc4,
      gt_seltab TYPE TABLE OF rsparams ,
      gs_seltab TYPE          rsparams,
      g_print_params TYPE     pri_params,
      g_valid   TYPE          char10..
*  End of Code for Data Extraction of RSUSR100N report - Madhuri KL - 1/20/2018

TYPES: BEGIN OF TS_AGR_1016,
MANDT TYPE AGR_1016-MANDT,
AGR_NAME TYPE AGR_1016-AGR_NAME,
PROFILE TYPE AGR_1016-PROFILE,
GENERATED TYPE AGR_1016-GENERATED,
PSTATE TYPE AGR_1016-PSTATE,
END OF TS_AGR_1016.
DATA: IT_AGR_1016 TYPE STANDARD TABLE OF TS_AGR_1016 .
DATA: WA_AGR_1016 TYPE TS_AGR_1016 .
DATA:  LV_AGR_1016 TYPE STRING.
TYPES: BEGIN OF TS_AGR_1251,
DELETED TYPE AGR_1251-DELETED,
MODIFIED TYPE AGR_1251-MODIFIED,
HIGH TYPE AGR_1251-HIGH,
LOW TYPE AGR_1251-LOW,
FIELD TYPE AGR_1251-FIELD,
OBJECT TYPE AGR_1251-OBJECT,
AUTH TYPE AGR_1251-AUTH,
COUNTER TYPE AGR_1251-COUNTER,
AGR_NAME TYPE AGR_1251-AGR_NAME,
MANDT TYPE AGR_1251-MANDT,
END OF TS_AGR_1251.
DATA: IT_AGR_1251 TYPE STANDARD TABLE OF TS_AGR_1251 .
DATA: WA_AGR_1251 TYPE TS_AGR_1251 .
DATA:  LV_AGR_1251 TYPE STRING.
TYPES: BEGIN OF TS_AGR_1252,
MANDT TYPE AGR_1252-MANDT,
AGR_NAME TYPE AGR_1252-AGR_NAME,
COUNTER TYPE AGR_1252-COUNTER,
VARBL TYPE AGR_1252-VARBL,
LOW TYPE AGR_1252-LOW,
HIGH TYPE AGR_1252-HIGH,
END OF TS_AGR_1252.
DATA: IT_AGR_1252 TYPE STANDARD TABLE OF TS_AGR_1252 .
DATA: WA_AGR_1252 TYPE TS_AGR_1252 .
DATA:  LV_AGR_1252 TYPE STRING.
TYPES: BEGIN OF TS_AGR_AGRS,
MANDT TYPE AGR_AGRS-MANDT,
AGR_NAME TYPE AGR_AGRS-AGR_NAME,
CHILD_AGR TYPE AGR_AGRS-CHILD_AGR,
ATTRIBUTES TYPE AGR_AGRS-ATTRIBUTES,
END OF TS_AGR_AGRS.
DATA: IT_AGR_AGRS TYPE STANDARD TABLE OF TS_AGR_AGRS .
DATA: WA_AGR_AGRS TYPE TS_AGR_AGRS .
DATA:  LV_AGR_AGRS TYPE STRING.
TYPES: BEGIN OF TS_AGR_USERS,
COL_FLAG TYPE AGR_USERS-COL_FLAG,
ORG_FLAG TYPE AGR_USERS-ORG_FLAG,
EXCLUDE TYPE AGR_USERS-EXCLUDE,
TO_DAT TYPE AGR_USERS-TO_DAT,
FROM_DAT TYPE AGR_USERS-FROM_DAT,
UNAME TYPE AGR_USERS-UNAME,
AGR_NAME TYPE AGR_USERS-AGR_NAME,
MANDT TYPE AGR_USERS-MANDT,
END OF TS_AGR_USERS.
DATA: IT_AGR_USERS TYPE STANDARD TABLE OF TS_AGR_USERS .
DATA: WA_AGR_USERS TYPE TS_AGR_USERS .
DATA:  LV_AGR_USERS TYPE STRING.
TYPES: BEGIN OF TS_CWBNTCUST,
CWBUSER TYPE CWBNTCUST-CWBUSER,
PRSTATUS TYPE CWBNTCUST-PRSTATUS,
NTSTATUS TYPE CWBNTCUST-NTSTATUS,
NUMM TYPE CWBNTCUST-NUMM,
END OF TS_CWBNTCUST.
DATA: IT_CWBNTCUST TYPE STANDARD TABLE OF TS_CWBNTCUST .
DATA: WA_CWBNTCUST TYPE TS_CWBNTCUST .
DATA:  LV_CWBNTCUST TYPE STRING.

TYPES: BEGIN OF TS_DD09L,
TABNAME TYPE DD09L-TABNAME,
PROTOKOLL TYPE DD09L-PROTOKOLL,
AS4LOCAL TYPE DD09L-AS4LOCAL,
END OF TS_DD09L.
DATA: IT_DD09L TYPE STANDARD TABLE OF TS_DD09L .
DATA: WA_DD09L TYPE TS_DD09L .
DATA:  LV_DD09L TYPE STRING.

TYPES: BEGIN OF TS_CWBNTHEAD,
NUMM TYPE CWBNTHEAD-NUMM,
INCOMPLETE TYPE CWBNTHEAD-INCOMPLETE,
END OF TS_CWBNTHEAD.
DATA: IT_CWBNTHEAD TYPE STANDARD TABLE OF TS_CWBNTHEAD .
DATA: WA_CWBNTHEAD TYPE TS_CWBNTHEAD .
DATA:  LV_CWBNTHEAD TYPE STRING.

TYPES: BEGIN OF TS_DEVACCESS,
UNAME TYPE DEVACCESS-UNAME,
ACCESSKEY TYPE DEVACCESS-ACCESSKEY,
END OF TS_DEVACCESS.
DATA: IT_DEVACCESS TYPE STANDARD TABLE OF TS_DEVACCESS .
DATA: WA_DEVACCESS TYPE TS_DEVACCESS .
DATA:  LV_DEVACCESS TYPE STRING.
TYPES: BEGIN OF TS_PAHI,
SYSTEMID TYPE PAHI-SYSTEMID,
PARVALUE TYPE PAHI-PARVALUE,
PARTYPE TYPE PAHI-PARTYPE,
PARSTATE TYPE PAHI-PARSTATE,
PARNAME TYPE PAHI-PARNAME,
PARDATE TYPE PAHI-PARDATE,
HOSTNAME TYPE PAHI-HOSTNAME,
END OF TS_PAHI.
DATA: IT_PAHI TYPE STANDARD TABLE OF TS_PAHI .
DATA: WA_PAHI TYPE TS_PAHI .
DATA:  LV_PAHI TYPE STRING.
TYPES: BEGIN OF TS_T000,
CCCATEGORY TYPE T000-CCCATEGORY,
CCCOPYLOCK TYPE T000-CCCOPYLOCK,
CCCORACTIV TYPE T000-CCCORACTIV,
CCNOCLIIND TYPE T000-CCNOCLIIND,
MANDT TYPE T000-MANDT,
MTEXT TYPE T000-MTEXT,
CHANGEDATE TYPE T000-CHANGEDATE,
END OF TS_T000.
DATA: IT_T000 TYPE STANDARD TABLE OF TS_T000 .
DATA: WA_T000 TYPE TS_T000 .
DATA:  LV_T000 TYPE STRING.

DATA: ISTABLE_T001 TYPE STRING.


SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T001' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T001 = 'Yes'.
ELSE.
  ISTABLE_T001 = 'No'.
ENDIF.

IF ISTABLE_T001 = 'Yes'.
TYPES: BEGIN OF ts_t001,
xprod(20) TYPE C,
xnegp(20) TYPE C,
xgsbe(20) TYPE C,
waers(20) TYPE C,
waabw(20) TYPE C,
periv(20) TYPE C,
ort01(20) TYPE C,
opvar(20) TYPE C,
mandt(20) TYPE C,
land1(20) TYPE C,
ktopl(20) TYPE C,
kkber(20) TYPE C,
butxt(20) TYPE C,
bukrs(20) TYPE C,
END OF ts_t001.
DATA: it_t001 TYPE STANDARD TABLE OF ts_t001 .
DATA: wa_t001 TYPE ts_t001 .
DATA:  lv_t001 TYPE string.
ENDIF.
TYPES: BEGIN OF TS_TADIR,
PGMID TYPE TADIR-PGMID,
OBJECT TYPE TADIR-OBJECT,
OBJ_NAME TYPE TADIR-OBJ_NAME,
EDTFLAG TYPE TADIR-EDTFLAG,
END OF TS_TADIR.
DATA: IT_TADIR TYPE STANDARD TABLE OF TS_TADIR .
DATA: WA_TADIR TYPE TS_TADIR .
DATA:  LV_TADIR TYPE STRING.
TYPES: BEGIN OF TS_TDDAT,
TABNAME TYPE TDDAT-TABNAME,
CCLASS TYPE TDDAT-CCLASS,
END OF TS_TDDAT.
DATA: IT_TDDAT TYPE STANDARD TABLE OF TS_TDDAT .
DATA: WA_TDDAT TYPE TS_TDDAT .
DATA:  LV_TDDAT TYPE STRING.
TYPES: BEGIN OF TS_TRDIR,
NAME TYPE TRDIR-NAME,
SECU TYPE TRDIR-SECU,
SUBC TYPE TRDIR-SUBC,
CNAM TYPE TRDIR-CNAM,
CDAT TYPE TRDIR-CDAT,
UNAM TYPE TRDIR-UNAM,
UDAT TYPE TRDIR-UDAT,
END OF TS_TRDIR.
DATA: IT_TRDIR TYPE STANDARD TABLE OF TS_TRDIR .
DATA: WA_TRDIR TYPE TS_TRDIR .
DATA:  LV_TRDIR TYPE STRING.
TYPES: BEGIN OF TS_TSTC,
TCODE TYPE TSTC-TCODE,
PGMNA TYPE TSTC-PGMNA,
CINFO TYPE TSTC-CINFO,
END OF TS_TSTC.
DATA: IT_TSTC TYPE STANDARD TABLE OF TS_TSTC .
DATA: WA_TSTC TYPE TS_TSTC .
DATA:  LV_TSTC TYPE STRING.
TYPES: BEGIN OF TS_TSTCA,
TCODE TYPE TSTCA-TCODE,
OBJCT TYPE TSTCA-OBJCT,
END OF TS_TSTCA.
DATA: IT_TSTCA TYPE STANDARD TABLE OF TS_TSTCA .
DATA: WA_TSTCA TYPE TS_TSTCA .
DATA:  LV_TSTCA TYPE STRING.
TYPES: BEGIN OF TS_TSTCP,
TCODE TYPE TSTCP-TCODE,
PARAM TYPE TSTCP-PARAM,
END OF TS_TSTCP.
DATA: IT_TSTCP TYPE STANDARD TABLE OF TS_TSTCP .
DATA: WA_TSTCP TYPE TS_TSTCP .
DATA:  LV_TSTCP TYPE STRING.
TYPES: BEGIN OF TS_TSTCT,
SPRSL TYPE TSTCT-SPRSL,
TCODE TYPE TSTCT-TCODE,
TTEXT TYPE TSTCT-TTEXT,
END OF TS_TSTCT.
DATA: IT_TSTCT TYPE STANDARD TABLE OF TS_TSTCT .
DATA: WA_TSTCT TYPE TS_TSTCT .
DATA:  LV_TSTCT TYPE STRING.
*Table added -- 13.0 release - for $ value issue
TYPES: BEGIN OF TS_USORG,
FIELD TYPE USORG-FIELD,
VARBL TYPE USORG-VARBL,
END OF TS_USORG.
DATA: IT_USORG TYPE STANDARD TABLE OF TS_USORG .
DATA: WA_USORG TYPE TS_USORG .
DATA:  LV_USORG TYPE STRING.
TYPES: BEGIN OF TS_USR02,
CLASS TYPE USR02-CLASS,
USTYP TYPE USR02-USTYP,
GLTGB TYPE USR02-GLTGB,
GLTGV TYPE USR02-GLTGV,
UFLAG TYPE USR02-UFLAG,
MANDT TYPE USR02-MANDT,
BNAME TYPE USR02-BNAME,
TRDAT TYPE USR02-TRDAT,
LTIME TYPE USR02-LTIME,
END OF TS_USR02.
DATA: IT_USR02 TYPE STANDARD TABLE OF TS_USR02 .
DATA: WA_USR02 TYPE TS_USR02 .
DATA:  LV_USR02 TYPE STRING.



*Extracting Version Specific tables*
DATA: ISTABLE_USRFLDSEL TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'USRFLDSEL' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_USRFLDSEL = 'Yes'.
ELSE.
  ISTABLE_USRFLDSEL = 'No'.
ENDIF.

IF ISTABLE_USRFLDSEL = 'Yes'.
  TYPES: BEGIN OF TS_USRFLDSEL,
  CLIENT(3) TYPE C,
  CUSTMODEL(10) TYPE C,
  BOROBJECT(10) TYPE C,
  LOG_FIELD(30) TYPE C,
  UFLAG(1) TYPE C,
  END OF TS_USRFLDSEL.
  DATA: IT_USRFLDSEL TYPE STANDARD TABLE OF TS_USRFLDSEL .
  DATA: WA_USRFLDSEL TYPE TS_USRFLDSEL .
  DATA:  LV_USRFLDSEL TYPE STRING.
ENDIF.

*ACTTSAP12.0 Adding security Policy field*

DATA: ISCOLUMN_USR02_SECURITY_POLICY TYPE STRING.

TABLES: DD03M.

SELECT single * FROM DD03M into ls_dd03m
WHERE TABNAME = 'USR02' AND FIELDNAME = 'SECURITY_POLICY'.
.

IF SY-SUBRC = 0.
  ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
ELSE.
  ISCOLUMN_USR02_SECURITY_POLICY = 'No'.
ENDIF.
IF ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
  TYPES: BEGIN OF TS_USR02_CC_1,
  GLTGB TYPE USR02-GLTGB,
  USTYP TYPE USR02-USTYP,
  CLASS TYPE USR02-CLASS,
  ANAME TYPE USR02-ANAME,
  ERDAT TYPE USR02-ERDAT,
  TRDAT TYPE USR02-TRDAT,
  LTIME TYPE USR02-LTIME,
  GLTGV TYPE USR02-GLTGV,
  UFLAG TYPE USR02-UFLAG,
  MANDT TYPE USR02-MANDT,
  BNAME TYPE USR02-BNAME,
  SECURITY_POLICY(10) TYPE C,
  END OF TS_USR02_CC_1.
  DATA: IT_USR02_CC_1 TYPE STANDARD TABLE OF TS_USR02_CC_1 .
  DATA: WA_USR02_CC_1 TYPE TS_USR02_CC_1 .
  DATA:  LV_USR02_CC_1 TYPE STRING.
ELSE.
  TYPES: BEGIN OF TS_USR02_CC,
  GLTGB TYPE USR02-GLTGB,
  USTYP TYPE USR02-USTYP,
  CLASS TYPE USR02-CLASS,
  ANAME TYPE USR02-ANAME,
  ERDAT TYPE USR02-ERDAT,
  TRDAT TYPE USR02-TRDAT,
  LTIME TYPE USR02-LTIME,
  GLTGV TYPE USR02-GLTGV,
  UFLAG TYPE USR02-UFLAG,
  MANDT TYPE USR02-MANDT,
  BNAME TYPE USR02-BNAME,
  END OF TS_USR02_CC.
  DATA: IT_USR02_CC TYPE STANDARD TABLE OF TS_USR02_CC .
  DATA: WA_USR02_CC TYPE TS_USR02_CC .
  DATA:  LV_USR02_CC TYPE STRING.
ENDIF.
TYPES: BEGIN OF TS_USR10,
MANDT TYPE USR10-MANDT,
PROFN TYPE USR10-PROFN,
AKTPS TYPE USR10-AKTPS,
TYP TYPE USR10-TYP,
END OF TS_USR10.
DATA: IT_USR10 TYPE STANDARD TABLE OF TS_USR10 .
DATA: WA_USR10 TYPE TS_USR10 .
DATA:  LV_USR10 TYPE STRING.
TYPES: BEGIN OF TS_USR21,
MANDT TYPE USR21-MANDT,
BNAME TYPE USR21-BNAME,
PERSNUMBER TYPE USR21-PERSNUMBER,
END OF TS_USR21.
DATA: IT_USR21 TYPE STANDARD TABLE OF TS_USR21 .
DATA: WA_USR21 TYPE TS_USR21 .
DATA:  LV_USR21 TYPE STRING.
TYPES: BEGIN OF TS_USREFUS,
USERALIAS TYPE USREFUS-USERALIAS,
REFUSER TYPE USREFUS-REFUSER,
BNAME TYPE USREFUS-BNAME,
MANDT TYPE USREFUS-MANDT,
END OF TS_USREFUS.
DATA: IT_USREFUS TYPE STANDARD TABLE OF TS_USREFUS .
DATA: WA_USREFUS TYPE TS_USREFUS .
DATA:  LV_USREFUS TYPE STRING.
TYPES: BEGIN OF TS_UST04,
BNAME TYPE UST04-BNAME,
MANDT TYPE UST04-MANDT,
PROFILE TYPE UST04-PROFILE,
END OF TS_UST04.
DATA: IT_UST04 TYPE STANDARD TABLE OF TS_UST04 .
DATA: WA_UST04 TYPE TS_UST04 .
DATA:  LV_UST04 TYPE STRING.
TYPES: BEGIN OF TS_UST10C,
MANDT TYPE UST10C-MANDT,
PROFN TYPE UST10C-PROFN,
AKTPS TYPE UST10C-AKTPS,
SUBPROF TYPE UST10C-SUBPROF,
END OF TS_UST10C.
DATA: IT_UST10C TYPE STANDARD TABLE OF TS_UST10C .
DATA: WA_UST10C TYPE TS_UST10C .
DATA:  LV_UST10C TYPE STRING.
TYPES: BEGIN OF TS_UST10S,
MANDT TYPE UST10S-MANDT,
PROFN TYPE UST10S-PROFN,
AKTPS TYPE UST10S-AKTPS,
OBJCT TYPE UST10S-OBJCT,
AUTH TYPE UST10S-AUTH,
END OF TS_UST10S.
DATA: IT_UST10S TYPE STANDARD TABLE OF TS_UST10S .
DATA: WA_UST10S TYPE TS_UST10S .
DATA:  LV_UST10S TYPE STRING.
TYPES: BEGIN OF TS_UST12,
BIS TYPE UST12-BIS,
VON TYPE UST12-VON,
FIELD TYPE UST12-FIELD,
AKTPS TYPE UST12-AKTPS,
AUTH TYPE UST12-AUTH,
OBJCT TYPE UST12-OBJCT,
MANDT TYPE UST12-MANDT,
END OF TS_UST12.
DATA: IT_UST12 TYPE STANDARD TABLE OF TS_UST12 .
DATA: WA_UST12 TYPE TS_UST12 .
DATA:  LV_UST12 TYPE STRING.
TYPES: BEGIN OF TS_USOBT_C,
NAME TYPE USOBT_C-NAME,
TYPE TYPE USOBT_C-TYPE,
OBJECT TYPE USOBT_C-OBJECT,
FIELD TYPE USOBT_C-FIELD,
LOW TYPE USOBT_C-LOW,
HIGH TYPE USOBT_C-HIGH,
END OF TS_USOBT_C.
DATA: IT_USOBT_C TYPE STANDARD TABLE OF TS_USOBT_C .
DATA: WA_USOBT_C TYPE TS_USOBT_C .
DATA:  LV_USOBT_C TYPE STRING.
TYPES: BEGIN OF TS_ADRP,
CLIENT TYPE ADRP-CLIENT,
PERSNUMBER TYPE ADRP-PERSNUMBER,
DATE_FROM TYPE ADRP-DATE_FROM,
DATE_TO TYPE ADRP-DATE_TO,
TITLE TYPE ADRP-TITLE,
NAME_FIRST TYPE ADRP-NAME_FIRST,
NAME_LAST TYPE ADRP-NAME_LAST,
SEX TYPE ADRP-SEX,
END OF TS_ADRP.
DATA: IT_ADRP TYPE STANDARD TABLE OF TS_ADRP .
DATA: WA_ADRP TYPE TS_ADRP .
DATA:  LV_ADRP TYPE STRING.

*#ACTTSAP15.0 Release 15.0 Changes Begin *
Types: Begin of TS_DD02L,
TABNAME TYPE DD02L-TABNAME,
AS4LOCAL TYPE DD02L-AS4LOCAL,
CLIDEP TYPE DD02L-CLIDEP,
MAINFLAG TYPE DD02L-MAINFLAG,
End of TS_DD02L.
Data: IT_DD02L TYPE STANDARD TABLE OF TS_DD02L .
Data: WA_DD02L TYPE TS_DD02L .
data:  LV_DD02L type string.
Types: Begin of TS_TVDIR,
TABNAME TYPE TVDIR-TABNAME,
FLAG TYPE TVDIR-FLAG,
End of TS_TVDIR.
Data: IT_TVDIR TYPE STANDARD TABLE OF TS_TVDIR .
Data: WA_TVDIR TYPE TS_TVDIR .
data:  LV_TVDIR type string.
Types: Begin of TS_OBJH,
OBJECTNAME TYPE OBJH-OBJECTNAME,
OBJECTTYPE TYPE OBJH-OBJECTTYPE,
End of TS_OBJH.
Data: IT_OBJH TYPE STANDARD TABLE OF TS_OBJH .
Data: WA_OBJH TYPE TS_OBJH .
data:  LV_OBJH type string.
Types: Begin of TS_DD02T,
TABNAME TYPE DD02T-TABNAME,
DDTEXT TYPE DD02T-DDTEXT,
DDLANGUAGE TYPE DD02T-DDLANGUAGE,
End of TS_DD02T.
Data: IT_DD02T TYPE STANDARD TABLE OF TS_DD02T .
Data: WA_DD02T TYPE TS_DD02T .
data:  LV_DD02T type string.
Types: Begin of TS_DD03l,
TABNAME TYPE DD03l-TABNAME,
DDTEXT TYPE DD03l-FIELDNAME,
DDLANGUAGE TYPE DD03l-ROLLNAME,
End of TS_DD03l.
Data: IT_DD03l TYPE STANDARD TABLE OF TS_DD03l .
Data: WA_DD03l TYPE TS_DD03l .
data:  LV_DD03l type string.
*#ACTTSAP15.0 Release 15.0 Changes End *

*#ACTTSAP12.0 Release 12.0 Changes Begin *
* Adding Tables PAT03, TVIMF, USH04, USR04, USH02, CDHDR, CDPOS,SAPWLSERV, AGR_TEXTS, TBTCO, RSAUPROF, E070 , E07T, SSM_CIDT, and TPALOG*


TYPES: BEGIN OF TS_SAPWLSERV,
NAME TYPE SAPWLSERV-NAME,
INSTNO TYPE SAPWLSERV-INSTNO,
HOST TYPE SAPWLSERV-HOST,
LASTDAY TYPE SAPWLSERV-LASTDAY,
INSTSHORT TYPE SAPWLSERV-INSTSHORT,
HOSTSHORT TYPE SAPWLSERV-HOSTSHORT,
END OF TS_SAPWLSERV.
DATA: IT_SAPWLSERV TYPE STANDARD TABLE OF TS_SAPWLSERV .
DATA: WA_SAPWLSERV TYPE TS_SAPWLSERV .
DATA:  LV_SAPWLSERV TYPE STRING.

TYPES: BEGIN OF TS_TBTCO,
JOBNAME TYPE TBTCO-JOBNAME,
JOBCOUNT TYPE TBTCO-JOBCOUNT,
SDLSTRTDT TYPE TBTCO-SDLSTRTDT,
SDLSTRTTM TYPE TBTCO-SDLSTRTTM,
SDLUNAME TYPE TBTCO-SDLUNAME,
STATUS TYPE TBTCO-STATUS,
ENDDATE TYPE TBTCO-ENDDATE,
ENDTIME TYPE TBTCO-ENDTIME,
LASTCHDATE TYPE TBTCO-LASTCHDATE,
LASTCHTIME TYPE TBTCO-LASTCHTIME,
LASTCHNAME TYPE TBTCO-LASTCHNAME,
END OF TS_TBTCO.
DATA: IT_TBTCO TYPE STANDARD TABLE OF TS_TBTCO .
DATA: WA_TBTCO TYPE TS_TBTCO .
DATA:  LV_TBTCO TYPE STRING.


TYPES: BEGIN OF TS_RSAUPROF,
PROFNAME TYPE RSAUPROF-PROFNAME,
SLOTNO TYPE RSAUPROF-SLOTNO,
CURRPROF TYPE RSAUPROF-CURRPROF,
CLASSES TYPE RSAUPROF-CLASSES,
SEVERITY TYPE RSAUPROF-SEVERITY,
CLIENT TYPE RSAUPROF-CLIENT,
UNAME TYPE RSAUPROF-UNAME,
STATUS TYPE RSAUPROF-STATUS,
CUNAME TYPE RSAUPROF-CUNAME,
CDATE TYPE RSAUPROF-CDATE,
SELVAR TYPE RSAUPROF-SELVAR,
MSGVECT TYPE RSAUPROF-MSGVECT,
END OF TS_RSAUPROF.
DATA: IT_RSAUPROF TYPE STANDARD TABLE OF TS_RSAUPROF .
DATA: WA_RSAUPROF TYPE TS_RSAUPROF .
DATA:  LV_RSAUPROF TYPE STRING.

TYPES: BEGIN OF TS_AGR_TEXTS,
MANDT TYPE AGR_TEXTS-MANDT,
AGR_NAME TYPE AGR_TEXTS-AGR_NAME,
TEXT TYPE AGR_TEXTS-TEXT,
SPRAS TYPE AGR_TEXTS-SPRAS,
LINE TYPE AGR_TEXTS-LINE,
END OF TS_AGR_TEXTS.
DATA: IT_AGR_TEXTS TYPE STANDARD TABLE OF TS_AGR_TEXTS .
DATA: WA_AGR_TEXTS TYPE TS_AGR_TEXTS .
DATA:  LV_AGR_TEXTS TYPE STRING.

TYPES: BEGIN OF TS_PAT03,
PATCH TYPE PAT03-PATCH,
SHORT_TEXT TYPE PAT03-SHORT_TEXT,
STATUS TYPE PAT03-STATUS,
IMPLE_DATE TYPE PAT03-IMPLE_DATE,
L_IMPL_REL TYPE PAT03-L_IMPL_REL,
DELIV_DATE TYPE PAT03-DELIV_DATE,
IMPLE_TIME TYPE PAT03-IMPLE_TIME,
COMP_REL TYPE PAT03-COMP_REL,
COMPONENT TYPE PAT03-COMPONENT,
END OF TS_PAT03.
DATA: IT_PAT03 TYPE STANDARD TABLE OF TS_PAT03 .
DATA: WA_PAT03 TYPE TS_PAT03 .
DATA:  LV_PAT03 TYPE STRING.
TYPES: BEGIN OF TS_TVIMF,
TABNAME TYPE TVIMF-TABNAME,
EVENT TYPE TVIMF-EVENT,
FORMNAME TYPE TVIMF-FORMNAME,
END OF TS_TVIMF.
DATA: IT_TVIMF TYPE STANDARD TABLE OF TS_TVIMF .
DATA: WA_TVIMF TYPE TS_TVIMF .
DATA:  LV_TVIMF TYPE STRING.
TYPES: BEGIN OF TS_USH04,
MANDT TYPE USH04-MANDT,
BNAME TYPE USH04-BNAME,
MODDA TYPE USH04-MODDA,
MODTI TYPE USH04-MODTI,
MODBE TYPE USH04-MODBE,
NRPRO TYPE USH04-NRPRO,
PROFS TYPE USH04-PROFS,
END OF TS_USH04.
DATA: IT_USH04 TYPE STANDARD TABLE OF TS_USH04 .
DATA: WA_USH04 TYPE TS_USH04 .
DATA:  LV_USH04 TYPE STRING.
TYPES: BEGIN OF TS_USR04,
MANDT TYPE USR04-MANDT,
BNAME TYPE USR04-BNAME,
MODDA TYPE USR04-MODDA,
MODTI TYPE USR04-MODTI,
MODBE TYPE USR04-MODBE,
NRPRO TYPE USR04-NRPRO,
PROFS TYPE USR04-PROFS,
END OF TS_USR04.
DATA: IT_USR04 TYPE STANDARD TABLE OF TS_USR04 .
DATA: WA_USR04 TYPE TS_USR04 .
DATA:  LV_USR04 TYPE STRING.

TYPES: BEGIN OF TS_USH02,
MANDT TYPE USH02-MANDT,
BNAME TYPE USH02-BNAME,
MODDA TYPE USH02-MODDA,
MODTI TYPE USH02-MODTI,
MODBE TYPE USH02-MODBE,
TCODE TYPE USH02-TCODE,
REPID TYPE USH02-REPID,
GLTGV TYPE USH02-GLTGV,
GLTGB TYPE USH02-GLTGB,
USTYP TYPE USH02-USTYP,
CLASS TYPE USH02-CLASS,
UFLAG TYPE USH02-UFLAG,
ACCNT TYPE USH02-ACCNT,
END OF TS_USH02.
DATA: IT_USH02 TYPE STANDARD TABLE OF TS_USH02 .
DATA: WA_USH02 TYPE TS_USH02 .
DATA:  LV_USH02 TYPE STRING.
TYPES: BEGIN OF TS_CDHDR,
MANDANT TYPE CDHDR-MANDANT,
OBJECTCLAS TYPE CDHDR-OBJECTCLAS,
OBJECTID TYPE CDHDR-OBJECTID,
CHANGENR TYPE CDHDR-CHANGENR,
USERNAME TYPE CDHDR-USERNAME,
UDATE TYPE CDHDR-UDATE,
UTIME TYPE CDHDR-UTIME,
TCODE TYPE CDHDR-TCODE,
PLANCHNGNR TYPE CDHDR-PLANCHNGNR,
ACT_CHNGNO TYPE CDHDR-ACT_CHNGNO,
WAS_PLANND TYPE CDHDR-WAS_PLANND,
CHANGE_IND TYPE CDHDR-CHANGE_IND,
LANGU TYPE CDHDR-LANGU,
VERSION TYPE CDHDR-VERSION,
END OF TS_CDHDR.
DATA: IT_CDHDR TYPE STANDARD TABLE OF TS_CDHDR .
DATA: WA_CDHDR TYPE TS_CDHDR .
DATA:  LV_CDHDR TYPE STRING.
TYPES: BEGIN OF TS_CDPOS,
MANDANT TYPE CDPOS-MANDANT,
OBJECTCLAS TYPE CDPOS-OBJECTCLAS,
OBJECTID TYPE CDPOS-OBJECTID,
CHANGENR TYPE CDPOS-CHANGENR,
TABNAME TYPE CDPOS-TABNAME,
TABKEY TYPE CDPOS-TABKEY,
FNAME TYPE CDPOS-FNAME,
CHNGIND TYPE CDPOS-CHNGIND,
TEXT_CASE TYPE CDPOS-TEXT_CASE,
UNIT_OLD TYPE CDPOS-UNIT_OLD,
UNIT_NEW TYPE CDPOS-UNIT_NEW,
CUKY_OLD TYPE CDPOS-CUKY_OLD,
CUKY_NEW TYPE CDPOS-CUKY_NEW,
VALUE_NEW TYPE CDPOS-VALUE_NEW,
VALUE_OLD TYPE CDPOS-VALUE_OLD,
END OF TS_CDPOS.
DATA: IT_CDPOS TYPE STANDARD TABLE OF TS_CDPOS .
DATA: WA_CDPOS TYPE TS_CDPOS .
DATA:  LV_CDPOS TYPE STRING.
TYPES: BEGIN OF TS_E070,
TRKORR TYPE E070-TRKORR,
TRFUNCTION TYPE E070-TRFUNCTION,
TRSTATUS TYPE E070-TRSTATUS,
TARSYSTEM TYPE E070-TARSYSTEM,
KORRDEV TYPE E070-KORRDEV,
AS4USER TYPE E070-AS4USER,
AS4DATE TYPE E070-AS4DATE,
AS4TIME TYPE E070-AS4TIME,
STRKORR TYPE E070-STRKORR,
END OF TS_E070.
DATA: IT_E070 TYPE STANDARD TABLE OF TS_E070 .
DATA: WA_E070 TYPE TS_E070 .
DATA:  LV_E070 TYPE STRING.

TYPES: BEGIN OF TS_E07T,
TRKORR TYPE E07T-TRKORR,
LANGU TYPE E07T-LANGU,
AS4TEXT TYPE E07T-AS4TEXT,
END OF TS_E07T.
DATA: IT_E07T TYPE STANDARD TABLE OF TS_E07T .
DATA: WA_E07T TYPE TS_E07T .
DATA:  LV_E07T TYPE STRING.

TYPES: BEGIN OF TS_SSM_CIDT,
TABNAME TYPE SSM_CIDT-TABNAME,
ID TYPE SSM_CIDT-ID,
STEXT TYPE SSM_CIDT-STEXT,
LANGU TYPE SSM_CIDT-LANGU,
END OF TS_SSM_CIDT.
DATA: IT_SSM_CIDT TYPE STANDARD TABLE OF TS_SSM_CIDT .
DATA: WA_SSM_CIDT TYPE TS_SSM_CIDT .
DATA:  LV_SSM_CIDT TYPE STRING.

TYPES: BEGIN OF TS_TPALOG,
TRTIME TYPE TPALOG-TRTIME,
TRKORR TYPE TPALOG-TRKORR,
TARSYSTEM TYPE TPALOG-TARSYSTEM,
TRCLI TYPE TPALOG-TRCLI,
TRSTEP TYPE TPALOG-TRSTEP,
ALLCLI TYPE TPALOG-ALLCLI,
PROJECT TYPE TPALOG-PROJECT,
TRUSER TYPE TPALOG-TRUSER,
RETCODE TYPE TPALOG-RETCODE,
HOST TYPE TPALOG-HOST,
ADMIN TYPE TPALOG-ADMIN,
TPSTAT_KEY TYPE TPALOG-TPSTAT_KEY,
END OF TS_TPALOG.
DATA: IT_TPALOG TYPE STANDARD TABLE OF TS_TPALOG .
DATA: WA_TPALOG TYPE TS_TPALOG .
DATA:  LV_TPALOG TYPE STRING.
TYPES: BEGIN OF TS_PRGN_CUST,
ID TYPE PRGN_CUST-ID,
PATH TYPE PRGN_CUST-PATH,
END OF TS_PRGN_CUST.
DATA: IT_PRGN_CUST TYPE STANDARD TABLE OF TS_PRGN_CUST .
DATA: WA_PRGN_CUST TYPE TS_PRGN_CUST .
DATA:  LV_PRGN_CUST TYPE STRING.
TYPES: BEGIN OF TS_EDIDS,
MANDT TYPE EDIDS-MANDT,
DOCNUM TYPE EDIDS-DOCNUM,
LOGDAT TYPE EDIDS-LOGDAT,
LOGTIM TYPE EDIDS-LOGTIM,
COUNTR TYPE EDIDS-COUNTR,
CREDAT TYPE EDIDS-CREDAT,
CRETIM TYPE EDIDS-CRETIM,
STATUS TYPE EDIDS-STATUS,
UNAME TYPE EDIDS-UNAME,
REPID TYPE EDIDS-REPID,
END OF TS_EDIDS.
DATA: IT_EDIDS TYPE STANDARD TABLE OF TS_EDIDS.
DATA: WA_EDIDS TYPE TS_EDIDS.
DATA: LV_EDIDS TYPE STRING.
TYPES: BEGIN OF TS_TEDS2,
STATUS TYPE TEDS2-STATUS,
LANGUA TYPE TEDS2-LANGUA,
DESCRP TYPE TEDS2-DESCRP,
END OF TS_TEDS2.
DATA: IT_TEDS2 TYPE STANDARD TABLE OF TS_TEDS2.
DATA: WA_TEDS2 TYPE TS_TEDS2.
DATA: LV_TEDS2 TYPE STRING.
TYPES: BEGIN OF TS_EDIDC,
MANDT TYPE EDIDC-MANDT,
DOCNUM TYPE EDIDC-DOCNUM,
MESTYP TYPE EDIDC-MESTYP,
IDOCTP TYPE EDIDC-IDOCTP,
END OF TS_EDIDC.
DATA: IT_EDIDC TYPE STANDARD TABLE OF TS_EDIDC.
DATA: WA_EDIDC TYPE TS_EDIDC.
DATA: LV_EDIDC TYPE STRING.
TYPES: BEGIN OF TS_EDIMSGT,
MESTYP TYPE EDIMSGT-MESTYP,
LANGUA TYPE EDIMSGT-LANGUA,
DESCRP TYPE EDIMSGT-DESCRP,
END OF TS_EDIMSGT.
DATA: IT_EDIMSGT TYPE STANDARD TABLE OF TS_EDIMSGT.
DATA: WA_EDIMSGT TYPE TS_EDIMSGT.
DATA: LV_EDIMSGT TYPE STRING.
TYPES: BEGIN OF TS_EDBAST,
IDOCTYP TYPE EDBAST-IDOCTYP,
LANGUA TYPE EDBAST-LANGUA,
DESCRP TYPE EDBAST-DESCRP,
END OF TS_EDBAST.
DATA: IT_EDBAST TYPE STANDARD TABLE OF TS_EDBAST.
DATA: WA_EDBAST TYPE TS_EDBAST.
DATA: LV_EDBAST TYPE STRING.
DATA: ISTABLE_T685 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T685' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T685 = 'Yes'.
ELSE.
  ISTABLE_T685 = 'No'.
ENDIF.

IF ISTABLE_T685 = 'Yes'.
Types: Begin of TS_T685,
MANDT(3) Type C,
KAPPL(2) Type C,
KSCHL(4) Type C,
KOZGF(4) Type C,
End of TS_T685.
Data: IT_T685 TYPE STANDARD TABLE OF TS_T685 .
Data: WA_T685 TYPE TS_T685 .
data:  LV_T685 type string.
ENDIF.

DATA: ISTABLE_T682I TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T682I' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T682I = 'Yes'.
ELSE.
  ISTABLE_T682I = 'No'.
ENDIF.
IF ISTABLE_T682I = 'Yes'.
Types: Begin of TS_T682I,
KOZGF(4) Type C,
KOTABNR(3) Type C,
End of TS_T682I.
Data: IT_T682I TYPE STANDARD TABLE OF TS_T682I .
Data: WA_T682I TYPE TS_T682I .
data:  LV_T682I type string.
ENDIF.

DATA: ISTABLE_GRACFFOWNER TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'GRACFFOWNER' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_GRACFFOWNER = 'Yes'.
ELSE.
  ISTABLE_GRACFFOWNER = 'No'.
ENDIF.

IF ISTABLE_GRACFFOWNER = 'Yes'.
Types: Begin of TS_GRACFFOWNER,
MANDT(3) TYPE C,
APP_TYPE(1) TYPE C,
FFOBJECT(30) TYPE C,
CONNECTOR(32) TYPE C,
OWNER(12) TYPE C,
UPDATED_BY(12) TYPE C,
UPDATED_ON TYPE P,
End of TS_GRACFFOWNER.
Data: IT_GRACFFOWNER TYPE STANDARD TABLE OF TS_GRACFFOWNER .
Data: WA_GRACFFOWNER TYPE TS_GRACFFOWNER .
data:  LV_GRACFFOWNER type string.
ENDIF.

DATA: ISTABLE_GRACFFUSER TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'GRACFFUSER' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_GRACFFUSER = 'Yes'.
ELSE.
  ISTABLE_GRACFFUSER = 'No'.
ENDIF.

IF ISTABLE_GRACFFUSER = 'Yes'.
Types: Begin of TS_GRACFFUSER,
MANDT(3) TYPE C,
APP_TYPE(1) TYPE C,
FFOBJECT(30) TYPE C,
CONNECTOR(32) TYPE C,
FF_USER(12) TYPE C,
OWNER(12) TYPE C,
LOGGED(1) TYPE C,
CRITICALITY(2) TYPE N,
VALID_FROM(8) TYPE D,
VALID_TO(8) TYPE D,
UPDATED_BY(12) TYPE C,
UPDATED_ON(15) TYPE P,
End of TS_GRACFFUSER.
Data: IT_GRACFFUSER TYPE STANDARD TABLE OF TS_GRACFFUSER .
Data: WA_GRACFFUSER TYPE TS_GRACFFUSER .
data:  LV_GRACFFUSER type string.
ENDIF.
DATA: ISTABLE_GRACFFCTRL TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'GRACFFCTRL' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_GRACFFCTRL = 'Yes'.
ELSE.
  ISTABLE_GRACFFCTRL = 'No'.
ENDIF.

IF ISTABLE_GRACFFCTRL = 'Yes'.
Types: Begin of TS_GRACFFCTRL,
MANDT(3) TYPE C,
APP_TYPE(1) TYPE C,
FFOBJECT(30) TYPE C,
CONNECTOR(32) TYPE C,
CNTRL_ID(12) TYPE C,
DELIVERY_OPT(1) TYPE C,
PRIME_CNTRL(1) TYPE C,
UPDATED_BY(12) TYPE C,
UPDATED_ON(15) TYPE P,
End of TS_GRACFFCTRL.
Data: IT_GRACFFCTRL TYPE STANDARD TABLE OF TS_GRACFFCTRL .
Data: WA_GRACFFCTRL TYPE TS_GRACFFCTRL .
data:  LV_GRACFFCTRL type string.
ENDIF.
DATA: ISTABLE_GRACCONFIGSET TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'GRACCONFIGSET' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_GRACCONFIGSET = 'Yes'.
ELSE.
  ISTABLE_GRACCONFIGSET = 'No'.
ENDIF.

IF ISTABLE_GRACCONFIGSET = 'Yes'.
Types: Begin of TS_GRACCONFIGSET,
MANDT(3) TYPE C,
PARAMID(4) TYPE N,
SEQUENCE(4) TYPE N,
PRIORITY(3) TYPE N,
PARAM_VALUE(100) TYPE C,
End of TS_GRACCONFIGSET.
Data: IT_GRACCONFIGSET TYPE STANDARD TABLE OF TS_GRACCONFIGSET .
Data: WA_GRACCONFIGSET TYPE TS_GRACCONFIGSET .
data:  LV_GRACCONFIGSET type string.
ENDIF.

DATA: ISTABLE_GRACCONFIG TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'GRACCONFIG' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_GRACCONFIG = 'Yes'.
ELSE.
  ISTABLE_GRACCONFIG = 'No'.
ENDIF.

IF ISTABLE_GRACCONFIG = 'Yes'.
Types: Begin of TS_GRACCONFIG,
PARAMID(4) TYPE N,
PARAM_GROUP(2) TYPE N,
End of TS_GRACCONFIG.
Data: IT_GRACCONFIG TYPE STANDARD TABLE OF TS_GRACCONFIG .
Data: WA_GRACCONFIG TYPE TS_GRACCONFIG .
data:  LV_GRACCONFIG type string.
ENDIF.

DATA: ISTABLE_GRACCONFIGT TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'GRACCONFIGT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_GRACCONFIGT = 'Yes'.
ELSE.
  ISTABLE_GRACCONFIGT = 'No'.
ENDIF.

IF ISTABLE_GRACCONFIGT = 'Yes'.
Types: Begin of TS_GRACCONFIGT,
LANGU(1) TYPE C,
PARAMID(4) TYPE N,
DESCN(132) TYPE C,
End of TS_GRACCONFIGT.
Data: IT_GRACCONFIGT TYPE STANDARD TABLE OF TS_GRACCONFIGT .
Data: WA_GRACCONFIGT TYPE TS_GRACCONFIGT .
data:  LV_GRACCONFIGT type string.
ENDIF.

*ACTT15R change - Extraction of table RSTRACTIVE (SAP.21)*
*Extracting Version Specific tables*

DATA: ISTABLE_RSTRACTIVE TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'RSTRACTIVE' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_RSTRACTIVE = 'Yes'.
ELSE.
  ISTABLE_RSTRACTIVE = 'No'.
ENDIF.

IF ISTABLE_RSTRACTIVE = 'Yes'.
  TYPES: BEGIN OF TS_RSTRACTIVE,
  TLOGO(4) TYPE C,
  CODE(10) TYPE C,
  CHANGEABLE(1) TYPE C,
  END OF TS_RSTRACTIVE.
  DATA: IT_RSTRACTIVE TYPE STANDARD TABLE OF TS_RSTRACTIVE .
  DATA: WA_RSTRACTIVE TYPE TS_RSTRACTIVE .
  DATA:  LV_RSTRACTIVE TYPE STRING.
ENDIF.

*Extracting Version Specific tables*
DATA: ISTABLE_SEC_POLICY_RT TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'SEC_POLICY_RT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_SEC_POLICY_RT = 'Yes'.
ELSE.
  ISTABLE_SEC_POLICY_RT = 'No'.
ENDIF.

IF ISTABLE_SEC_POLICY_RT = 'Yes'.
  TYPES: BEGIN OF TS_SEC_POLICY_RT,
  CLIENT(3) TYPE C,
  NAME(40) TYPE C,
  ATTRIB_KEY(40) TYPE C,
  ATTRIB_VALUE TYPE INT4,
  END OF TS_SEC_POLICY_RT.
  DATA: IT_SEC_POLICY_RT TYPE STANDARD TABLE OF TS_SEC_POLICY_RT .
  DATA: WA_SEC_POLICY_RT TYPE TS_SEC_POLICY_RT .
  DATA:  LV_SEC_POLICY_RT TYPE STRING.
ENDIF.

*Extracting Version Specific tables*
DATA: ISTABLE_SEC_POLICY_CUSTT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'SEC_POLICY_CUSTT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_SEC_POLICY_CUSTT = 'Yes'.
ELSE.
  ISTABLE_SEC_POLICY_CUSTT = 'No'.
ENDIF.

IF ISTABLE_SEC_POLICY_CUSTT = 'Yes'.
  TYPES: BEGIN OF TS_SEC_POLICY_CUSTT,
  CLIENT(3) TYPE C,
  LANGU TYPE LANG,
  POLICY_NAME(40) TYPE C,
  POLICY_TEXT(60) TYPE C,
  END OF TS_SEC_POLICY_CUSTT.
  DATA: IT_SEC_POLICY_CUSTT TYPE STANDARD TABLE OF TS_SEC_POLICY_CUSTT .
  DATA: WA_SEC_POLICY_CUSTT TYPE TS_SEC_POLICY_CUSTT .
  DATA:  LV_SEC_POLICY_CUSTT TYPE STRING.
ENDIF.

*ACTTSAP12.1 Adding Tables *
TYPES: BEGIN OF TS_TSL1D,
AREA TYPE TSL1D-AREA,
SUBID TYPE TSL1D-SUBID,
CLASID TYPE TSL1D-CLASID,
SUBCLASID TYPE TSL1D-SUBCLASID,
SEVERITY TYPE TSL1D-SEVERITY,
MONBEW TYPE TSL1D-MONBEW,
MONKAT TYPE TSL1D-MONKAT,
END OF TS_TSL1D.
DATA: IT_TSL1D TYPE STANDARD TABLE OF TS_TSL1D .
DATA: WA_TSL1D TYPE TS_TSL1D .
DATA:  LV_TSL1D TYPE STRING.
TYPES: BEGIN OF TS_TSL1T,
SPRAS TYPE TSL1T-SPRAS,
AREA TYPE TSL1T-AREA,
SUBID TYPE TSL1T-SUBID,
TXT TYPE TSL1T-TXT,
END OF TS_TSL1T.
DATA: IT_TSL1T TYPE STANDARD TABLE OF TS_TSL1T .
DATA: WA_TSL1T TYPE TS_TSL1T .
DATA:  LV_TSL1T TYPE STRING.

DATA: ISTABLE_ANLA TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'ANLA' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_ANLA = 'Yes'.
ELSE.
  ISTABLE_ANLA = 'No'.
ENDIF.

IF ISTABLE_ANLA = 'Yes'.
TYPES: BEGIN OF TS_ANLA,
MANDT(3) Type C,
BUKRS(4) Type C,
ANLN1(12) Type C,
ANLN2(4) Type C,
ANLKL(8) Type C,
ERNAM(12) Type C,
ERDAT(8) Type D,
AENAM(12) Type C,
AEDAT(8) Type D,
KTOGR(8) Type C,
ZUGDT(8) Type D,
AKTIV(8) Type D,
ABGDT(8) Type D,
DEAKT(8) Type D,
TXT50(50) Type C,
TXA50(50) Type C,
END OF TS_ANLA.
DATA: IT_ANLA TYPE STANDARD TABLE OF TS_ANLA .
DATA: WA_ANLA TYPE TS_ANLA .
DATA:  LV_ANLA TYPE STRING.

ENDIF.

DATA: ISTABLE_ANKA TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'ANKA' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_ANKA = 'Yes'.
ELSE.
  ISTABLE_ANKA = 'No'.
ENDIF.

IF ISTABLE_ANKA = 'Yes'.
TYPES: BEGIN OF TS_ANKA,
MANDT(3) Type C,
ANLKL(8) Type C,
KTOGR(8) Type C,
FELEI(4) Type C,
ANEQK(1) Type C,
NUMKR(2) Type C,
XSPEA(1) Type C,
XUNTV(1) Type C,
END OF ts_anka.
DATA: it_anka TYPE STANDARD TABLE OF ts_anka .
DATA: wa_anka TYPE ts_anka .
DATA:  lv_anka TYPE string.
ENDIF.

DATA: ISTABLE_ANKB TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'ANKB' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_ANKB = 'Yes'.
ELSE.
  ISTABLE_ANKB = 'No'.
ENDIF.

IF ISTABLE_ANKB = 'Yes'.
Types: Begin of TS_ANKB,
MANDT(3) Type C,
ANLKL(8) Type C,
AFAPL(4) Type C,
AFABE(2) Type C,
BDATU(8) Type D,
ADATU(8) Type D,
ERNAM(12) Type C,
ERDAT(8) Type D,
AENAM(12) Type C,
AEDAT(8) Type D,
XSPEB(1) Type C,
XLOEV(1) Type C,
FELEI(4) Type C,
KTOGR(8) Type C,
XNEGA(1) Type C,
XGWGK(1) Type C,
MINDJ(3) Type C,
MINDP(3) Type C,
MAXDJ(3) Type C,
MAXDP(3) Type C,
INVSL(2) Type C,
AFASL(4) Type C,
NDJAR(3) Type C,
NDPER(3) Type C,
NAPRZ Type P,
SAPRZ Type P,
WBIND(5) Type C,
ALIND(5) Type C,
APROP Type P,
End of TS_ANKB.
Data: IT_ANKB TYPE STANDARD TABLE OF TS_ANKB .
Data: WA_ANKB TYPE TS_ANKB .
data:  LV_ANKB type string.
ENDIF.

DATA: ISTABLE_ANKT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'ANKT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_ANKT = 'Yes'.
ELSE.
  ISTABLE_ANKT = 'No'.
ENDIF.

IF ISTABLE_ANKT = 'Yes'.
TYPES: BEGIN OF ts_ankt,
MANDT(3) Type C,
SPRAS(1) Type C,
ANLKL(8) Type C,
TXK50(50) Type C,
END OF ts_ankt.
DATA: it_ankt TYPE STANDARD TABLE OF ts_ankt .
DATA: wa_ankt TYPE ts_ankt .
DATA:  lv_ankt TYPE string.
ENDIF.

DATA: ISTABLE_ANLB TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'ANLB' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_ANLB = 'Yes'.
ELSE.
  ISTABLE_ANLB = 'No'.
ENDIF.
IF ISTABLE_ANLB = 'Yes'.
Types: Begin of TS_ANLB,
MANDT(3) Type C,
BUKRS(4) Type C,
ANLN1(12) Type C,
ANLN2(4) Type C,
AFABE(2) Type C,
XLOEV(1) Type C,
XSPEB(1) Type C,
AFASL(4) Type C,
NDJAR(3) Type C,
NDPER(3) Type C,
End of TS_ANLB.
Data: IT_ANLB TYPE STANDARD TABLE OF TS_ANLB .
Data: WA_ANLB TYPE TS_ANLB .
data:  LV_ANLB type string.
ENDIF.

DATA: ISTABLE_C001 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'C001' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_C001 = 'Yes'.
ELSE.
  ISTABLE_C001 = 'No'.
ENDIF.

IF ISTABLE_C001 = 'Yes'.
TYPES: BEGIN OF TS_C001,
MANDT(3) Type C,
KAPPL(2) Type C,
KSCHL(4) Type C,
KTOPL(4) Type C,
VKORG(4) Type C,
KTGRD(2) Type C,
KTGRM(2) Type C,
KVSL1(3) Type C,
SAKN1(10) Type C,
SAKN2(10) Type C,
End of TS_C001.
Data: IT_C001 TYPE STANDARD TABLE OF TS_C001 .
Data: WA_C001 TYPE TS_C001 .
data:  LV_C001 type string.
ENDIF.

DATA: ISTABLE_C002 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'C002' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_C002 = 'Yes'.
ELSE.
  ISTABLE_C002 = 'No'.
ENDIF.

IF ISTABLE_C002 = 'Yes'.
Types: Begin of TS_C002,
MANDT(3) Type C,
KAPPL(2) Type C,
KSCHL(4) Type C,
KTOPL(4) Type C,
VKORG(4) Type C,
KTGRD(2) Type C,
KVSL1(3) Type C,
SAKN1(10) Type C,
SAKN2(10) Type C,
End of TS_C002.
Data: IT_C002 TYPE STANDARD TABLE OF TS_C002 .
Data: WA_C002 TYPE TS_C002 .
data:  LV_C002 type string.
ENDIF.

DATA: ISTABLE_C003 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'C003' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_C003 = 'Yes'.
ELSE.
  ISTABLE_C003 = 'No'.
ENDIF.

IF ISTABLE_C003 = 'Yes'.
Types: Begin of TS_C003,
MANDT(3) Type C,
KAPPL(2) Type C,
KSCHL(4) Type C,
KTOPL(4) Type C,
VKORG(4) Type C,
KTGRM(2) Type C,
KVSL1(3) Type C,
SAKN1(10) Type C,
SAKN2(10) Type C,
End of TS_C003.
Data: IT_C003 TYPE STANDARD TABLE OF TS_C003 .
Data: WA_C003 TYPE TS_C003 .
data:  LV_C003 type string.
ENDIF.

DATA: ISTABLE_C004 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'C004' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_C004 = 'Yes'.
ELSE.
  ISTABLE_C004 = 'No'.
ENDIF.

IF ISTABLE_C004 = 'Yes'.
Types: Begin of TS_C004,
MANDT(3) Type C,
KAPPL(2) Type C,
KSCHL(4) Type C,
KTOPL(4) Type C,
VKORG(4) Type C,
SAKN1(10) Type C,
SAKN2(10) Type C,
End of TS_C004.
Data: IT_C004 TYPE STANDARD TABLE OF TS_C004 .
Data: WA_C004 TYPE TS_C004 .
data:  LV_C004 type string.
ENDIF.

DATA: ISTABLE_C005 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'C004' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_C005 = 'Yes'.
ELSE.
  ISTABLE_C005 = 'No'.
ENDIF.

IF ISTABLE_C005 = 'Yes'.
Types: Begin of TS_C005,
MANDT(3) Type C,
KAPPL(2) Type C,
KSCHL(4) Type C,
KTOPL(4) Type C,
VKORG(4) Type C,
KVSL1(3) Type C,
SAKN1(10) Type C,
SAKN2(10) Type C,
End of TS_C005.
Data: IT_C005 TYPE STANDARD TABLE OF TS_C005 .
Data: WA_C005 TYPE TS_C005 .
data:  LV_C005 type string.
ENDIF.

DATA: ISTABLE_MARV TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'MARV' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_MARV = 'Yes'.
ELSE.
  ISTABLE_MARV = 'No'.
ENDIF.

IF ISTABLE_MARV = 'Yes'.
Types: Begin of TS_MARV,
MANDT(3) Type C,
BUKRS(4) Type C,
LFGJA(4) Type C,
LFMON(2) Type C,
XRUEM(2) Type C,
XRUEV(1) Type C,
End of TS_MARV.
Data: IT_MARV TYPE STANDARD TABLE OF TS_MARV .
Data: WA_MARV TYPE TS_MARV .
data:  LV_MARV type string.
ENDIF.

DATA: ISTABLE_NRIV TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'NRIV' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_NRIV = 'Yes'.
ELSE.
  ISTABLE_NRIV = 'No'.
ENDIF.

IF ISTABLE_NRIV = 'Yes'.
Types: Begin of TS_NRIV,
CLIENT(3) Type C,
OBJECT(10) Type C,
SUBOBJECT(6) Type C,
NRRANGENR(2) Type C,
TOYEAR(4) Type C,
FROMNUMBER(20) Type C,
TONUMBER(20) Type C,
NRLEVEL(20) Type C,
EXTERNIND(1) Type C,
End of TS_NRIV.
Data: IT_NRIV TYPE STANDARD TABLE OF TS_NRIV .
Data: WA_NRIV TYPE TS_NRIV .
data:  LV_NRIV type string.
ENDIF.

DATA: ISTABLE_SKA1 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'SKA1' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_SKA1 = 'Yes'.
ELSE.
  ISTABLE_SKA1 = 'No'.
ENDIF.

IF ISTABLE_SKA1 = 'Yes'.
Types: Begin of TS_SKA1,
MANDT(3) Type C,
KTOPL(4) Type C,
SAKNR(10) Type C,
XBILK(1) Type C,
SAKAN(10) Type C,
BILKT(10) Type C,
ERDAT(8) Type D,
ERNAM(12) Type C,
GVTYP(2) Type C,
KTOKS(4) Type C,
MUSTR(10) Type C,
VBUND(6) Type C,
XLOEV(1) Type C,
XSPEA(1) Type C,
XSPEB(1) Type C,
XSPEP(1) Type C,
MCOD1(25) Type C,
End of TS_SKA1.
Data: IT_SKA1 TYPE STANDARD TABLE OF TS_SKA1 .
Data: WA_SKA1 TYPE TS_SKA1 .
data:  LV_SKA1 type string.
ENDIF.

DATA: ISTABLE_SKAT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'SKAT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_SKAT = 'Yes'.
ELSE.
  ISTABLE_SKAT = 'No'.
ENDIF.

IF ISTABLE_SKAT = 'Yes'.
Types: Begin of TS_SKAT,
MANDT(3) Type C,
SPRAS(1) Type C,
KTOPL(4) Type C,
SAKNR(10) Type C,
TXT50(50) Type C,
End of TS_SKAT.
Data: IT_SKAT TYPE STANDARD TABLE OF TS_SKAT .
Data: WA_SKAT TYPE TS_SKAT .
data:  LV_SKAT type string.
ENDIF.

DATA: ISTABLE_SKB1 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'SKB1' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_SKB1 = 'Yes'.
ELSE.
  ISTABLE_SKB1 = 'No'.
ENDIF.

IF ISTABLE_SKB1 = 'Yes'.
Types: Begin of TS_SKB1,
MANDT(3) Type C,
BUKRS(4) Type C,
SAKNR(10) Type C,
BEGRU(4) Type C,
BUSAB(2) Type C,
DATLZ(8) Type D,
ERDAT(8) Type D,
ERNAM(12) Type C,
FDGRV(10) Type C,
FDLEV(2) Type C,
FIPLS(3) Type C,
FSTAG(4) Type C,
HBKID(5) Type C,
HKTID(5) Type C,
KDFSL(4) Type C,
MITKZ(1) Type C,
MWSKZ(2) Type C,
STEXT(50) Type C,
VZSKZ(2) Type C,
WAERS(5) Type C,
WMETH(2) Type C,
XGKON(1) Type C,
XINTB(1) Type C,
XKRES(1) Type C,
XLOEB(1) Type C,
XNKON(1) Type C,
XOPVW(1) Type C,
XSPEB(1) Type C,
ZINDT(8) Type D,
ZINRT(2) Type C,
ZUAWA(3) Type C,
ALTKT(10) Type C,
XMITK(1) Type C,
RECID(2) Type C,
FIPOS(14) Type C,
XMWNO(1) Type C,
XSALH(1) Type C,
BEWGP(10) Type C,
INFKY(8) Type C,
TOGRU(4) Type C,
End of TS_SKB1.
Data: IT_SKB1 TYPE STANDARD TABLE OF TS_SKB1 .
Data: WA_SKB1 TYPE TS_SKB1 .
data:  LV_SKB1 type string.
ENDIF.

DATA: ISTABLE_T001B TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T001B' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T001B = 'Yes'.
ELSE.
  ISTABLE_T001B = 'No'.
ENDIF.

IF ISTABLE_T001B = 'Yes'.
Types: Begin of TS_T001B,
MANDT(3) Type C,
RRCTY(1) Type C,
BUKRS(4) Type C,
MKOAR(1) Type C,
BKONT(10) Type C,
VKONT(10) Type C,
FRYE1(4) Type C,
FRPE1(3) Type C,
TOYE1(4) Type C,
TOPE1(3) Type C,
FRYE2(4) Type C,
FRPE2(3) Type C,
TOYE2(4) Type C,
TOPE2(3) Type C,
End of TS_T001B.
Data: IT_T001B TYPE STANDARD TABLE OF TS_T001B .
Data: WA_T001B TYPE TS_T001B .
data:  LV_T001B type string.
ENDIF.

DATA: ISTABLE_T001R TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T001R' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T001R = 'Yes'.
ELSE.
  ISTABLE_T001R = 'No'.
ENDIF.

IF ISTABLE_T001R = 'Yes'.
Types: Begin of TS_T001R,
MANDT(3) Type C,
BUKRS(4) Type C,
WAERS(5) Type C,
REINH(4) Type C,
End of TS_T001R.
Data: IT_T001R TYPE STANDARD TABLE OF TS_T001R .
Data: WA_T001R TYPE TS_T001R .
data:  LV_T001R type string.
ENDIF.

DATA: ISTABLE_T001W TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T001W' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T001W = 'Yes'.
ELSE.
  ISTABLE_T001W = 'No'.
ENDIF.

IF ISTABLE_T001W = 'Yes'.
Types: Begin of TS_T001W,
MANDT(3) Type C,
WERKS(4) Type C,
NAME1(30) Type C,
End of TS_T001W.
Data: IT_T001W TYPE STANDARD TABLE OF TS_T001W .
Data: WA_T001W TYPE TS_T001W .
data:  LV_T001W type string.
ENDIF.

DATA: ISTABLE_T003 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T003' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T003 = 'Yes'.
ELSE.
  ISTABLE_T003 = 'No'.
ENDIF.

IF ISTABLE_T003 = 'Yes'.
Types: Begin of TS_T003,
MANDT(3) Type C,
BLART(2) Type C,
BRGRU(4) Type C,
NUMKR(2) Type C,
KOARS(5) Type C,
STBLA(2) Type C,
XMTXT(1) Type C,
XMREF(1) Type C,
End of TS_T003.
Data: IT_T003 TYPE STANDARD TABLE OF TS_T003 .
Data: WA_T003 TYPE TS_T003 .
data:  LV_T003 type string.
ENDIF.

DATA: ISTABLE_T003T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T003T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T003T = 'Yes'.
ELSE.
  ISTABLE_T003T = 'No'.
ENDIF.

IF ISTABLE_T003T = 'Yes'.
Types: Begin of TS_T003T,
MANDT(3) Type C,
SPRAS(1) Type C,
BLART(2) Type C,
LTEXT(20) Type C,
End of TS_T003T.
Data: IT_T003T TYPE STANDARD TABLE OF TS_T003T .
Data: WA_T003T TYPE TS_T003T .
data:  LV_T003T type string.
ENDIF.

DATA: ISTABLE_T004 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T004' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T004 = 'Yes'.
ELSE.
  ISTABLE_T004 = 'No'.
ENDIF.

IF ISTABLE_T004 = 'Yes'.
Types: Begin of TS_T004,
MANDT(3) Type C,
KTOPL(4) Type C,
End of TS_T004.
Data: IT_T004 TYPE STANDARD TABLE OF TS_T004 .
Data: WA_T004 TYPE TS_T004 .
data:  LV_T004 type string.
ENDIF.

DATA: ISTABLE_T004T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T004T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T004T = 'Yes'.
ELSE.
  ISTABLE_T004T = 'No'.
ENDIF.

IF ISTABLE_T004T = 'Yes'.
Types: Begin of TS_T004T,
MANDT(3) Type C,
SPRAS(1) Type C,
KTOPL(4) Type C,
KTPLT(50) Type C,
End of TS_T004T.
Data: IT_T004T TYPE STANDARD TABLE OF TS_T004T .
Data: WA_T004T TYPE TS_T004T .
data:  LV_T004T type string.
ENDIF.

DATA: ISTABLE_T009 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T009' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T009 = 'Yes'.
ELSE.
  ISTABLE_T009 = 'No'.
ENDIF.

IF ISTABLE_T009 = 'Yes'.
Types: Begin of TS_T009,
MANDT(3) Type C,
PERIV(2) Type C,
XKALE(1) Type C,
XJABH(1) Type C,
ANZBP(3) Type C,
ANZSP(2) Type C,
End of TS_T009.
Data: IT_T009 TYPE STANDARD TABLE OF TS_T009 .
Data: WA_T009 TYPE TS_T009 .
data:  LV_T009 type string.
ENDIF.

DATA: ISTABLE_T009B TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T009B' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T009B = 'Yes'.
ELSE.
  ISTABLE_T009B = 'No'.
ENDIF.

IF ISTABLE_T009B = 'Yes'.
Types: Begin of TS_T009B,
MANDT(3) Type C,
PERIV(2) Type C,
BDATJ(4) Type C,
BUMON(2) Type C,
BUTAG(2) Type C,
POPER(3) Type C,
RELJR(2) Type C,
End of TS_T009B.
Data: IT_T009B TYPE STANDARD TABLE OF TS_T009B .
Data: WA_T009B TYPE TS_T009B .
data:  LV_T009B type string.
ENDIF.

DATA: ISTABLE_T009T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T009T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T009T = 'Yes'.
ELSE.
  ISTABLE_T009T = 'No'.
ENDIF.

IF ISTABLE_T009T = 'Yes'.
Types: Begin of TS_T009T,
MANDT(3) Type C,
SPRAS(1) Type C,
PERIV(2) Type C,
LTEXT(30) Type C,
End of TS_T009T.
Data: IT_T009T TYPE STANDARD TABLE OF TS_T009T .
Data: WA_T009T TYPE TS_T009T .
data:  LV_T009T type string.
ENDIF.

DATA: ISTABLE_T030 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T030' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T030 = 'Yes'.
ELSE.
  ISTABLE_T030 = 'No'.
ENDIF.

IF ISTABLE_T030 = 'Yes'.
Types: Begin of TS_T030,
MANDT(3) Type C,
KTOPL(4) Type C,
KTOSL(3) Type C,
BWMOD(4) Type C,
KOMOK(3) Type C,
BKLAS(4) Type C,
KONTS(10) Type C,
KONTH(10) Type C,
End of TS_T030.
Data: IT_T030 TYPE STANDARD TABLE OF TS_T030 .
Data: WA_T030 TYPE TS_T030 .
data:  LV_T030 type string.
ENDIF.

DATA: ISTABLE_T030B TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T030B' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T030B = 'Yes'.
ELSE.
  ISTABLE_T030B = 'No'.
ENDIF.

IF ISTABLE_T030B = 'Yes'.
Types: Begin of TS_T030B,
MANDT(3) Type C,
KTOSL(3) Type C,
BSCHS(2) Type C,
BSCHH(2) Type C,
UMSKZ(1) Type C,
End of TS_T030B.
Data: IT_T030B TYPE STANDARD TABLE OF TS_T030B .
Data: WA_T030B TYPE TS_T030B .
data:  LV_T030B type string.
ENDIF.

DATA: ISTABLE_T030H TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T030H' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T030H = 'Yes'.
ELSE.
  ISTABLE_T030H = 'No'.
ENDIF.

IF ISTABLE_T030H = 'Yes'.
Types: Begin of TS_T030H,
MANDT(3) Type C,
KTOPL(4) Type C,
HKONT(10) Type C,
WAERS(5) Type C,
CURTP(2) Type C,
LKORR(10) Type C,
LSREA(10) Type C,
LHREA(10) Type C,
LSTRA(10) Type C,
LHTRA(10) Type C,
LSBEW(10) Type C,
LHBEW(10) Type C,
LSTRV(10) Type C,
LHTRV(10) Type C,
End of TS_T030H.
Data: IT_T030H TYPE STANDARD TABLE OF TS_T030H .
Data: WA_T030H TYPE TS_T030H .
data:  LV_T030H type string.
ENDIF.

DATA: ISTABLE_T030R TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T030R' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T030R = 'Yes'.
ELSE.
  ISTABLE_T030R = 'No'.
ENDIF.

IF ISTABLE_T030R = 'Yes'.
Types: Begin of TS_T030R,
MANDT(3) Type C,
KTOPL(4) Type C,
KTOSL(3) Type C,
XKOMO(1) Type C,
XBWMO(1) Type C,
XBKLA(1) Type C,
XDIKO(1) Type C,
End of TS_T030R.
Data: IT_T030R TYPE STANDARD TABLE OF TS_T030R .
Data: WA_T030R TYPE TS_T030R .
data:  LV_T030R type string.
ENDIF.

DATA: ISTABLE_T030S TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T030S' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T030S = 'Yes'.
ELSE.
  ISTABLE_T030S = 'No'.
ENDIF.

IF ISTABLE_T030S = 'Yes'.
Types: Begin of TS_T030S,
MANDT(3) Type C,
KTOPL(4) Type C,
KDFSL(4) Type C,
CURTP(2) Type C,
KSOLL(10) Type C,
KHABN(10) Type C,
GSOLL(10) Type C,
GHABN(10) Type C,
End of TS_T030S.
Data: IT_T030S TYPE STANDARD TABLE OF TS_T030S .
Data: WA_T030S TYPE TS_T030S .
data:  LV_T030S type string.
ENDIF.

DATA: ISTABLE_T030W TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T030W' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T030W = 'Yes'.
ELSE.
  ISTABLE_T030W = 'No'.
ENDIF.

IF ISTABLE_T030W = 'Yes'.
Types: Begin of TS_T030W,
SPRAS(1) Type C,
KTOSL(3) Type C,
LTEXT(40) Type C,
KTEXT(20) Type C,
KTXT2(20) Type C,
KTXT3(20) Type C,
End of TS_T030W.
Data: IT_T030W TYPE STANDARD TABLE OF TS_T030W .
Data: WA_T030W TYPE TS_T030W .
data:  LV_T030W type string.
ENDIF.

DATA: ISTABLE_KNKK TYPE STRING.
SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'KNKK' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_KNKK = 'Yes'.
ELSE.
  ISTABLE_KNKK = 'No'.
ENDIF.

IF ISTABLE_KNKK = 'Yes'.
Types: Begin of TS_KNKK,
MANDT(3) TYPE C,
KUNNR(10) TYPE C,
KKBER(4) TYPE C,
KLIMK(15) TYPE P,
ERNAM(12) TYPE C,
ERDAT(8) TYPE D,
End of TS_KNKK.
Data: IT_KNKK TYPE STANDARD TABLE OF TS_KNKK .
Data: WA_KNKK TYPE TS_KNKK .
data:  LV_KNKK type string.
ENDIF.

DATA: ISTABLE_T043G TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T043G' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T043G = 'Yes'.
ELSE.
  ISTABLE_T043G = 'No'.
ENDIF.

IF ISTABLE_T043G = 'Yes'.
Types: Begin of TS_T043G,
MANDT(3) Type C,
BUKRS(4) Type C,
TOGRU(4) Type C,
BETRS(7) Type P,
BETRH(7) Type P,
PROZS(3) Type P,
PROZH(3) Type P,
SKNTS(7) Type P,
SKNTH(7) Type P,
TOLER(2) Type C,
SKTRE(1) Type C,
XKONR(1) Type C,
ZTERM(4) Type C,
XSKAN(1) Type C,
MSLRP(1) Type C,
PRAVS(3) Type P,
PRAVH(3) Type P,
BEAVS(7) Type P,
BEAVH(7) Type P,
VRZDE(1) Type C,
BEADS(7) Type P,
BEADH(7) Type P,
PRADS(3) Type P,
PRADH(3) Type P,
End of TS_T043G.
Data: IT_T043G TYPE STANDARD TABLE OF TS_T043G .
Data: WA_T043G TYPE TS_T043G .
data:  LV_T043G type string.
ENDIF.

DATA: ISTABLE_T043GT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T043GT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T043GT = 'Yes'.
ELSE.
  ISTABLE_T043GT = 'No'.
ENDIF.

IF ISTABLE_T043GT = 'Yes'.
Types: Begin of TS_T043GT,
MANDT(3) Type C,
SPRAS(1) Type C,
BUKRS(4) Type C,
TOGRU(4) Type C,
TXT30(30) Type C,
End of TS_T043GT.
Data: IT_T043GT TYPE STANDARD TABLE OF TS_T043GT .
Data: WA_T043GT TYPE TS_T043GT .
data:  LV_T043GT type string.
ENDIF.

DATA: ISTABLE_T043T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T043T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T043T = 'Yes'.
ELSE.
  ISTABLE_T043T = 'No'.
ENDIF.

IF ISTABLE_T043T = 'Yes'.
Types: Begin of TS_T043T,
MANDT(3) Type C,
RFPRO(4) Type C,
BUKRS(4) Type C,
BETRS(7) Type P,
BETRH(7) Type P,
PROZS(3) Type P,
PROZH(3) Type P,
SKNTS(7) Type P,
SKNTH(7) Type P,
MAXBT(15) Type P,
MAXEB(13) Type P,
MAXSK(5) Type P,
End of TS_T043T.
Data: IT_T043T TYPE STANDARD TABLE OF TS_T043T .
Data: WA_T043T TYPE TS_T043T .
data:  LV_T043T type string.
ENDIF.

DATA: ISTABLE_T055F TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T055F' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T055F = 'Yes'.
ELSE.
  ISTABLE_T055F = 'No'.
ENDIF.

IF ISTABLE_T055F = 'Yes'.
Types: Begin of TS_T055F,
MANDT(3) Type C,
KOART(1) Type C,
FELDN(61) Type C,
End of TS_T055F.
Data: IT_T055F TYPE STANDARD TABLE OF TS_T055F .
Data: WA_T055F TYPE TS_T055F .
data:  LV_T055F type string.
ENDIF.

DATA: ISTABLE_T077D TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T077D' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T077D = 'Yes'.
ELSE.
  ISTABLE_T077D = 'No'.
ENDIF.

IF ISTABLE_T077D = 'Yes'.
Types: Begin of TS_T077D,
MANDT(3) Type C,
KTOKD(4) Type C,
FAUSA(40) Type C,
FAUSF(40) Type C,
FAUSV(40) Type C,
FAUS1(40) Type C,
FAUSW(40) Type C,
FAUSG(40) Type C,
FAUS2(40) Type C,
FAUSU(40) Type C,
End of TS_T077D.
Data: IT_T077D TYPE STANDARD TABLE OF TS_T077D .
Data: WA_T077D TYPE TS_T077D .
data:  LV_T077D type string.
ENDIF.

DATA: ISTABLE_T077K TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T077K' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T077K = 'Yes'.
ELSE.
  ISTABLE_T077K = 'No'.
ENDIF.

IF ISTABLE_T077K = 'Yes'.
Types: Begin of TS_T077K,
MANDT(3) Type C,
KTOKK(4) Type C,
FAUSA(40) Type C,
FAUSF(40) Type C,
FAUSM(40) Type C,
FAUS1(40) Type C,
FAUSW(40) Type C,
FAUST(40) Type C,
FAUS2(40) Type C,
FAUSU(40) Type C,
FAUSG(40) Type C,
FAUSN(40) Type C,
FAUSX(40) Type C,
End of TS_T077K.
Data: IT_T077K TYPE STANDARD TABLE OF TS_T077K .
Data: WA_T077K TYPE TS_T077K .
data:  LV_T077K type string.
ENDIF.

DATA: ISTABLE_T077X TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T077X' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T077X = 'Yes'.
ELSE.
  ISTABLE_T077X = 'No'.
ENDIF.

IF ISTABLE_T077X = 'Yes'.
Types: Begin of TS_T077X,
MANDT(3) Type C,
SPRAS(1) Type C,
KTOKD(4) Type C,
TXT30(30) Type C,
End of TS_T077X.
Data: IT_T077X TYPE STANDARD TABLE OF TS_T077X .
Data: WA_T077X TYPE TS_T077X .
data:  LV_T077X type string.
ENDIF.

DATA: ISTABLE_T077Y TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T077Y' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T077Y = 'Yes'.
ELSE.
  ISTABLE_T077Y = 'No'.
ENDIF.

IF ISTABLE_T077Y = 'Yes'.
Types: Begin of TS_T077Y,
MANDT(3) Type C,
SPRAS(1) Type C,
KTOKK(4) Type C,
TXT30(30) Type C,
End of TS_T077Y.
Data: IT_T077Y TYPE STANDARD TABLE OF TS_T077Y .
Data: WA_T077Y TYPE TS_T077Y .
data:  LV_T077Y type string.
ENDIF.

DATA: ISTABLE_T082A TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T082A' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T082A = 'Yes'.
ELSE.
  ISTABLE_T082A = 'No'.
ENDIF.

IF ISTABLE_T082A = 'Yes'.
Types: Begin of TS_T082A,
MANDT(3) Type C,
FEGTB(1) Type C,
FELEI(4) Type C,
End of TS_T082A.
Data: IT_T082A TYPE STANDARD TABLE OF TS_T082A .
Data: WA_T082A TYPE TS_T082A .
data:  LV_T082A type string.
ENDIF.

DATA: ISTABLE_T082B TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T082B' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T082B = 'Yes'.
ELSE.
  ISTABLE_T082B = 'No'.
ENDIF.

IF ISTABLE_T082B = 'Yes'.
Types: Begin of TS_T082B,
FEGTB(1) Type C,
FEGRU(2) Type C,
FEGLG(3) Type C,
End of TS_T082B.
Data: IT_T082B TYPE STANDARD TABLE OF TS_T082B .
Data: WA_T082B TYPE TS_T082B .
data:  LV_T082B type string.
ENDIF.

DATA: ISTABLE_T082G TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T082G' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T082G = 'Yes'.
ELSE.
  ISTABLE_T082G = 'No'.
ENDIF.

IF ISTABLE_T082G = 'Yes'.
Types: Begin of TS_T082G,
MANDT(3) Type C,
FEGTB(1) Type C,
FELEI(4) Type C,
FEGRU(2) Type C,
FMUSS(1) Type C,
FKANN(1) Type C,
FNEIN(1) Type C,
INGEG(1) Type C,
End of TS_T082G.
Data: IT_T082G TYPE STANDARD TABLE OF TS_T082G .
Data: WA_T082G TYPE TS_T082G .
data:  LV_T082G type string.
ENDIF.

DATA: ISTABLE_T082H TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T082H' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T082H = 'Yes'.
ELSE.
  ISTABLE_T082H = 'No'.
ENDIF.

IF ISTABLE_T082H = 'Yes'.
Types: Begin of TS_T082H,
MANDT(3) Type C,
SPRAS(1) Type C,
FEGTB(1) Type C,
FELEI(4) Type C,
TXT30(30) Type C,
End of TS_T082H.
Data: IT_T082H TYPE STANDARD TABLE OF TS_T082H .
Data: WA_T082H TYPE TS_T082H .
data:  LV_T082H type string.
ENDIF.

DATA: ISTABLE_T082L TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T082L' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T082L = 'Yes'.
ELSE.
  ISTABLE_T082L = 'No'.
ENDIF.

IF ISTABLE_T082L = 'Yes'.
Types: Begin of TS_T082L,
FEGTB(1) Type C,
FEGLG(3) Type C,
XVALID(1) Type C,
End of TS_T082L.
Data: IT_T082L TYPE STANDARD TABLE OF TS_T082L .
Data: WA_T082L TYPE TS_T082L .
data:  LV_T082L type string.
ENDIF.

DATA: ISTABLE_T082M TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T082M' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T082M = 'Yes'.
ELSE.
  ISTABLE_T082M = 'No'.
ENDIF.

IF ISTABLE_T082M = 'Yes'.
Types: Begin of TS_T082M,
SPRAS(1) Type C,
FEGTB(1) Type C,
FEGLG(3) Type C,
FEGBEZ(30) Type C,
End of TS_T082M.
Data: IT_T082M TYPE STANDARD TABLE OF TS_T082M .
Data: WA_T082M TYPE TS_T082M .
data:  LV_T082M type string.
ENDIF.

DATA: ISTABLE_T082T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T082T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T082T = 'Yes'.
ELSE.
  ISTABLE_T082T = 'No'.
ENDIF.

IF ISTABLE_T082T = 'Yes'.
Types: Begin of TS_T082T,
SPRAS(1) Type C,
FEGTB(1) Type C,
FEGRU(2) Type C,
TXT20(20) Type C,
End of TS_T082T.
Data: IT_T082T TYPE STANDARD TABLE OF TS_T082T .
Data: WA_T082T TYPE TS_T082T .
data:  LV_T082T type string.
ENDIF.

DATA: ISTABLE_T090 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090 = 'Yes'.
ELSE.
  ISTABLE_T090 = 'No'.
ENDIF.

IF ISTABLE_T090 = 'Yes'.
Types: Begin of TS_T090,
MANDT(3) Type C,
AFARSL(4) Type C,
GBEGIN(1) Type C,
AFATYP(1) Type C,
XAFAUT(1) Type C,
DEGFAK(3) Type P,
MAXPRZ(7) Type P,
MINPRZ(7) Type P,
UMAFSL(4) Type C,
UMRPRZ(3) Type P,
XSTILL(1) Type C,
XENDAU(1) Type C,
XUNTNL(1) Type C,
XEFDAU(1) Type C,
PERBZU(2) Type C,
PERBNA(2) Type C,
PERBAB(2) Type C,
PERBUM(2) Type C,
XDAILY(1) Type C,
XLIFEC(1) Type C,
XAFNAH(1) Type C,
XBZDAT(1) Type C,
UMSTM(1) Type C,
AFACLA(1) Type C,
AFAMET(1) Type C,
XRAFA(1) Type C,
MSFAKR(1) Type C,
SCHROTT(1) Type C,
End of TS_T090.
Data: IT_T090 TYPE STANDARD TABLE OF TS_T090 .
Data: WA_T090 TYPE TS_T090 .
data:  LV_T090 type string.
ENDIF.

DATA: ISTABLE_T090NA TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090NA' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090NA = 'Yes'.
ELSE.
  ISTABLE_T090NA = 'No'.
ENDIF.

IF ISTABLE_T090NA = 'Yes'.
Types: Begin of TS_T090NA,
MANDT(3) Type C,
AFAPL(4) Type C,
AFASL(4) Type C,
ANHWSL(3) Type C,
End of TS_T090NA.
Data: IT_T090NA TYPE STANDARD TABLE OF TS_T090NA .
Data: WA_T090NA TYPE TS_T090NA .
data:  LV_T090NA type string.
ENDIF.

DATA: ISTABLE_T090NAT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090NAT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090NAT = 'Yes'.
ELSE.
  ISTABLE_T090NAT = 'No'.
ENDIF.

IF ISTABLE_T090NAT = 'Yes'.
Types: Begin of TS_T090NAT,
MANDT(3) Type C,
SPRAS(1) Type C,
AFAPL(4) Type C,
AFASL(4) Type C,
AFATXT(50) Type C,
End of TS_T090NAT.
Data: IT_T090NAT TYPE STANDARD TABLE OF TS_T090NAT .
Data: WA_T090NAT TYPE TS_T090NAT .
data:  LV_T090NAT type string.
ENDIF.

DATA: ISTABLE_T090NAZ TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090NAZ' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090NAZ = 'Yes'.
ELSE.
  ISTABLE_T090NAZ = 'No'.
ENDIF.

IF ISTABLE_T090NAZ = 'Yes'.
Types: Begin of TS_T090NAZ,
MANDT(3) Type C,
AFAPL(4) Type C,
AFASL(4) Type C,
AFACLA(1) Type C,
AFATYP(1) Type C,
AFARSL(4) Type C,
METDEG(3) Type C,
METPER(3) Type C,
METSTU(3) Type C,
PHASE(1) Type C,
End of TS_T090NAZ.
Data: IT_T090NAZ TYPE STANDARD TABLE OF TS_T090NAZ .
Data: WA_T090NAZ TYPE TS_T090NAZ .
data:  LV_T090NAZ type string.
ENDIF.

DATA: ISTABLE_T090NDT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090NDT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090NDT = 'Yes'.
ELSE.
  ISTABLE_T090NDT = 'No'.
ENDIF.

IF ISTABLE_T090NDT = 'Yes'.
Types: Begin of TS_T090NDT,
MANDT(3) Type C,
SPRAS(1) Type C,
AFAPL(4) Type C,
METDEG(3) Type C,
DEGTXT(50) Type C,
End of TS_T090NDT.
Data: IT_T090NDT TYPE STANDARD TABLE OF TS_T090NDT .
Data: WA_T090NDT TYPE TS_T090NDT .
data:  LV_T090NDT type string.
ENDIF.

DATA: ISTABLE_T090NPT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090NPT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090NPT = 'Yes'.
ELSE.
  ISTABLE_T090NPT = 'No'.
ENDIF.

IF ISTABLE_T090NPT = 'Yes'.
Types: Begin of TS_T090NPT,
MANDT(3) Type C,
SPRAS(1) Type C,
AFAPL(4) Type C,
METPER(3) Type C,
PERTXT(50) Type C,
End of TS_T090NPT.
Data: IT_T090NPT TYPE STANDARD TABLE OF TS_T090NPT .
Data: WA_T090NPT TYPE TS_T090NPT .
data:  LV_T090NPT type string.
ENDIF.

DATA: ISTABLE_T090NRT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090NRT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090NRT = 'Yes'.
ELSE.
  ISTABLE_T090NRT = 'No'.
ENDIF.

IF ISTABLE_T090NRT = 'Yes'.
Types: Begin of TS_T090NRT,
MANDT(3) Type C,
SPRAS(1) Type C,
AFARSL(4) Type C,
RSLTXT(50) Type C,
End of TS_T090NRT.
Data: IT_T090NRT TYPE STANDARD TABLE OF TS_T090NRT .
Data: WA_T090NRT TYPE TS_T090NRT .
data:  LV_T090NRT type string.
ENDIF.

DATA: ISTABLE_T090NST TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T090NST' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T090NST = 'Yes'.
ELSE.
  ISTABLE_T090NST = 'No'.
ENDIF.

IF ISTABLE_T090NST = 'Yes'.
Types: Begin of TS_T090NST,
MANDT(3) Type C,
SPRAS(1) Type C,
AFAPL(4) Type C,
METSTU(3) Type C,
STUTXT(50) Type C,
End of TS_T090NST.
Data: IT_T090NST TYPE STANDARD TABLE OF TS_T090NST .
Data: WA_T090NST TYPE TS_T090NST .
data:  LV_T090NST type string.
ENDIF.

DATA: ISTABLE_T091T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T091T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T091T = 'Yes'.
ELSE.
  ISTABLE_T091T = 'No'.
ENDIF.

IF ISTABLE_T091T = 'Yes'.
Types: Begin of TS_T091T,
MANDT(3) Type C,
SPRAS(1) Type C,
ANHWSL(3) Type C,
ANHTXT(50) Type C,
End of TS_T091T.
Data: IT_T091T TYPE STANDARD TABLE OF TS_T091T .
Data: WA_T091T TYPE TS_T091T .
data:  LV_T091T type string.
ENDIF.

DATA: ISTABLE_T093 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T093' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T093 = 'Yes'.
ELSE.
  ISTABLE_T093 = 'No'.
ENDIF.

IF ISTABLE_T093 = 'Yes'.
Types: Begin of TS_T093,
AFABER(2) Type C,
AFAPL(4) Type C,
BUHBKT(1) Type C,
MANDT(3) Type C,
End of TS_T093.
Data: IT_T093 TYPE STANDARD TABLE OF TS_T093 .
Data: WA_T093 TYPE TS_T093 .
data:  LV_T093 type string.
ENDIF.

DATA: ISTABLE_T093C TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T093C' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T093C = 'Yes'.
ELSE.
  ISTABLE_T093C = 'No'.
ENDIF.

IF ISTABLE_T093C = 'Yes'.
Types: Begin of TS_T093C,
MANDT(3) Type C,
BUKRS(4) Type C,
AFAPL(4) Type C,
VRMAFB(4) Type C,
End of TS_T093C.
Data: IT_T093C TYPE STANDARD TABLE OF TS_T093C .
Data: WA_T093C TYPE TS_T093C .
data:  LV_T093C type string.
ENDIF.

DATA: ISTABLE_T093D TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T093D' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T093D = 'Yes'.
ELSE.
  ISTABLE_T093D = 'No'.
ENDIF.

IF ISTABLE_T093D = 'Yes'.
Types: Begin of TS_T093D,
MANDT(3) Type C,
BUKRS(4) Type C,
AFABER(2) Type C,
AFBRHY(3) Type C,
ZINBUC(1) Type C,
AUFBUC(1) Type C,
End of TS_T093D.
Data: IT_T093D TYPE STANDARD TABLE OF TS_T093D .
Data: WA_T093D TYPE TS_T093D .
data:  LV_T093D type string.
ENDIF.

DATA: ISTABLE_T093T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T093T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T093T = 'Yes'.
ELSE.
  ISTABLE_T093T = 'No'.
ENDIF.

IF ISTABLE_T093T = 'Yes'.
Types: Begin of TS_T093T,
SPRAS(1) Type C,
MANDT(3) Type C,
AFBTXT(50) Type C,
AFBKTX(12) Type C,
AFAPL(4) Type C,
AFABER(2) Type C,
End of TS_T093T.
Data: IT_T093T TYPE STANDARD TABLE OF TS_T093T .
Data: WA_T093T TYPE TS_T093T .
data:  LV_T093T type string.
ENDIF.

DATA: ISTABLE_T095 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T095' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T095 = 'Yes'.
ELSE.
  ISTABLE_T095 = 'No'.
ENDIF.

IF ISTABLE_T095 = 'Yes'.
Types: Begin of TS_T095,
MANDT(3) Type C,
KTOPL(4) Type C,
KTOGR(8) Type C,
AFABE(2) Type C,
KTVBAB(10) Type C,
KTVZU(10) Type C,
KTREST(10) Type C,
KTMIND(10) Type C,
KTMEHR(10) Type C,
KTERLW(10) Type C,
KTENAK(10) Type C,
KTANZG(10) Type C,
KTANZA(10) Type C,
KTANSW(10) Type C,
KTANSG(10) Type C,
End of TS_T095.
Data: IT_T095 TYPE STANDARD TABLE OF TS_T095 .
Data: WA_T095 TYPE TS_T095 .
data:  LV_T095 type string.
ENDIF.


DATA: ISTABLE_T095B TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T095B' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T095B = 'Yes'.
ELSE.
  ISTABLE_T095B = 'No'.
ENDIF.

IF ISTABLE_T095B = 'Yes'.
Types: Begin of TS_T095B,
MANDT(3) Type C,
KTOPL(4) Type C,
KTOGR(8) Type C,
AFABE(2) Type C,
KTSZUS(10) Type C,
KTSAFU(10) Type C,
KTNAFB(10) Type C,
KTNAFG(10) Type C,
KTNZUS(10) Type C,
KTNAFU(10) Type C,
KTSAFB(10) Type C,
KTSAFG(10) Type C,
End of TS_T095B.
Data: IT_T095B TYPE STANDARD TABLE OF TS_T095B .
Data: WA_T095B TYPE TS_T095B .
data:  LV_T095B type string.
ENDIF.

DATA: ISTABLE_T095T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T095T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T095T = 'Yes'.
ELSE.
  ISTABLE_T095T = 'No'.
ENDIF.

IF ISTABLE_T095T = 'Yes'.
Types: Begin of TS_T095T,
MANDT(3) Type C,
SPRAS(1) Type C,
KTOGR(8) Type C,
KTGRTX(50) Type C,
End of TS_T095T.
Data: IT_T095T TYPE STANDARD TABLE OF TS_T095T .
Data: WA_T095T TYPE TS_T095T .
data:  LV_T095T type string.
ENDIF.

DATA: ISTABLE_T096 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T096' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T096 = 'Yes'.
ELSE.
  ISTABLE_T096 = 'No'.
ENDIF.

IF ISTABLE_T096 = 'Yes'.
Types: Begin of TS_T096,
MANDT(3) Type C,
AFAPL(4) Type C,
BPLAKT(1) Type C,
End of TS_T096.
Data: IT_T096 TYPE STANDARD TABLE OF TS_T096 .
Data: WA_T096 TYPE TS_T096 .
data:  LV_T096 type string.
ENDIF.

DATA: ISTABLE_T096T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T096T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T096T = 'Yes'.
ELSE.
  ISTABLE_T096T = 'No'.
ENDIF.

IF ISTABLE_T096T = 'Yes'.
Types: Begin of TS_T096T,
MANDT(3) Type C,
SPRAS(1) Type C,
AFAPL(4) Type C,
KTEXT(50) Type C,
End of TS_T096T.
Data: IT_T096T TYPE STANDARD TABLE OF TS_T096T .
Data: WA_T096T TYPE TS_T096T .
data:  LV_T096T type string.
ENDIF.

DATA: ISTABLE_T100 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T100' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T100 = 'Yes'.
ELSE.
  ISTABLE_T100 = 'No'.
ENDIF.

IF ISTABLE_T100 = 'Yes'.
Types: Begin of TS_T100,
SPRSL(1) Type C,
ARBGB(20) Type C,
MSGNR(3) Type C,
TEXT(73) Type C,
End of TS_T100.
Data: IT_T100 TYPE STANDARD TABLE OF TS_T100 .
Data: WA_T100 TYPE TS_T100 .
data:  LV_T100 type string.
ENDIF.

DATA: ISTABLE_T100C TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T100C' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T100C = 'Yes'.
ELSE.
  ISTABLE_T100C = 'No'.
ENDIF.

IF ISTABLE_T100C = 'Yes'.
Types: Begin of TS_T100C,
MANDT(3) Type C,
ARBGB(20) Type C,
MSGNR(3) Type C,
UNAME(12) Type C,
MSGTS(1) Type C,
MSGTB(1) Type C,
End of TS_T100C.
Data: IT_T100C TYPE STANDARD TABLE OF TS_T100C .
Data: WA_T100C TYPE TS_T100C .
data:  LV_T100C type string.
ENDIF.

DATA: ISTABLE_T100S TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T100S' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T100S = 'Yes'.
ELSE.
  ISTABLE_T100S = 'No'.
ENDIF.

IF ISTABLE_T100S = 'Yes'.
Types: Begin of TS_T100S,
ARBGB(20) Type C,
MSGNR(3) Type C,
MSGTA(5) Type C,
MSGTD(1) Type C,
XIGNO(1) Type C,
End of TS_T100S.
Data: IT_T100S TYPE STANDARD TABLE OF TS_T100S .
Data: WA_T100S TYPE TS_T100S .
data:  LV_T100S type string.
ENDIF.

DATA: ISTABLE_T156 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T156' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T156 = 'Yes'.
ELSE.
  ISTABLE_T156 = 'No'.
ENDIF.

IF ISTABLE_T156 = 'Yes'.
Types: Begin of TS_T156,
MANDT(3) Type C,
BWART(3) Type C,
KZKON(1) Type C,
End of TS_T156.
Data: IT_T156 TYPE STANDARD TABLE OF TS_T156 .
Data: WA_T156 TYPE TS_T156 .
data:  LV_T156 type string.
ENDIF.

DATA: ISTABLE_T156T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T156T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T156T = 'Yes'.
ELSE.
  ISTABLE_T156T = 'No'.
ENDIF.

IF ISTABLE_T156T = 'Yes'.
Types: Begin of TS_T156T,
MANDT(3) Type C,
SPRAS(1) Type C,
BWART(3) Type C,
SOBKZ(1) Type C,
BTEXT(20) Type C,
End of TS_T156T.
Data: IT_T156T TYPE STANDARD TABLE OF TS_T156T .
Data: WA_T156T TYPE TS_T156T .
data:  LV_T156T type string.
ENDIF.

DATA: ISTABLE_T156W TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T156W' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T156W = 'Yes'.
ELSE.
  ISTABLE_T156W = 'No'.
ENDIF.

IF ISTABLE_T156W = 'Yes'.
Types: Begin of TS_T156W,
BUSTW(4) Type C,
VORSL(3) Type C,
End of TS_T156W.
Data: IT_T156W TYPE STANDARD TABLE OF TS_T156W .
Data: WA_T156W TYPE TS_T156W .
data:  LV_T156W type string.
ENDIF.

DATA: ISTABLE_T156X TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T156X' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T156X = 'Yes'.
ELSE.
  ISTABLE_T156X = 'No'.
ENDIF.

IF ISTABLE_T156X = 'Yes'.
Types: Begin of TS_T156X,
MANDT(3) Type C,
BWART(3) Type C,
BUSTW(4) Type C,
KOMOK(3) Type C,
End of TS_T156X.
Data: IT_T156X TYPE STANDARD TABLE OF TS_T156X .
Data: WA_T156X TYPE TS_T156X .
data:  LV_T156X type string.
ENDIF.


DATA: ISTABLE_T159C TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T159C' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T159C = 'Yes'.
ELSE.
  ISTABLE_T159C = 'No'.
ENDIF.

IF ISTABLE_T159C = 'Yes'.
Types: Begin of TS_T159C,
MANDT(3) Type C,
WERKS(4) Type C,
ABCIN(1) Type C,
ANINV(3) Type C,
ININV(3) Type C,
PZINV(2) Type C,
CCDEV(3) Type C,
End of TS_T159C.
Data: IT_T159C TYPE STANDARD TABLE OF TS_T159C .
Data: WA_T159C TYPE TS_T159C .
data:  LV_T159C type string.
ENDIF.

DATA: ISTABLE_T159L TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T159L' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T159L = 'Yes'.
ELSE.
  ISTABLE_T159L = 'No'.
ENDIF.

IF ISTABLE_T159L = 'Yes'.
Types: Begin of TS_T159L,
MANDT(3) Type C,
WERKS(4) Type C,
XLAUT(1) Type C,
End of TS_T159L.
Data: IT_T159L TYPE STANDARD TABLE OF TS_T159L .
Data: WA_T159L TYPE TS_T159L .
data:  LV_T159L type string.
ENDIF.

DATA: ISTABLE_T160M TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T160M' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T160M = 'Yes'.
ELSE.
  ISTABLE_T160M = 'No'.
ENDIF.

IF ISTABLE_T160M = 'Yes'.
Types: Begin of TS_T160M,
MANDT(3) Type C,
MSGVS(8) Type C,
ARBGB(20) Type C,
MSGNR(3) Type C,
MSGTP(1) Type C,
MSGTYWS(1) Type C,
End of TS_T160M.
Data: IT_T160M TYPE STANDARD TABLE OF TS_T160M .
Data: WA_T160M TYPE TS_T160M .
data:  LV_T160M type string.
ENDIF.

DATA: ISTABLE_T161 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T161' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T161 = 'Yes'.
ELSE.
  ISTABLE_T161 = 'No'.
ENDIF.

IF ISTABLE_T161 = 'Yes'.
Types: Begin of TS_T161,
MANDT(3) Type C,
BSTYP(1) Type C,
BSART(4) Type C,
BREFN(20) Type C,
End of TS_T161.
Data: IT_T161 TYPE STANDARD TABLE OF TS_T161 .
Data: WA_T161 TYPE TS_T161 .
data:  LV_T161 type string.
ENDIF.

DATA: ISTABLE_T161S TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T161S' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T161S = 'Yes'.
ELSE.
  ISTABLE_T161S = 'No'.
ENDIF.

IF ISTABLE_T161S = 'Yes'.
Types: Begin of TS_T161S,
MANDT(3) Type C,
FRGKZ(1) Type C,
FIXBP(1) Type C,
FRANG(1) Type C,
FRBST(1) Type C,
FLREF(20) Type C,
KZFAE(1) Type C,
TLFAE(4) Type P,
End of TS_T161S.
Data: IT_T161S TYPE STANDARD TABLE OF TS_T161S .
Data: WA_T161S TYPE TS_T161S .
data:  LV_T161S type string.
ENDIF.

DATA: ISTABLE_T161T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T161T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T161T = 'Yes'.
ELSE.
  ISTABLE_T161T = 'No'.
ENDIF.

IF ISTABLE_T161T = 'Yes'.
Types: Begin of TS_T161T,
MANDT(3) Type C,
SPRAS(1) Type C,
BSART(4) Type C,
BSTYP(1) Type C,
BATXT(20) Type C,
End of TS_T161T.
Data: IT_T161T TYPE STANDARD TABLE OF TS_T161T .
Data: WA_T161T TYPE TS_T161T .
data:  LV_T161T type string.
ENDIF.

DATA: ISTABLE_T162 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T162' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T162 = 'Yes'.
ELSE.
  ISTABLE_T162 = 'No'.
ENDIF.

IF ISTABLE_T162 = 'Yes'.
Types: Begin of TS_T162,
MANDT(3) Type C,
FLREF(20) Type C,
FAUS1(70) Type C,
FAUS2(70) Type C,
FAUS3(70) Type C,
BSTYP(1) Type C,
End of TS_T162.
Data: IT_T162 TYPE STANDARD TABLE OF TS_T162 .
Data: WA_T162 TYPE TS_T162 .
data:  LV_T162 type string.
ENDIF.

DATA: ISTABLE_T162K TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T162K' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T162K = 'Yes'.
ELSE.
  ISTABLE_T162K = 'No'.
ENDIF.

IF ISTABLE_T162K = 'Yes'.
Types: Begin of TS_T162K,
MANDT(3) Type C,
KNTTP(1) Type C,
FAUS1(70) Type C,
FAUS2(70) Type C,
End of TS_T162K.
Data: IT_T162K TYPE STANDARD TABLE OF TS_T162K .
Data: WA_T162K TYPE TS_T162K .
data:  LV_T162K type string.
ENDIF.

DATA: ISTABLE_T162T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T162T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T162T = 'Yes'.
ELSE.
  ISTABLE_T162T = 'No'.
ENDIF.

IF ISTABLE_T162T = 'Yes'.
Types: Begin of TS_T162T,
MANDT(3) Type C,
SPRAS(1) Type C,
FLREF(20) Type C,
FLRTX(30) Type C,
End of TS_T162T.
Data: IT_T162T TYPE STANDARD TABLE OF TS_T162T .
Data: WA_T162T TYPE TS_T162T .
data:  LV_T162T type string.
ENDIF.

DATA: ISTABLE_T162X TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T162X' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T162X = 'Yes'.
ELSE.
  ISTABLE_T162X = 'No'.
ENDIF.

IF ISTABLE_T162X = 'Yes'.
Types: Begin of TS_T162X,
MANDT(3) Type C,
SPRAS(1) Type C,
FAUTB(1) Type C,
FAUNR(3) Type C,
FAUTX(30) Type C,
FAUGR(2) Type C,
FAUBS(1) Type C,
FAUAN(1) Type C,
FAUKT(1) Type C,
FAULP(1) Type C,
FAUBA(1) Type C,
End of TS_T162X.
Data: IT_T162X TYPE STANDARD TABLE OF TS_T162X .
Data: WA_T162X TYPE TS_T162X .
data:  LV_T162X type string.
ENDIF.

DATA: ISTABLE_T162Y TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T162Y' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T162Y = 'Yes'.
ELSE.
  ISTABLE_T162Y = 'No'.
ENDIF.

IF ISTABLE_T162Y = 'Yes'.
Types: Begin of TS_T162Y,
MANDT(3) Type C,
SPRAS(1) Type C,
FAUGR(2) Type C,
FAUGT(30) Type C,
End of TS_T162Y.
Data: IT_T162Y TYPE STANDARD TABLE OF TS_T162Y .
Data: WA_T162Y TYPE TS_T162Y .
data:  LV_T162Y type string.
ENDIF.

DATA: ISTABLE_T163 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T163' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T163 = 'Yes'.
ELSE.
  ISTABLE_T163 = 'No'.
ENDIF.

IF ISTABLE_T163 = 'Yes'.
Types: Begin of TS_T163,
MANDT(3) Type C,
PSTYP(1) Type C,
MATNO(1) Type C,
KNTZU(1) Type C,
BFKNZ(1) Type C,
WEPOS(1) Type C,
WEPOV(1) Type C,
WEUNB(1) Type C,
WEUNV(1) Type C,
REPOS(1) Type C,
REPOV(1) Type C,
STAFO(6) Type C,
J_1BITMTYP(2) Type C,
End of TS_T163.
Data: IT_T163 TYPE STANDARD TABLE OF TS_T163 .
Data: WA_T163 TYPE TS_T163 .
data:  LV_T163 type string.
ENDIF.

DATA: ISTABLE_T163A TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T163A' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T163A = 'Yes'.
ELSE.
  ISTABLE_T163A = 'No'.
ENDIF.

IF ISTABLE_T163A = 'Yes'.
Types: Begin of TS_T163A,
MANDT(3) Type C,
PSTYP(1) Type C,
KNTTP(1) Type C,
End of TS_T163A.
Data: IT_T163A TYPE STANDARD TABLE OF TS_T163A .
Data: WA_T163A TYPE TS_T163A .
data:  LV_T163A type string.
ENDIF.

DATA: ISTABLE_T163K TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T163K' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T163K = 'Yes'.
ELSE.
  ISTABLE_T163K = 'No'.
ENDIF.

IF ISTABLE_T163K = 'Yes'.
Types: Begin of TS_T163K,
MANDT(3) Type C,
KNTTP(1) Type C,
REPOS(1) Type C,
WEPOS(1) Type C,
WEPOV(1) Type C,
End of TS_T163K.
Data: IT_T163K TYPE STANDARD TABLE OF TS_T163K .
Data: WA_T163K TYPE TS_T163K .
data:  LV_T163K type string.
ENDIF.

DATA: ISTABLE_T163I TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T163I' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T163I = 'Yes'.
ELSE.
  ISTABLE_T163I = 'No'.
ENDIF.

IF ISTABLE_T163I = 'Yes'.
Types: Begin of TS_T163I,
MANDT(3) Type C,
SPRAS(1) Type C,
KNTTP(1) Type C,
KNTTX(20) Type C,
End of TS_T163I.
Data: IT_T163I TYPE STANDARD TABLE OF TS_T163I .
Data: WA_T163I TYPE TS_T163I .
data:  LV_T163I type string.
ENDIF.

DATA: ISTABLE_T163Y TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T163Y' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T163Y = 'Yes'.
ELSE.
  ISTABLE_T163Y = 'No'.
ENDIF.

IF ISTABLE_T163Y = 'Yes'.
Types: Begin of TS_T163Y,
MANDT(3) Type C,
SPRAS(1) Type C,
PSTYP(1) Type C,
PTEXT(20) Type C,
End of TS_T163Y.
Data: IT_T163Y TYPE STANDARD TABLE OF TS_T163Y .
Data: WA_T163Y TYPE TS_T163Y .
data:  LV_T163Y type string.
ENDIF.

DATA: ISTABLE_T169G TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T169G' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T169G = 'Yes'.
ELSE.
  ISTABLE_T169G = 'No'.
ENDIF.

IF ISTABLE_T169G = 'Yes'.
Types: Begin of TS_T169G,
MANDT(3) Type C,
BUKRS(4) Type C,
TOLSL(2) Type C,
WERT1(13) Type P,
XW1JA(1) Type C,
XW1NE(1) Type C,
WERT2(13) Type P,
XW2JA(1) Type C,
XW2NE(1) Type C,
PROZ1(4) Type P,
XP1JA(1) Type C,
XP1NE(1) Type C,
PROZ2(4) Type P,
XP2JA(1) Type C,
XP2NE(1) Type C,
End of TS_T169G.
Data: IT_T169G TYPE STANDARD TABLE OF TS_T169G .
Data: WA_T169G TYPE TS_T169G .
data:  LV_T169G type string.
ENDIF.

DATA: ISTABLE_T169P TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T169P' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T169P = 'Yes'.
ELSE.
  ISTABLE_T169P = 'No'.
ENDIF.

IF ISTABLE_T169P = 'Yes'.
Types: Begin of TS_T169P,
MANDT(3) Type C,
BUKRS(4) Type C,
XBLDAT(1) Type C,
XBUKRS(1) Type C,
XXBLNR(1) Type C,
End of TS_T169P.
Data: IT_T169P TYPE STANDARD TABLE OF TS_T169P .
Data: WA_T169P TYPE TS_T169P .
data:  LV_T169P type string.
ENDIF.

DATA: ISTABLE_T16FB TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T16FB' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T16FB = 'Yes'.
ELSE.
  ISTABLE_T16FB = 'No'.
ENDIF.

IF ISTABLE_T16FB = 'Yes'.
Types: Begin of TS_T16FB,
MANDT(3) Type C,
FRGKE(1) Type C,
KZFRE(1) Type C,
KZFAE(1) Type C,
TLFAE(4) Type P,
End of TS_T16FB.
Data: IT_T16FB TYPE STANDARD TABLE OF TS_T16FB .
Data: WA_T16FB TYPE TS_T16FB .
data:  LV_T16FB type string.
ENDIF.

DATA: ISTABLE_T16FC TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T16FC' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T16FC = 'Yes'.
ELSE.
  ISTABLE_T16FC = 'No'.
ENDIF.

IF ISTABLE_T16FC = 'Yes'.
Types: Begin of TS_T16FC,
MANDT(3) Type C,
FRGGR(2) Type C,
FRGCO(2) Type C,
FRGWF(1) Type C,
End of TS_T16FC.
Data: IT_T16FC TYPE STANDARD TABLE OF TS_T16FC .
Data: WA_T16FC TYPE TS_T16FC .
data:  LV_T16FC type string.
ENDIF.

DATA: ISTABLE_T16FE TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T16FE' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T16FE = 'Yes'.
ELSE.
  ISTABLE_T16FE = 'No'.
ENDIF.

IF ISTABLE_T16FE = 'Yes'.
Types: Begin of TS_T16FE,
MANDT(3) Type C,
SPRAS(1) Type C,
FRGKE(1) Type C,
FRGET(30) Type C,
End of TS_T16FE.
Data: IT_T16FE TYPE STANDARD TABLE OF TS_T16FE .
Data: WA_T16FE TYPE TS_T16FE .
data:  LV_T16FE type string.
ENDIF.

DATA: ISTABLE_T16FG TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T16FG' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T16FG = 'Yes'.
ELSE.
  ISTABLE_T16FG = 'No'.
ENDIF.

IF ISTABLE_T16FG = 'Yes'.
Types: Begin of TS_T16FG,
MANDT(3) Type C,
FRGGR(2) Type C,
FRGOT(1) Type C,
FRGFG(1) Type C,
FRGKL(18) Type C,
End of TS_T16FG.
Data: IT_T16FG TYPE STANDARD TABLE OF TS_T16FG .
Data: WA_T16FG TYPE TS_T16FG .
data:  LV_T16FG type string.
ENDIF.

DATA: ISTABLE_T16FK TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T16FK' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T16FK = 'Yes'.
ELSE.
  ISTABLE_T16FK = 'No'.
ENDIF.

IF ISTABLE_T16FK = 'Yes'.
Types: Begin of TS_T16FK,
MANDT(3) Type C,
FRGGR(2) Type C,
FRGSX(2) Type C,
FRGA1(1) Type C,
FRGA2(1) Type C,
FRGA3(1) Type C,
FRGA4(1) Type C,
FRGA5(1) Type C,
FRGA6(1) Type C,
FRGA7(1) Type C,
FRGA8(1) Type C,
FRGKX(1) Type C,
End of TS_T16FK.
Data: IT_T16FK TYPE STANDARD TABLE OF TS_T16FK .
Data: WA_T16FK TYPE TS_T16FK .
data:  LV_T16FK type string.
ENDIF.

DATA: ISTABLE_T16FS TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T16FS' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T16FS = 'Yes'.
ELSE.
  ISTABLE_T16FS = 'No'.
ENDIF.

IF ISTABLE_T16FS = 'Yes'.
Types: Begin of TS_T16FS,
MANDT(3) Type C,
FRGGR(2) Type C,
FRGSX(2) Type C,
FRGC1(2) Type C,
FRGC2(2) Type C,
FRGC3(2) Type C,
FRGC4(2) Type C,
FRGC5(2) Type C,
FRGC6(2) Type C,
FRGC7(2) Type C,
FRGC8(2) Type C,
End of TS_T16FS.
Data: IT_T16FS TYPE STANDARD TABLE OF TS_T16FS .
Data: WA_T16FS TYPE TS_T16FS .
data:  LV_T16FS type string.
ENDIF.

DATA: ISTABLE_T16FV TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T16FV' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T16FV = 'Yes'.
ELSE.
  ISTABLE_T16FV = 'No'.
ENDIF.

IF ISTABLE_T16FV = 'Yes'.
Types: Begin of TS_T16FV,
MANDT(3) Type C,
FRGGR(2) Type C,
FRGSX(2) Type C,
FRGCO(2) Type C,
FRGA1(1) Type C,
FRGA2(1) Type C,
FRGA3(1) Type C,
FRGA4(1) Type C,
FRGA5(1) Type C,
FRGA6(1) Type C,
FRGA7(1) Type C,
FRGA8(1) Type C,
End of TS_T16FV.
Data: IT_T16FV TYPE STANDARD TABLE OF TS_T16FV .
Data: WA_T16FV TYPE TS_T16FV .
data:  LV_T16FV type string.
ENDIF.

DATA: ISTABLE_T683S TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T683S' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T683S = 'Yes'.
ELSE.
  ISTABLE_T683S = 'No'.
ENDIF.

IF ISTABLE_T683S = 'Yes'.
Types: Begin of TS_T683S,
MANDT(3) Type C,
KVEWE(1) Type C,
KAPPL(2) Type C,
KALSM(6) Type C,
STUNR(3) Type C,
ZAEHK(3) Type C,
KSCHL(4) Type C,
STUNB(3) Type C,
STUN2(3) Type C,
KAUTO(1) Type C,
KOBED(7) Type C,
KZWIW(1) Type C,
KSTAT(1) Type C,
KOFRM(7) Type C,
KOFRA(7) Type C,
KVSL1(3) Type C,
KVSL2(3) Type C,
DRUKZ(1) Type C,
KOBLI(1) Type C,
End of TS_T683S.
Data: IT_T683S TYPE STANDARD TABLE OF TS_T683S .
Data: WA_T683S TYPE TS_T683S .
data:  LV_T683S type string.
ENDIF.

DATA: ISTABLE_T683V TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T683V' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T683V = 'Yes'.
ELSE.
  ISTABLE_T683V = 'No'.
ENDIF.

IF ISTABLE_T683V = 'Yes'.
Types: Begin of TS_T683V,
MANDT(3) Type C,
VKORG(4) Type C,
VTWEG(2) Type C,
SPART(2) Type C,
KALVG(2) Type C,
KALKS(2) Type C,
KALSM(6) Type C,
KARTV(4) Type C,
KALNB(6) Type C,
KALBB(6) Type C,
End of TS_T683V.
Data: IT_T683V TYPE STANDARD TABLE OF TS_T683V .
Data: WA_T683V TYPE TS_T683V .
data:  LV_T683V type string.
ENDIF.

DATA: ISTABLE_T685A TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T685A' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T685A = 'Yes'.
ELSE.
  ISTABLE_T685A = 'No'.
ENDIF.

IF ISTABLE_T685A = 'Yes'.
Types: Begin of TS_T685A,
MANDT(3) Type C,
KAPPL(2) Type C,
KSCHL(4) Type C,
KRECH(1) Type C,
KZBZG(1) Type C,
KNTYP(1) Type C,
KONAU(1) Type C,
KMANU(1) Type C,
GRZGF(4) Type C,
GRLNR(7) Type C,
GRMEN(3) Type C,
GANZZ(1) Type C,
KGRPE(1) Type C,
KRELI(1) Type C,
KDUPL(1) Type C,
KRUEK(1) Type C,
KOUPD(1) Type C,
SOSTA(1) Type C,
KOFRS(7) Type C,
KALSM(6) Type C,
KZNEP(1) Type C,
KOAID(1) Type C,
KKOPF(1) Type C,
KPOSI(1) Type C,
KNEGA(1) Type C,
TXPRF(1) Type C,
KSTPR(1) Type C,
KAEND_BTR(1) Type C,
KAEND_WRT(1) Type C,
KAEND_UFK(1) Type C,
KAEND_RCH(1) Type C,
KAEND_LOE(1) Type C,
KAEND_MEH(1) Type C,
IDXUP(1) Type C,
RUKOR(1) Type C,
BOVER(1) Type C,
KPRDT(1) Type C,
STFKZ(1) Type C,
PRECH(1) Type C,
BNKWE(1) Type C,
AKTKO(1) Type C,
VKKAL(1) Type C,
VKOBL(1) Type C,
RKAPPL(2) Type C,
RKSCHL(4) Type C,
BERGL(1) Type C,
VHART(4) Type C,
RDIFA(1) Type C,
KFKIV(1) Type C,
KVARC(1) Type C,
KMENG(1) Type C,
MDFLG(1) Type C,
KTREL(1) Type C,
BNKTK(1) Type C,
KFRST(1) Type C,
TXTGR(2) Type C,
TDID(4) Type C,
KDELE(1) Type C,
KBFLAG(2) Type X,
OIGRNET(1) Type C,
OIINVCYC(1) Type C,
OIREPORT(8) Type C,
OIHEAD(3) Type C,
OIITEM(3) Type C,
OIERRHAN(3) Type C,
OIDATA(3) Type C,
OIA_SPLTIV(1) Type C,
OIRCONDCL(1) Type C,
OIU_EP(1) Type C,
WTY_KONDM(2) Type C,
WTY_KATEG(2) Type C,
End of TS_T685A.
Data: IT_T685A TYPE STANDARD TABLE OF TS_T685A .
Data: WA_T685A TYPE TS_T685A .
data:  LV_T685A type string.
ENDIF.

DATA: ISTABLE_T691F TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T691F' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T691F = 'Yes'.
ELSE.
  ISTABLE_T691F = 'No'.
ENDIF.

IF ISTABLE_T691F = 'Yes'.
Types: Begin of TS_T691F,
PDTOL(3) Type C,
STREA(1) Type C,
STSET(1) Type C,
STVAW(1) Type C,
STVLW(1) Type C,
WSWIN(3) Type C,
PDMAX(3) Type C,
OITOL(3) Type C,
MAVAL(15) Type P,
MANDT(3) Type C,
KKBER(4) Type C,
DUNNG(1) Type C,
CTLPC(3) Type C,
CRPRC(3) Type C,
CRMGR(2) Type C,
CMPAH(1) Type C,
CMPAG(1) Type C,
CMPAF(1) Type C,
CMPAE(1) Type C,
CMPAD(1) Type C,
CMPAC(1) Type C,
CMPAB(1) Type C,
CMPAA(1) Type C,
CECKI(1) Type C,
DKLIM(15) Type P,
WOVLW(1) Type C,
WSREA(1) Type C,
WLSET(1) Type C,
MAREA(1) Type C,
MASET(1) Type C,
End of TS_T691F.
Data: IT_T691F TYPE STANDARD TABLE OF TS_T691F .
Data: WA_T691F TYPE TS_T691F .
data:  LV_T691F type string.
ENDIF.

DATA: ISTABLE_T691G TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T691G' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T691G = 'Yes'.
ELSE.
  ISTABLE_T691G = 'No'.
ENDIF.

IF ISTABLE_T691G = 'Yes'.
Types: Begin of TS_T691G,
SPRAS(1) Type C,
MANDT(3) Type C,
CRMGR(2) Type C,
CTLPC(3) Type C,
KKBER(4) Type C,
PRBEZ(30) Type C,
End of TS_T691G.
Data: IT_T691G TYPE STANDARD TABLE OF TS_T691G .
Data: WA_T691G TYPE TS_T691G .
data:  LV_T691G type string.
ENDIF.

DATA: ISTABLE_TBAER TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TBAER' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TBAER = 'Yes'.
ELSE.
  ISTABLE_TBAER = 'No'.
ENDIF.

IF ISTABLE_TBAER = 'Yes'.
Types: Begin of TS_TBAER,
BUKRS(4) Type C,
FNAME(61) Type C,
KOART(1) Type C,
UMSKS(1) Type C,
XAEND(1) Type C,
XAUSZ(1) Type C,
XBUPE(1) Type C,
MANDT(3) Type C,
End of TS_TBAER.
Data: IT_TBAER TYPE STANDARD TABLE OF TS_TBAER .
Data: WA_TBAER TYPE TS_TBAER .
data:  LV_TBAER type string.
ENDIF.

DATA: ISTABLE_TBSL TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TBSL' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TBSL = 'Yes'.
ELSE.
  ISTABLE_TBSL = 'No'.
ENDIF.

IF ISTABLE_TBSL = 'Yes'.
Types: Begin of TS_TBSL,
XZAHL(1) Type C,
XUMSW(1) Type C,
XSONU(1) Type C,
STBSL(2) Type C,
SHKZG(1) Type C,
MANDT(3) Type C,
KOART(1) Type C,
BSCHL(2) Type C,
End of TS_TBSL.
Data: IT_TBSL TYPE STANDARD TABLE OF TS_TBSL .
Data: WA_TBSL TYPE TS_TBSL .
data:  LV_TBSL type string.
ENDIF.

DATA: ISTABLE_TBSLT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TBSLT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TBSLT = 'Yes'.
ELSE.
  ISTABLE_TBSLT = 'No'.
ENDIF.

IF ISTABLE_TBSLT = 'Yes'.
Types: Begin of TS_TBSLT,
BSCHL(2) Type C,
LTEXT(20) Type C,
MANDT(3) Type C,
SPRAS(1) Type C,
UMSKZ(1) Type C,
End of TS_TBSLT.
Data: IT_TBSLT TYPE STANDARD TABLE OF TS_TBSLT .
Data: WA_TBSLT TYPE TS_TBSLT .
data:  LV_TBSLT type string.
ENDIF.

DATA: ISTABLE_TCDOB TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TCDOB' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TCDOB = 'Yes'.
ELSE.
  ISTABLE_TCDOB = 'No'.
ENDIF.

IF ISTABLE_TCDOB = 'Yes'.
Types: Begin of TS_TCDOB,
DOCUDEL(1) Type C,
MULTCASE(1) Type C,
OBJECT(15) Type C,
OLDTABNAME(30) Type C,
REFNAME(30) Type C,
TABNAME(30) Type C,
End of TS_TCDOB.
Data: IT_TCDOB TYPE STANDARD TABLE OF TS_TCDOB .
Data: WA_TCDOB TYPE TS_TCDOB .
data:  LV_TCDOB type string.
ENDIF.

DATA: ISTABLE_TCURF TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TCURF' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TCURF = 'Yes'.
ELSE.
  ISTABLE_TCURF = 'No'.
ENDIF.

IF ISTABLE_TCURF = 'Yes'.
Types: Begin of TS_TCURF,
FFACT(9) Type P,
GDATU(8) Type C,
KURST(4) Type C,
MANDT(3) Type C,
TCURR(5) Type C,
TFACT(9) Type P,
FCURR(5) Type C,
End of TS_TCURF.
Data: IT_TCURF TYPE STANDARD TABLE OF TS_TCURF .
Data: WA_TCURF TYPE TS_TCURF .
data:  LV_TCURF type string.
ENDIF.

DATA: ISTABLE_TKA01 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TKA01' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TKA01 = 'Yes'.
ELSE.
  ISTABLE_TKA01 = 'No'.
ENDIF.

IF ISTABLE_TKA01 = 'Yes'.
Types: Begin of TS_TKA01,
KTOPL(4) Type C,
BEZEI(25) Type C,
KOKRS(4) Type C,
LMONA(2) Type C,
MANDT(3) Type C,
WAERS(5) Type C,
End of TS_TKA01.
Data: IT_TKA01 TYPE STANDARD TABLE OF TS_TKA01 .
Data: WA_TKA01 TYPE TS_TKA01 .
data:  LV_TKA01 type string.
ENDIF.

DATA: ISTABLE_TKA02 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TKA02' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TKA02 = 'Yes'.
ELSE.
  ISTABLE_TKA02 = 'No'.
ENDIF.

IF ISTABLE_TKA02 = 'Yes'.
Types: Begin of TS_TKA02,
MANDT(3) Type C,
BUKRS(4) Type C,
GSBER(4) Type C,
KOKRS(4) Type C,
End of TS_TKA02.
Data: IT_TKA02 TYPE STANDARD TABLE OF TS_TKA02 .
Data: WA_TKA02 TYPE TS_TKA02 .
data:  LV_TKA02 type string.
ENDIF.

DATA: ISTABLE_TMC4 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TMC4' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TMC4 = 'Yes'.
ELSE.
  ISTABLE_TMC4 = 'No'.
ENDIF.

IF ISTABLE_TMC4 = 'Yes'.
Types: Begin of TS_TMC4,
MCINF(8) Type C,
SPERI(1) Type C,
End of TS_TMC4.
Data: IT_TMC4 TYPE STANDARD TABLE OF TS_TMC4 .
Data: WA_TMC4 TYPE TS_TMC4 .
data:  LV_TMC4 type string.
ENDIF.

DATA: ISTABLE_TMODP TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TMODP' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TMODP = 'Yes'.
ELSE.
  ISTABLE_TMODP = 'No'.
ENDIF.

IF ISTABLE_TMODP = 'Yes'.
Types: Begin of TS_TMODP,
FAUNA(11) Type C,
MODIF(3) Type C,
SPRAS(1) Type C,
FTEXT(30) Type C,
End of TS_TMODP.
Data: IT_TMODP TYPE STANDARD TABLE OF TS_TMODP .
Data: WA_TMODP TYPE TS_TMODP .
data:  LV_TMODP type string.
ENDIF.

DATA: ISTABLE_TVAK TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVAK' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVAK = 'Yes'.
ELSE.
  ISTABLE_TVAK = 'No'.
ENDIF.

IF ISTABLE_TVAK = 'Yes'.
Types: Begin of TS_TVAK,
AUART(4) Type C,
BEZOB(1) Type C,
CMGRA(2) Type C,
KLIMP(1) Type C,
MANDT(3) Type C,
VBTYP(1) Type C,
End of TS_TVAK.
Data: IT_TVAK TYPE STANDARD TABLE OF TS_TVAK .
Data: WA_TVAK TYPE TS_TVAK .
data:  LV_TVAK type string.
ENDIF.

DATA: ISTABLE_TVAKT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVAKT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVAKT = 'Yes'.
ELSE.
  ISTABLE_TVAKT = 'No'.
ENDIF.

IF ISTABLE_TVAKT = 'Yes'.
Types: Begin of TS_TVAKT,
MANDT(3) Type C,
AUART(4) Type C,
BEZEI(20) Type C,
SPRAS(1) Type C,
End of TS_TVAKT.
Data: IT_TVAKT TYPE STANDARD TABLE OF TS_TVAKT .
Data: WA_TVAKT TYPE TS_TVAKT .
data:  LV_TVAKT type string.
ENDIF.

DATA: ISTABLE_TVAP TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVAP' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVAP = 'Yes'.
ELSE.
  ISTABLE_TVAP = 'No'.
ENDIF.

IF ISTABLE_TVAP = 'Yes'.
Types: Begin of TS_TVAP,
MANDT(3) Type C,
PSTYV(4) Type C,
FKREL(1) Type C,
PRSFD(1) Type C,
ASWPA(1) Type C,
STRUM(1) Type C,
EVRWR(1) Type C,
KALSM(6) Type C,
SOBKZ(1) Type C,
FAKTF(2) Type C,
RRREL(1) Type C,
ACDATV(1) Type C,
UVEIB(3) Type C,
LVART(2) Type C,
End of TS_TVAP.
Data: IT_TVAP TYPE STANDARD TABLE OF TS_TVAP .
Data: WA_TVAP TYPE TS_TVAP .
data:  LV_TVAP type string.
ENDIF.

DATA: ISTABLE_TVAPT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVAPT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVAPT = 'Yes'.
ELSE.
  ISTABLE_TVAPT = 'No'.
ENDIF.

IF ISTABLE_TVAPT = 'Yes'.
Types: Begin of TS_TVAPT,
MANDT(3) Type C,
SPRAS(4) Type C,
PSTYV(1) Type C,
VTEXT(1) Type C,
End of TS_TVAPT.
Data: IT_TVAPT TYPE STANDARD TABLE OF TS_TVAPT .
Data: WA_TVAPT TYPE TS_TVAPT .
data:  LV_TVAPT type string.
ENDIF.

DATA: ISTABLE_TVCPF TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVCPF' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVCPF = 'Yes'.
ELSE.
  ISTABLE_TVCPF = 'No'.
ENDIF.

IF ISTABLE_TVCPF = 'Yes'.
Types: Begin of TS_TVCPF,
MANDT(3) Type C,
FKARN(4) Type C,
AUARV(4) Type C,
LFARV(4) Type C,
FKARV(4) Type C,
PSTYV(4) Type C,
GRBED(3) Type C,
GRURK(3) Type C,
GRURP(3) Type C,
GRUKO(3) Type C,
KNPRS(1) Type C,
PLMIN(1) Type C,
FKMGK(1) Type C,
POSVO(1) Type C,
HINEU(1) Type C,
PFKUR(1) Type C,
EXPIM(1) Type C,
ORDNR_FI(1) Type C,
XBLNR_FI(1) Type C,
PRSQU(1) Type C,
KVPRS(1) Type C,
PSTYN(4) Type C,
OIFERP(1) Type C,
OIFEECH(1) Type C,
End of TS_TVCPF.
Data: IT_TVCPF TYPE STANDARD TABLE OF TS_TVCPF .
Data: WA_TVCPF TYPE TS_TVCPF .
data:  LV_TVCPF type string.
ENDIF.

DATA: ISTABLE_TVCPL TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVCPL' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVCPL = 'Yes'.
ELSE.
  ISTABLE_TVCPL = 'No'.
ENDIF.

IF ISTABLE_TVCPL = 'Yes'.
Types: Begin of TS_TVCPL,
MANDT(3) Type C,
LFARN(4) Type C,
AUARV(4) Type C,
PSTYV(4) Type C,
AUBED(3) Type C,
AUZUS(3) Type C,
ETBED(3) Type C,
GRUAK(3) Type C,
GRUAP(3) Type C,
GRUKD(3) Type C,
GRUPA(3) Type C,
GRUET(3) Type C,
POSVO(1) Type C,
PLMIN(1) Type C,
UPFLU(1) Type C,
GRUVS(3) Type C,
GRUAK_AIP(3) Type C,
GRUAP_AIP(3) Type C,
End of TS_TVCPL.
Data: IT_TVCPL TYPE STANDARD TABLE OF TS_TVCPL .
Data: WA_TVCPL TYPE TS_TVCPL .
data:  LV_TVCPL type string.
ENDIF.

DATA: ISTABLE_TVFK TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVFK' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVFK = 'Yes'.
ELSE.
  ISTABLE_TVFK = 'No'.
ENDIF.

IF ISTABLE_TVFK = 'Yes'.
Types: Begin of TS_TVFK,
MANDT(3) Type C,
FKART(4) Type C,
KOPGR(4) Type C,
NUMKI(2) Type C,
NUMKE(2) Type C,
INCPO(6) Type C,
KUNN0(1) Type C,
UEVOR(4) Type C,
UMFNG(20) Type C,
RFBFK(1) Type C,
TRVOG(1) Type C,
TXN08(8) Type C,
VBTYP(4) Type C,
ERNAM(12) Type C,
PARGK(4) Type C,
PARGP(4) Type C,
KALSMC(6) Type C,
FKARTS(4) Type C,
TXTGR(2) Type C,
KAPPL(2) Type C,
KALSM(6) Type C,
KSCHL(4) Type C,
STAFO(6) Type C,
KVSLV(3) Type C,
KALVG(2) Type C,
TXTGR_P(2) Type C,
STATI(1) Type C,
KALSMBP(6) Type C,
BORVF(1) Type C,
FKART_RL(4) Type C,
RELEP(1) Type C,
TXTLF(1) Type C,
HITYP_PR(1) Type C,
FKART_AB(4) Type C,
GRBED_S(3) Type C,
ORDNR_FI_S(1) Type C,
XBLNR_FI_S(1) Type C,
J_1BNFREL(1) Type C,
J_1BMAINPA(2) Type C,
J_1BTDIDH(4) Type C,
J_1BTDCOH(1) Type C,
J_1BTDIDL(4) Type C,
J_1BTDCOL(1) Type C,
FKTYP(1) Type C,
XNEGP(1) Type C,
BLART(2) Type C,
XFILKD(1) Type C,
XVALGS(1) Type C,
KALSMCA(6) Type C,
KALSMCB(6) Type C,
KALSMCC(6) Type C,
KALSMCD(6) Type C,
XKOIV(1) Type C,
J_1AINVREF(1) Type C,
J_1ACPDEL(1) Type C,
UVEIB(3) Type C,
OICINPD(1) Type C,
OIFEEPD(1) Type C,
OIINVCYC1(1) Type C,
OIINVCYC2(1) Type C,
OIINVCYC3(1) Type C,
OIINVCYC4(1) Type C,
OIINVCYC5(1) Type C,
OIINVCYC6(1) Type C,
OIINVCYC7(1) Type C,
OIINVCYC8(1) Type C,
OIINVCYC9(1) Type C,
OINETEXIT(3) Type C,
OIPTRMEX(3) Type C,
OIC_DIFFIN(1) Type C,
OIC_DICNTR(1) Type C,
OIC_ACCVAL(3) Type C,
OIC_ERRHA(3) Type C,
OIC_FKART(4) Type C,
OISELEXIT(3) Type C,
OIFINEXIT(3) Type C,
OINETRPT(40) Type C,
OIBTCEXIT(3) Type C,
OIAMWOFI(1) Type C,
OIABALAN(1) Type C,
OIINVAPP(1) Type C,
OIINDCM(1) Type C,
End of TS_TVFK.
Data: IT_TVFK TYPE STANDARD TABLE OF TS_TVFK .
Data: WA_TVFK TYPE TS_TVFK .
data:  LV_TVFK type string.
ENDIF.

DATA: ISTABLE_TVFKT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVFKT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVFKT = 'Yes'.
ELSE.
  ISTABLE_TVFKT = 'No'.
ENDIF.

IF ISTABLE_TVFKT = 'Yes'.
Types: Begin of TS_TVFKT,
MANDT(3) Type C,
SPRAS(1) Type C,
FKART(4) Type C,
VTEXT(40) Type C,
End of TS_TVFKT.
Data: IT_TVFKT TYPE STANDARD TABLE OF TS_TVFKT .
Data: WA_TVFKT TYPE TS_TVFKT .
data:  LV_TVFKT type string.
ENDIF.

DATA: ISTABLE_TVLKT TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVLKT' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVLKT = 'Yes'.
ELSE.
  ISTABLE_TVLKT = 'No'.
ENDIF.

IF ISTABLE_TVLKT = 'Yes'.
Types: Begin of TS_TVLKT,
MANDT(3) Type C,
SPRAS(1) Type C,
LFART(4) Type C,
VTEXT(20) Type C,
End of TS_TVLKT.
Data: IT_TVLKT TYPE STANDARD TABLE OF TS_TVLKT .
Data: WA_TVLKT TYPE TS_TVLKT .
data:  LV_TVLKT type string.
ENDIF.

DATA: ISTABLE_LFA1 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'LFA1' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_LFA1 = 'Yes'.
ELSE.
  ISTABLE_LFA1 = 'No'.
ENDIF.

IF ISTABLE_LFA1 = 'Yes'.
Types: Begin of TS_LFA1,
MANDT(3) Type C,
LIFNR(10) Type C,
NAME1(35) Type C,
NAME2(35) Type C,
KTOKK(4) Type C,
End of TS_LFA1.
Data: IT_LFA1 TYPE STANDARD TABLE OF TS_LFA1 .
Data: WA_LFA1 TYPE TS_LFA1 .
data:  LV_LFA1 type string.
ENDIF.

DATA: ISTABLE_LFB1 TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'LFB1' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_LFB1 = 'Yes'.
ELSE.
  ISTABLE_LFB1 = 'No'.
ENDIF.

IF ISTABLE_LFB1 = 'Yes'.
Types: Begin of TS_LFB1,
MANDT(3) Type C,
LIFNR(10) Type C,
BUKRS(4) Type C,
REPRF(1) Type C,
End of TS_LFB1.
Data: IT_LFB1 TYPE STANDARD TABLE OF TS_LFB1 .
Data: WA_LFB1 TYPE TS_LFB1 .
data:  LV_LFB1 type string.
ENDIF.

DATA: ISTABLE_CVERS TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'CVERS' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_CVERS = 'Yes'.
ELSE.
  ISTABLE_CVERS = 'No'.
ENDIF.

IF ISTABLE_CVERS = 'Yes'.
Types: Begin of TS_CVERS,
COMPONENT(30) Type C,
RELEASE(10) Type C,
EXTRELEASE(10) Type C,
End of TS_CVERS.
Data: IT_CVERS TYPE STANDARD TABLE OF TS_CVERS .
Data: WA_CVERS TYPE TS_CVERS .
data:  LV_CVERS type string.
ENDIF.

DATA: ISTABLE_CVERS_REF TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'CVERS_REF' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_CVERS_REF = 'Yes'.
ELSE.
  ISTABLE_CVERS_REF = 'No'.
ENDIF.

IF ISTABLE_CVERS_REF = 'Yes'.
Types: Begin of TS_CVERS_REF,
COMPONENT(30) Type C,
LANGU(1) Type C,
DESC_TEXT(80) Type C,
End of TS_CVERS_REF.
Data: IT_CVERS_REF TYPE STANDARD TABLE OF TS_CVERS_REF .
Data: WA_CVERS_REF TYPE TS_CVERS_REF .
data:  LV_CVERS_REF type string.
ENDIF.

Types: Begin of TS_PRDVERS,
DESCRIPT TYPE PRDVERS-DESCRIPT,
INSTSTATUS TYPE PRDVERS-INSTSTATUS,
End of TS_PRDVERS.
Data: IT_PRDVERS TYPE STANDARD TABLE OF TS_PRDVERS .
Data: WA_PRDVERS TYPE TS_PRDVERS .
data:  LV_PRDVERS type string.

TYPES: BEGIN OF TS_TRDIRT,
NAME Type TRDIRT-NAME,
SPRSL Type TRDIRT-SPRSL,
TEXT Type TRDIRT-TEXT,
End of TS_TRDIRT.
Data: IT_TRDIRT TYPE STANDARD TABLE OF TS_TRDIRT .
Data: WA_TRDIRT TYPE TS_TRDIRT .
data:  LV_TRDIRT type string.

DATA: ISTABLE_T683T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T683T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T683T = 'Yes'.
ELSE.
  ISTABLE_T683T = 'No'.
ENDIF.

IF ISTABLE_T683T = 'Yes'.
Types: Begin of TS_T683T,
MANDT(3) Type C,
SPRAS(1) Type C,
KVEWE(1) Type C,
KAPPL(2) Type C,
KALSM(6) Type C,
STUNR(3) Type C,
ZAEHK(3) Type C,
VTEXT(30) Type C,
End of TS_T683T.
Data: IT_T683T TYPE STANDARD TABLE OF TS_T683T .
Data: WA_T683T TYPE TS_T683T .
data:  LV_T683T type string.
ENDIF.

DATA: ISTABLE_T687T TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'T687T' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_T687T = 'Yes'.
ELSE.
  ISTABLE_T687T = 'No'.
ENDIF.

IF ISTABLE_T687T = 'Yes'.
Types: Begin of TS_T687T,
MANDT(3) Type C,
SPRAS(1) Type C,
KAPPL(2) Type C,
KVSL1(3) Type C,
VTEXT(20) Type C,
End of TS_T687T.
Data: IT_T687T TYPE STANDARD TABLE OF TS_T687T .
Data: WA_T687T TYPE TS_T687T .
data:  LV_T687T type string.
ENDIF.

DATA: ISTABLE_TVKO TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'TVKO' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_TVKO = 'Yes'.
ELSE.
  ISTABLE_TVKO = 'No'.
ENDIF.

IF ISTABLE_TVKO = 'Yes'.
Types: Begin of TS_TVKO,
MANDT(3) Type C,
VKORG(4) Type C,
WAERS(5) Type C,
BUKRS(4) Type C,
ADRNR(10) Type C,
TXNAM_ADR(16) Type C,
TXNAM_KOP(16) Type C,
TXNAM_FUS(16) Type C,
TXNAM_GRU(16) Type C,
VKOAU(4) Type C,
KUNNR(10) Type C,
BOAVO(1) Type C,
VKOKL(2) Type C,
EKORG(4) Type C,
EKGRP(3) Type C,
LIFNR(10) Type C,
WERKS(4) Type C,
BSART(4) Type C,
BSTYP(1) Type C,
BWART(3) Type C,
LGORT(4) Type C,
TXNAM_SDB(16) Type C,
MWSKZ(2) Type C,
XSTCEG(1) Type C,
J_1ANUTIME(1) Type C,
MAXBI(3) Type C,
End of TS_TVKO.
Data: IT_TVKO TYPE STANDARD TABLE OF TS_TVKO .
Data: WA_TVKO TYPE TS_TVKO .
data:  LV_TVKO type string.
ENDIF.

*ACTTSAP15.0 Adding S/4 HANA table - USOBHASH *
DATA: ISTABLE_USOBHASH TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'USOBHASH' AND TABCLASS <> 'VIEW'.

IF SY-SUBRC = 0.
  ISTABLE_USOBHASH = 'Yes'.
ELSE.
  ISTABLE_USOBHASH = 'No'.
ENDIF.

IF ISTABLE_USOBHASH = 'Yes'.
  TYPES: BEGIN OF TS_USOBHASH,
  NAME(40) TYPE C,
  OBJECT(4) TYPE C,
  OBJ_NAME(40) TYPE C,
  END OF TS_USOBHASH.
  DATA: IT_USOBHASH TYPE STANDARD TABLE OF TS_USOBHASH .
  DATA: WA_USOBHASH TYPE TS_USOBHASH .
  DATA:  LV_USOBHASH TYPE STRING.
ENDIF.

* Adding Date for Change Log*
DATA: DATE_START TYPE D.
DATE_START = SY-DATUM - 548.
*#ACTTSAP12.0 Release 12.0 Changes End *


TYPES: TT_TEXT_TABLE TYPE STANDARD TABLE OF STRING WITH DEFAULT KEY.
DATA: LV_FILE TYPE STRING ,
  LT_TABLE TYPE TT_TEXT_TABLE  ,
  LS_TABLE TYPE STRING.
DATA : LV_DATASET TYPE RLGRAP-FILENAME .
PARAMETERS RB_BACK RADIOBUTTON GROUP RAD1  DEFAULT 'X'.
PARAMETERS RB_FORE RADIOBUTTON GROUP RAD1 .
PARAMETERS S_PCLIEN TYPE TS_AGR_1016-MANDT OBLIGATORY.
PARAMETERS S_START LIKE SY-DATUM OBLIGATORY.
PARAMETERS S_END LIKE SY-DATUM OBLIGATORY.
PARAMETERS P_FILE(1024) TYPE C LOWER CASE.

SELECTION-SCREEN SKIP 1 .
SELECTION-SCREEN ULINE.
SELECTION-SCREEN COMMENT /1(79) comm1.
SELECTION-SCREEN COMMENT /1(79) comm2.
SELECTION-SCREEN COMMENT /1(79) comm3.
SELECTION-SCREEN ULINE.

****  Begin Change by Madhuri - UI changes  *****
SELECTION-SCREEN SKIP 3 .
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME . "TITLE LV_HEAD .
SELECTION-SCREEN COMMENT /2(70) LV_HEAD MODIF ID M1 .
SELECTION-SCREEN SKIP 1 .
****  End Change by Madhuri - UI changes  *****
PARAMETERS: CK_POP AS CHECKBOX DEFAULT '' .
SELECT-OPTIONS P_TABLES FOR ls_DD02L-TABNAME .
PARAMETERS: P_MSIZE TYPE CHAR20 DEFAULT '100000'. "Added by SUDHA
****  Begin Change by Madhuri - UI changes  *****
SELECTION-SCREEN END OF BLOCK B1 .
****  End Change by Madhuri - UI changes  *****

SELECTION-SCREEN ULINE.
SELECTION-SCREEN COMMENT /1(79) comm4 .
SELECTION-SCREEN COMMENT /1(79) comm5 .
SELECTION-SCREEN ULINE.

** SV 02102020 -- SM20 Extraction Logic


SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME  . "TITLE LV_HEAD.
SELECTION-SCREEN ULINE.
SELECTION-SCREEN COMMENT /1(79) comm6 .
SELECTION-SCREEN COMMENT /1(79) comm7 .
SELECTION-SCREEN COMMENT /1(79) comm8 .
SELECTION-SCREEN COMMENT /1(79) comm9 .
SELECTION-SCREEN COMMENT /1(79) comm10 .
SELECTION-SCREEN COMMENT /1(79) comm11 .
SELECTION-SCREEN COMMENT /1(79) comm12 .
SELECTION-SCREEN ULINE.
SELECTION-SCREEN SKIP 1.
PARAMETERS : ck_sm2 AS CHECKBOX DEFAULT ''.
SELECTION-SCREEN END OF BLOCK b2 .
** SV 02102020 -- SM20 Extraction Logic

DATA: WA_P_TABLES TYPE RSPARAMS .
*#ACTTSAP12.0 To Add Option for Population Exclusion
*Data: CK_POP Type String.
*CK_POP = 'X'.
*#ACTTSAP12.0 To Add Option for Population Exclusion

*#ACTTSAP12.0 To remove Exclude Profile option
*PARAMETERS: CK_PROF AS CHECKBOX.
DATA: CK_PROF TYPE STRING.
CK_PROF = ''.
*#ACTTSAP12.0 End of Exclude Profile Option


*Old Report Code Begin*
*&---------------------------------------------------------------------*
*& Structure Declarations
*&---------------------------------------------------------------------*
*    String table
TYPES:BEGIN OF TY_STR_1906,
      STR TYPE STRING,
     END OF TY_STR_1906,
*   structure declaration for parameter names.
    BEGIN OF TY_T000_1906,
    CLIENT(10) TYPE C,
    END OF TY_T000_1906,
*   Structure declaration for Displaying the output data
    BEGIN OF TY_OUTPUT_1906,
    CLIENT(10) TYPE C,
    USER(20) TYPE C,
    PWSTATUS(90) TYPE C,
    END OF TY_OUTPUT_1906,
*   structure declaration for USR02.
    BEGIN OF TY_USR02_1906.
        INCLUDE STRUCTURE USR02.
TYPES : END OF TY_USR02_1906.




TYPES: BEGIN OF TY_USR02,
       MANDT TYPE MANDT,
       BNAME TYPE BNAME,
       BCODE TYPE XUCODE,
       CODVN TYPE XUCODEVERS,
       PASSCODE TYPE USR02-PASSCODE,
       END OF TY_USR02.





DATA : T_T000_1906 TYPE STANDARD TABLE OF TY_T000_1906,
       T_OUTPUT_1906 TYPE STANDARD TABLE OF TY_OUTPUT_1906,
       T_USR02_1906 TYPE STANDARD TABLE OF TY_USR02_1906,
       T_STR_1906 TYPE STANDARD TABLE OF TY_STR_1906,
       T_USR02 TYPE STANDARD TABLE OF TY_USR02.


*&---------------------------------------------------------------------*
*& Internal table Declarations
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Work area Declarations
*&---------------------------------------------------------------------*
*    Work area declaration for string table
DATA :  W_STR_1906 TYPE TY_STR_1906,

*    Work area declaration for final output table
     W_OUTPUT_1906 TYPE TY_OUTPUT_1906,

*    Work area declaration for Tolerance limits
     W_T000_1906 TYPE  TY_T000_1906,
*&---------------------------------------------------------------------*
*& Variables Declarations
*&---------------------------------------------------------------------*
P_1906 TYPE STRING .
**Variable declarations.
DATA: SAPSTAR_VALUE_1906(60) TYPE C.
* Hashvalues of default passwords
DATA:
**** begin of change by madhuri - 2/29/2016
        CODEAS1_1906 LIKE USR02-BCODE VALUE 'C75E6D9600AB5710',
        CODEAS2_1906 LIKE USR02-BCODE VALUE '5F1000863FC70B6D',
        CODEAD1_1906 LIKE USR02-BCODE VALUE 'C7CC6D670030F310',
        CODEAD2_1906 LIKE USR02-BCODE VALUE '5FA752863FB70BA9',
        CODEACP_1906 LIKE USR02-BCODE VALUE 'FC49DBF6F3FDCF36',
        CODEAEW_1906 LIKE USR02-BCODE VALUE '13C810002A147DEE',
        CODEBS1_1906 LIKE USR02-BCODE VALUE 'D0BFF4276DA1E208',
        CODEBS2_1906 LIKE USR02-BCODE VALUE '4B31EAA71FDDEAE2',
        CODEBD1_1906 LIKE USR02-BCODE VALUE '9A32C3A07A595E4E',
        CODEBD2_1906 LIKE USR02-BCODE VALUE '61D26428640DBAB5',
        CODEBCP_1906 LIKE USR02-BCODE VALUE '7D806C248F03813D',
        CODEBEW_1906 LIKE USR02-BCODE VALUE 'BD5E494D3ECBF5E2',
        CODETMS1A_1906 LIKE USR02-BCODE VALUE '7671D2F2729F27F0',
        CODETMS1B_1906 LIKE USR02-BCODE VALUE '942B9DC0F2394D85',
        CODETMS2A_1906 LIKE USR02-BCODE VALUE '05CB79BE189802A0',
        CODETMS2B_1906 LIKE USR02-BCODE VALUE 'B7E2F82C0A3E54C4'.

CONSTANTS:
 LC_EARLYD TYPE XUCODE VALUE '573822832DF89B9C', "
 LC_EARLYE TYPE XUCODE VALUE 'B3ADDFE95DCD036F',
 LC_EARLYF1 TYPE HASH160X VALUE '924127D88EE3C1820A2C88495EC4825E819C9249',
 LC_EARLYF2 TYPE HASH160X VALUE '760293CCD7AC111298A7AC70D3304242E442320F',
 LC_SAPCPICD TYPE XUCODE VALUE '35C7AB28316EA22F',
 LC_SAPCPICE TYPE XUCODE VALUE '5A5F45726821A147',
 LC_SAPCPICF1 TYPE HASH160X VALUE '57CF364A7D83FA563025C7BCFFFB3B579DFB23F3',
 LC_SAPCPICF2 TYPE HASH160X VALUE '38AE55102813F3BBBC3B3BCA09285ED5A9E0423F',
 LC_DDICD TYPE XUCODE VALUE 'DCA44BB71C073A05',
 LC_DDICE TYPE XUCODE VALUE '08FA7683A46D9AA9',
 LC_DDICF TYPE HASH160X VALUE '905F5E6CE67B7C60D0F7BA9C4063AAF0D8602B45',
 LC_SAA TYPE XUCODE VALUE 'C75E6D9600AB5710',
 LC_SAPD TYPE XUCODE VALUE 'A83ECB9EC4D34C08',
 LC_SAPE TYPE XUCODE VALUE '95984B6A25BA20E9',
 LC_SAPI TYPE HASH160X VALUE '8948310AF768FA9061598E8F68FD144CE65B7480',
 LC_TMS1A TYPE XUCODE VALUE '7671D2F2729F27F0',
 LC_TMS1B TYPE XUCODE VALUE '942B9DC0F2394D85',
 LC_TMSD1 TYPE XUCODE VALUE '7C6433CE69099272',
 LC_TMSE1 TYPE XUCODE VALUE '940BAB0E12A36DC2',
 LC_TMSADM1  TYPE HASH160X VALUE 'C9AA19DA354DC8397D7AC8EA8B4C04DF49CB58FF',
 LC_TMSD2 TYPE XUCODE VALUE '4DD4438D3C19138C',
 LC_TMSADM2  TYPE HASH160X VALUE 'A6BF38EE57F90B78C8D88A5212BBF1BA9A966ABB'.


**** end of change by madhuri - 2/29/2016

*** Begin of addition by Sudha
""Total number of records per select is MAXSIZE (from JSON)
DATA: maxsize   TYPE char10,
      maxdays   TYPE i VALUE 30,
      s_cursor  TYPE cursor,
      s_cursor1 TYPE cursor.
*** End of addition by Sudha
FIELD-SYMBOLS : <FS_USR02> TYPE TY_USR02.
*Old Report Code End*


*  Begin of Code for Data Extraction of RSUSR100N logs language issue- Madhuri KL - 6/14/2018
data : lv_identifier type c .     "flag to check if top header lines need to be deleted
*  End of Code for Data Extraction of RSUSR100N logs language issue- Madhuri KL - 6/14/2018

*  Begin of Code for Data Extraction of SCU3 logs  - Madhuri KL - 3/1/2018
DATA: gs_dbtablog TYPE dbtablog .
****  Begin of changes by - Madhuri KL - 10/4/2018 - fix error of appending data when file exists.
data lv_file_temp type string.
****  End of changes by - Madhuri KL - 10/4/2018 - fix error of appending data when file exists.
SELECT-OPTIONS s_tbname FOR gs_dbtablog-tabname NO INTERVALS NO-DISPLAY.

s_tbname-low = 'T000' .
APPEND s_tbname .

s_tbname-low = 'PAHI' .
APPEND s_tbname .

s_tbname-low = 'DEVACCESS' .
APPEND s_tbname .

s_tbname-low = 'T001B' .
APPEND s_tbname .
*  End of Code for Data Extraction of SCU3 logs - Madhuri KL - 3/1/2018



INITIALIZATION .
  SET LOCALE LANGUAGE 'E'.
  %_S_PCLIEN_%_APP_%-TEXT = 'Client' .
  %_S_START_%_APP_%-TEXT = 'Enter Start Date for Audit' .
  %_S_END_%_APP_%-TEXT = 'Enter End Date for Audit' .
  %_RB_FORE_%_APP_%-TEXT = 'Foreground Processing : ' .
  %_RB_BACK_%_APP_%-TEXT = 'Background Processing' .
  %_P_FILE_%_APP_%-TEXT = 'Enter File Path : ' .
  %_CK_POP_%_APP_%-TEXT = 'Expert Mode - DO NOT SELECT'.
  %_P_TABLES_%_APP_%-TEXT = 'Enter Table List (Expert Mode) : ' .
  %_P_MSIZE_%_APP_%-TEXT = 'Table Partition Record Count : ' .

  comm1 = 'NOTE: While running the script in Foreground Processing, if it runs into Time'.
  comm2 = 'Out error, execute the script as a background job. Refer to instruction'.
  comm3 = 'document for more details.' .

  LV_HEAD = 'DO NOT USE UNLESS SPECIFIED BY DELOITTE' .         "Madhuri - UI change

  comm4 = 'NOTE: If the script runs into memory issue even in Background Processing,'.
  comm5 = 'please send detailed ABAP dump via ST22 transaction code to Deloitte'.
  comm6 = 'NOTE:'.
  comm7 = '1.When SM20 is selected, none of the regular tables will get extracted.'.
  comm8 = '  Only the SM20 logs and a configuration input file will get extracted.'.
  comm9 = '2.Use the SM20 extraction feature only when audit log is configured'.
  comm10 = '3.In case the audit logs have been purged/archived,no data will be extracted.'.
  comm11 = '4.Perform SM20 extraction after the regular extraction of tables'.
  comm12 = '5.Always use the same parameters which is used during table extraction'.
%_ck_sm2_%_app_%-text = 'Extract SM20 Logs'. "SV 02152020
*#ACTTSAP12.0 Release 12.0 Changes Begin *
* Hide Exclude Profiles Checkbix*
*    %_CK_PROF_%_APP_%-TEXT = 'Exclude Profiles'.
*#ACTTSAP12.0 Release 12.0 Changes End *

****  Begin of Change by Madhuri for UI      ****
AT SELECTION-SCREEN OUTPUT .
  LOOP AT SCREEN.
    IF SCREEN-GROUP1 = 'M1'.
      SCREEN-INTENSIFIED = '1'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
****  End of Change by Madhuri for UI      ****

START-OF-SELECTION.
  DATA:
  LV_SEP TYPE C .
  FIND '/' IN P_FILE .
  IF SY-SUBRC NE 0 .
    FIND '\' IN P_FILE.
    IF SY-SUBRC NE 0 .
      MESSAGE 'Incorrect File Path. Please check your entry.' TYPE 'E' .
    ELSE.
      LV_SEP = '\' .
    ENDIF.
  ELSE.
    LV_SEP = '/' .
  ENDIF.
  LV_LEN = STRLEN( P_FILE ) - 1 .
  IF P_FILE+LV_LEN(1) NE LV_SEP .
    CONCATENATE P_FILE LV_SEP INTO P_FILE.
  ENDIF.
  CLEAR LV_LEN .
  LV_TIME1 = SY-UZEIT .
*** Begin of addition by SUDHA
  MAXSIZE = P_MSIZE.
  IF MAXSIZE IS INITIAL.
    MESSAGE 'Please enter Maxsize' TYPE 'E'.
  ENDIF.
*** End of addition by SUDHA
*** SV 02102020 -- SM21 EXTRACTION LOGIC
** IN CASE OF CHECKBOX OF SM2 IS SELECTED, THEN EXTRACT ONLY
** SM20 AND EXIT THE PROGRAM
  IF ck_sm2 IS NOT INITIAL.
    PERFORM extract_sm20.
    PERFORM sub_download_acct_config.
    LEAVE LIST-PROCESSING.
  ENDIF.

*ACTT15R change: Added CUA version tables*
*Extracting Version Specific tables*
DATA: ISTABLE_USRFLDGRP TYPE STRING.

SELECT single * FROM DD02L into ls_dd02l
WHERE TABNAME  = 'USRFLDGRP' AND TABCLASS <> 'VIEW'.
.
IF SY-SUBRC = 0.
  ISTABLE_USRFLDGRP = 'Yes'.
ELSE.
  ISTABLE_USRFLDGRP = 'No'.
ENDIF.

IF ISTABLE_USRFLDGRP = 'Yes'.
  TYPES: BEGIN OF TS_USRFLDGRP,
  LOG_FIELD(30) TYPE C,
  FIELDGROUP(30) TYPE C,
  END OF TS_USRFLDGRP.
  DATA: IT_USRFLDGRP TYPE STANDARD TABLE OF TS_USRFLDGRP .
  DATA: WA_USRFLDGRP TYPE TS_USRFLDGRP .
  DATA:  LV_USRFLDGRP TYPE STRING.
ENDIF.

*ACTT16R change: Check for a ECC/S4 Table*
*Extracting Version Specific tables*


*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'AGR_1016'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.

  OPEN CURSOR WITH HOLD S_CURSOR FOR
SELECT
MANDT
AGR_NAME
PROFILE
GENERATED
PSTATE
FROM AGR_1016  CLIENT SPECIFIED
* INTO TABLE IT_AGR_1016
WHERE MANDT =  S_PCLIEN.
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_1016
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'AGR_1016.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_AGR_1016-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AGR_NAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROFILE' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-PROFILE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GENERATED' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-GENERATED
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PSTATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-PSTATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_1016 = LINES( IT_AGR_1016 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_1016
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_1016 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'AGR_1251'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.

*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
SELECT
    deleted
    modified
    high
    low
    field
    object
    auth
    counter
    agr_name
    mandt
FROM AGR_1251  CLIENT SPECIFIED
* INTO TABLE IT_AGR_1251
*#ACTTSAP12.0 Added Deleted Filter*  *#ACTTSAP12.0 Added Deleted Filter*
WHERE MANDT =  S_PCLIEN AND AGR_NAME <> '' AND LOW <> '' AND DELETED <> 'X'.
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_1251
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_AGR1251.
      ENDIF.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  .
  IF rb_fore IS NOT INITIAL AND IT_AGR_1251 IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_AGR1251.
  ENDIF.
ENDIF.
*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'AGR_1252'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  AGR_NAME
  COUNTER
  VARBL
  LOW
  HIGH
  FROM AGR_1252  CLIENT SPECIFIED
* INTO TABLE IT_AGR_1252
  WHERE MANDT =  S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_1252
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.

*** End of change by SUDHA
  LV_FILE = 'AGR_1252.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_AGR_1252-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AGR_NAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'COUNTER' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-COUNTER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'VARBL' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-VARBL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LOW' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-LOW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HIGH' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-HIGH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
 lv_agr_1252 = lv_agr_1252 + LINES( it_agr_1252 ) .
  IF lv_agr_1252 GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_1252
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_1252 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'AGR_AGRS'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  AGR_NAME
  CHILD_AGR
  ATTRIBUTES
  FROM AGR_AGRS  CLIENT SPECIFIED
* INTO TABLE IT_AGR_AGRS
  WHERE MANDT =  S_PCLIEN AND ATTRIBUTES <> 'X'
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_AGRS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'AGR_AGRS.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_AGR_AGRS-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'agr_name' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_AGRS-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'child_agr' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_AGRS-CHILD_AGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'attributes' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_AGRS-ATTRIBUTES
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_AGRS = LINES( IT_AGR_AGRS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_AGRS
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_AGRS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'AGR_USERS'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  COL_FLAG
  ORG_FLAG
  EXCLUDE
  TO_DAT
  FROM_DAT
  UNAME
  AGR_NAME
  MANDT
  FROM AGR_USERS  CLIENT SPECIFIED
* INTO TABLE IT_AGR_USERS
  WHERE MANDT =  S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_USERS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'AGR_USERS.ACTT'.
  LS_TABLE = 'col_flag'.
  DESCRIBE FIELD WA_AGR_USERS-COL_FLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'org_flag' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-ORG_FLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'exclude' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-EXCLUDE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'to_dat' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-TO_DAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'from_dat' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-FROM_DAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'uname' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-UNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'agr_name' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  lv_agr_users = lv_agr_users + LINES( it_agr_users ) .
  IF lv_agr_users GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_USERS
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_USERS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'CWBNTCUST'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  CWBUSER
  PRSTATUS
  NTSTATUS
  NUMM
  FROM CWBNTCUST
  INTO TABLE IT_CWBNTCUST
  .
  LV_FILE = 'CWBNTCUST.ACTT'.
  LS_TABLE = 'CWBUSER'.
  DESCRIBE FIELD WA_CWBNTCUST-CWBUSER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PRSTATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_CWBNTCUST-PRSTATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NTSTATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_CWBNTCUST-NTSTATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NUMM' INTO LS_TABLE.
  DESCRIBE FIELD WA_CWBNTCUST-NUMM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_CWBNTCUST = LINES( IT_CWBNTCUST ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_CWBNTCUST
    USING LV_FILE
    LS_TABLE .
    FREE IT_CWBNTCUST .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'DEVACCESS'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
 SELECT
  UNAME
  ACCESSKEY
  FROM DEVACCESS
  INTO TABLE IT_DEVACCESS
  .
  LV_FILE = 'DEVACCESS.ACTT'.
  LS_TABLE = 'UNAME'.
  DESCRIBE FIELD WA_DEVACCESS-UNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ACCESSKEY' INTO LS_TABLE.
  DESCRIBE FIELD WA_DEVACCESS-ACCESSKEY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DEVACCESS = LINES( IT_DEVACCESS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DEVACCESS
    USING LV_FILE
    LS_TABLE .
    FREE IT_DEVACCESS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.


*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'PAHI'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  SYSTEMID
  PARVALUE
  PARTYPE
  PARSTATE
  PARNAME
  PARDATE
  HOSTNAME
  FROM PAHI
  INTO TABLE IT_PAHI
  .
  LV_FILE = 'PAHI.ACTT'.
  LS_TABLE = 'SYSTEMID'.
  DESCRIBE FIELD WA_PAHI-SYSTEMID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARVALUE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARVALUE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARTYPE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARTYPE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARSTATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARSTATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARDATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARDATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HOSTNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-HOSTNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  lv_PAHI = lv_PAHI + LINES( it_PAHI ) .
  IF lv_PAHI GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_PAHI
    USING LV_FILE
    LS_TABLE .
    FREE IT_PAHI .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T000'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  CCCATEGORY
  CCCOPYLOCK
  CCCORACTIV
  CCNOCLIIND
  MANDT
  MTEXT
  CHANGEDATE
  FROM T000
  INTO TABLE IT_T000
  .
  LV_FILE = 'T000.ACTT'.
  LS_TABLE = 'CCCATEGORY'.
  DESCRIBE FIELD WA_T000-CCCATEGORY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCCOPYLOCK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CCCOPYLOCK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCCORACTIV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CCCORACTIV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCNOCLIIND' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CCNOCLIIND
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-MTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.

  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CHANGEDATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CHANGEDATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.

  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T000 = LINES( IT_T000 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T000
    USING LV_FILE
    LS_TABLE .
    FREE IT_T000 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T001'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
 IF ISTABLE_T001 = 'Yes'.
    DATA: COLUMN_T001 TYPE STRING.
    DATA TABLE_T001 TYPE STRING.
    COLUMN_T001 = 'xprod xnegp xgsbe waers waabw periv ort01 opvar mandt land1 ktopl kkber butxt bukrs'.
    TABLE_T001 = 'T001'.
    SELECT
   (COLUMN_T001)
    FROM (TABLE_T001)
    INTO TABLE IT_T001
    WHERE MANDT =  S_PCLIEN.
  lv_file = 'T001.ACTT'.
  ls_table = 'XPROD'.
  DESCRIBE FIELD wa_t001-xprod
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XNEGP' INTO ls_table.
  DESCRIBE FIELD wa_t001-xnegp
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XGSBE' INTO ls_table.
  DESCRIBE FIELD wa_t001-xgsbe
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WAERS' INTO ls_table.
  DESCRIBE FIELD wa_t001-waers
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WAABW' INTO ls_table.
  DESCRIBE FIELD wa_t001-waabw
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PERIV' INTO ls_table.
  DESCRIBE FIELD wa_t001-periv
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ORT01' INTO ls_table.
  DESCRIBE FIELD wa_t001-ort01
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'OPVAR' INTO ls_table.
  DESCRIBE FIELD wa_t001-opvar
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_t001-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LAND1' INTO ls_table.
  DESCRIBE FIELD wa_t001-land1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_t001-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KKBER' INTO ls_table.
  DESCRIBE FIELD wa_t001-kkber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUTXT' INTO ls_table.
  DESCRIBE FIELD wa_t001-butxt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t001-bukrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t001 = LINES( it_t001 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t001
    USING lv_file
    ls_table .
    FREE it_t001 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TADIR'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  PGMID
  OBJECT
  OBJ_NAME
  EDTFLAG
  FROM TADIR
  INTO TABLE IT_TADIR
  WHERE PGMID = 'HEAD' AND OBJECT = 'SYST'
  .
  LV_FILE = 'TADIR.ACTT'.
  LS_TABLE = 'PGMID'.
  DESCRIBE FIELD WA_TADIR-PGMID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TADIR-OBJECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJ_NAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TADIR-OBJ_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'EDTFLAG' INTO LS_TABLE.
  DESCRIBE FIELD WA_TADIR-EDTFLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TADIR = LINES( IT_TADIR ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TADIR
    USING LV_FILE
    LS_TABLE .
    FREE IT_TADIR .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TDDAT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  TABNAME
  CCLASS
  FROM TDDAT
  INTO TABLE IT_TDDAT.
  LV_FILE = 'TDDAT.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_TDDAT-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCLASS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TDDAT-CCLASS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TDDAT = LINES( IT_TDDAT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TDDAT
    USING LV_FILE
    LS_TABLE .
    FREE IT_TDDAT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

  "" Begin of addition -Resolve memory dump

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TRDIR'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of Change by Srinivas
    PERFORM SUB_TRDIR_TRDIRT.
*** End of Change by Srinivas
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TSTC'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  TCODE
  PGMNA
  CINFO
  FROM TSTC
  INTO TABLE IT_TSTC
  .
  LV_FILE = 'TSTC.ACTT'.
  LS_TABLE = 'TCODE'.
  DESCRIBE FIELD WA_TSTC-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PGMNA' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTC-PGMNA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CINFO' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTC-CINFO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTC = LINES( IT_TSTC ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTC
    USING LV_FILE
    LS_TABLE .
    FREE IT_TSTC .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TSTCA'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  TCODE
  OBJCT
  FROM TSTCA
  INTO TABLE IT_TSTCA
  WHERE ( TCODE LIKE 'Z%' OR TCODE LIKE 'Y%' )
  .
  LV_FILE = 'TSTCA.ACTT'.
  LS_TABLE = 'TCODE'.
  DESCRIBE FIELD WA_TSTCA-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJCT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCA-OBJCT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTCA = LINES( IT_TSTCA ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTCA
    USING LV_FILE
    LS_TABLE .
    FREE IT_TSTCA .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TSTCP'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  TCODE
  PARAM
  FROM TSTCP
  INTO TABLE IT_TSTCP
  .
  LV_FILE = 'TSTCP.ACTT'.
  LS_TABLE = 'TCODE'.
  DESCRIBE FIELD WA_TSTCP-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARAM' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCP-PARAM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTCP = LINES( IT_TSTCP ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTCP
    USING LV_FILE
     LS_TABLE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TSTCT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  SPRSL
  TCODE
  TTEXT
  FROM TSTCT
  INTO TABLE IT_TSTCT
  WHERE ( TCODE LIKE 'Z%' OR TCODE LIKE 'Y%' )
  .
  LV_FILE = 'TSTCT.ACTT'.
  LS_TABLE = 'SPRSL'.
  DESCRIBE FIELD WA_TSTCT-SPRSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TCODE' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCT-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCT-TTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTCT = LINES( IT_TSTCT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTCT
    USING LV_FILE
    LS_TABLE .
    FREE IT_TSTCT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USORG'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
FIELD
VARBL
FROM USORG
INTO TABLE IT_USORG
.
  LV_FILE = 'USORG.ACTT'.
  LS_TABLE = 'FIELD'.
  DESCRIBE FIELD WA_USORG-FIELD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'VARBL' INTO LS_TABLE.
  DESCRIBE FIELD WA_USORG-VARBL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USORG = LINES( IT_USORG ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USORG
    USING LV_FILE
     LS_TABLE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USR02'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  CLASS
  USTYP
  GLTGB
  GLTGV
  UFLAG
  MANDT
  BNAME
  TRDAT
  LTIME
  FROM USR02  CLIENT SPECIFIED
* INTO TABLE IT_USR02
  WHERE MANDT =  S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USR02
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.


  LV_FILE = 'USR02.ACTT'.
  LS_TABLE = 'CLASS'.
  DESCRIBE FIELD WA_USR02-CLASS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-USTYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GLTGB' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-GLTGB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-GLTGV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-UFLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TRDAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-TRDAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LTIME' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-LTIME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  lv_usr02 = lv_usr02 + LINES( it_usr02 ) .
  IF lv_usr02 GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR02
    USING LV_FILE
    LS_TABLE .

    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USR21'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD s_cursor FOR
      SELECT
      mandt
      bname
      persnumber
      FROM usr21  CLIENT SPECIFIED
*  INTO TABLE it_usr21
      FOR ALL ENTRIES IN it_usr02
      WHERE bname = it_usr02-bname
      AND mandt =  s_pclien
      .

    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE it_usr21
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    lv_file = 'USR21.ACTT'.
    ls_table = 'mandt'.
    DESCRIBE FIELD wa_usr21-mandt
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'bname' INTO ls_table.
    DESCRIBE FIELD wa_usr21-bname
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'persnumber' INTO ls_table.
    DESCRIBE FIELD wa_usr21-persnumber
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    lv_usr21 = lv_usr21 + LINES( it_usr21 ) .
  IF lv_usr21 GT 0.
      PERFORM conv_table_to_text TABLES it_usr21
      USING lv_file
      ls_table .
      FREE it_usr02 .
      CLEAR lt_table .
      CLEAR ls_table .
    ELSE.
      APPEND ls_table TO lt_table .
      PERFORM download_gui TABLES lt_table USING lv_file .
      CLEAR lt_table .
      CLEAR ls_table .
    ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'ADRP'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  CLIENT
  PERSNUMBER
  DATE_FROM
  DATE_TO
  TITLE
  NAME_FIRST
  NAME_LAST
  SEX
  FROM ADRP  CLIENT SPECIFIED
* INTO TABLE IT_ADRP
  FOR ALL ENTRIES IN IT_USR21
  WHERE PERSNUMBER = IT_USR21-PERSNUMBER
  AND CLIENT =  S_PCLIEN AND DATE_TO GE SY-DATUM
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_ADRP
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA


  LV_FILE = 'adrp.ACTT'.
  LS_TABLE = 'client'.
  DESCRIBE FIELD WA_ADRP-CLIENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'persnumber' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-PERSNUMBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'date_from' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-DATE_FROM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'date_to' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-DATE_TO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'title' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-TITLE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'name_first' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-NAME_FIRST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'name_last' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-NAME_LAST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'sex' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-SEX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_ADRP = LINES( IT_ADRP ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_ADRP
    USING LV_FILE
    LS_TABLE .
    FREE IT_USR21 .
    FREE IT_ADRP .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

*#ACTTSAP15.0 Release 15.0 Changes Begin*
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'DD02L'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
SELECT
TABNAME
AS4LOCAL
CLIDEP
MAINFLAG
FROM DD02L
INTO TABLE IT_DD02L
WHERE AS4LOCAL = 'A'
.
lv_file = 'DD02L.ACTT'.
ls_table = 'TABNAME'.
DESCRIBE FIELD WA_DD02L-TABNAME
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AS4LOCAL' into ls_table.
DESCRIBE FIELD WA_DD02L-AS4LOCAL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'CLIDEP' into ls_table.
DESCRIBE FIELD WA_DD02L-CLIDEP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MAINFLAG' into ls_table.
DESCRIBE FIELD WA_DD02L-MAINFLAG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_DD02L = lv_DD02L + LINES( it_DD02L ) .
  IF LV_DD02L GT 0.
perform conv_table_to_text tables it_DD02L
using lv_file
 ls_table .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVDIR'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
SELECT
TABNAME
FLAG
FROM TVDIR
INTO TABLE IT_TVDIR
WHERE FLAG = 'X'
.
lv_file = 'TVDIR.ACTT'.
ls_table = 'TABNAME'.
DESCRIBE FIELD WA_TVDIR-TABNAME
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FLAG' into ls_table.
DESCRIBE FIELD WA_TVDIR-FLAG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVDIR = lines( it_TVDIR ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVDIR
using lv_file
 ls_table .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'OBJH'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
SELECT
OBJECTNAME
OBJECTTYPE
FROM OBJH
INTO TABLE IT_OBJH
WHERE ( OBJECTTYPE IN ('S','V') )
.
lv_file = 'OBJH.ACTT'.
ls_table = 'OBJECTNAME'.
DESCRIBE FIELD WA_OBJH-OBJECTNAME
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OBJECTTYPE' into ls_table.
DESCRIBE FIELD WA_OBJH-OBJECTTYPE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_OBJH = lines( it_OBJH ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_OBJH
using lv_file
 ls_table .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'DD02T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
SELECT
TABNAME
DDTEXT
DDLANGUAGE
FROM DD02T
INTO TABLE IT_DD02T
WHERE DDLANGUAGE = 'EN'
.
lv_file = 'DD02T.ACTT'.
ls_table = 'TABNAME'.
DESCRIBE FIELD WA_DD02T-TABNAME
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'DDTEXT' into ls_table.
DESCRIBE FIELD WA_DD02T-DDTEXT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'DDLANGUAGE' into ls_table.
DESCRIBE FIELD WA_DD02T-DDLANGUAGE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_DD02T = lv_DD02T + LINES( it_DD02T ) .
  IF lv_DD02T GT 0.
perform conv_table_to_text tables it_DD02T
using lv_file
 ls_table .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'DD03L'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
SELECT
TABNAME
FIELDNAME
ROLLNAME
FROM DD03l
INTO TABLE IT_DD03l
WHERE ( TABNAME IN ('T095', 'T095B', 'ANLZ') )
.
lv_file = 'DD03l.ACTT'.
ls_table = 'TABNAME'.
DESCRIBE FIELD WA_DD03l-TABNAME
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FIELDNAME' into ls_table.
DESCRIBE FIELD WA_DD03l-DDTEXT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ROLLNAME' into ls_table.
DESCRIBE FIELD WA_DD03l-DDLANGUAGE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_DD03l = lines( it_DD03l ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_DD03l
using lv_file
 ls_table .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
*#ACTTSAP15.0 Release 15.0 Changes End*

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USR02_CC'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.

  IF ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
    DATA: USR02_COLUMNS TYPE STRING.
    USR02_COLUMNS = 'GLTGB USTYP CLASS ANAME ERDAT TRDAT LTIME GLTGV UFLAG MANDT BNAME SECURITY_POLICY'.
    SELECT
    (USR02_COLUMNS)
    FROM USR02 CLIENT SPECIFIED
    INTO TABLE IT_USR02_CC_1
    .
    LV_FILE = 'USR02_CC.ACTT'.
    LS_TABLE = 'GLTGB'.
    DESCRIBE FIELD WA_USR02_CC_1-GLTGB
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-USTYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CLASS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-CLASS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ANAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-ANAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ERDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-ERDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-TRDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LTIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-LTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-GLTGV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-UFLAG
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-BNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SECURITY_POLICY' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-SECURITY_POLICY
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USR02_CC_1 = LINES( IT_USR02_CC_1 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR02_CC_1
      USING LV_FILE
      LS_TABLE .
      FREE IT_USR02_CC_1.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.

  ELSE.

    SELECT
    GLTGB
    USTYP
    CLASS
    ANAME
    ERDAT
    TRDAT
    LTIME
    GLTGV
    UFLAG
    MANDT
    BNAME

    FROM USR02 CLIENT SPECIFIED
    INTO TABLE IT_USR02_CC
    .
    LV_FILE = 'USR02_CC.ACTT'.
    LS_TABLE = 'GLTGB'.
    DESCRIBE FIELD WA_USR02_CC-GLTGB
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-USTYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CLASS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-CLASS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ANAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-ANAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ERDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-ERDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-TRDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LTIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-LTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-GLTGV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-UFLAG
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-BNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USR02_CC = LINES( IT_USR02_CC ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR02_CC
      USING LV_FILE
      LS_TABLE .
      FREE IT_USR02_CC.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USR10'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF CK_PROF <> 'X'.

** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR

  SELECT
  MANDT
  PROFN
  AKTPS
  TYP
  FROM USR10  CLIENT SPECIFIED
* INTO TABLE IT_USR10
  WHERE MANDT =  S_PCLIEN
  .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_USR10
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA


    LV_FILE = 'USR10.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_USR10-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROFN' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR10-PROFN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AKTPS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR10-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR10-TYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USR10 = LINES( IT_USR10 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR10
      USING LV_FILE
      LS_TABLE .
      FREE IT_USR10 .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USREFUS'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  USERALIAS
  REFUSER
  BNAME
  MANDT
  FROM USREFUS  CLIENT SPECIFIED
* INTO TABLE IT_USREFUS
  WHERE MANDT =  S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USREFUS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA

  LV_FILE = 'USREFUS.ACTT'.
  LS_TABLE = 'USERALIAS'.
  DESCRIBE FIELD WA_USREFUS-USERALIAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'REFUSER' INTO LS_TABLE.
  DESCRIBE FIELD WA_USREFUS-REFUSER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_USREFUS-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_USREFUS-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USREFUS = LINES( IT_USREFUS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USREFUS
    USING LV_FILE
    LS_TABLE .
    FREE IT_USREFUS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.


*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'UST04'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  BNAME
  MANDT
  PROFILE
  FROM UST04  CLIENT SPECIFIED
* INTO TABLE IT_UST04
  WHERE MANDT =  S_PCLIEN
  .

  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_UST04
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'UST04.ACTT'.
  LS_TABLE = 'BNAME'.
  DESCRIBE FIELD WA_UST04-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_UST04-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROFILE' INTO LS_TABLE.
  DESCRIBE FIELD WA_UST04-PROFILE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  lv_UST04 = lv_UST04 + LINES( it_UST04 ) .
  IF lv_UST04 GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_UST04
    USING LV_FILE
    LS_TABLE .
    FREE IT_UST04 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'UST10C'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF CK_PROF <> 'X'.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
   SELECT
   MANDT
   PROFN
   AKTPS
   SUBPROF
   FROM UST10C  CLIENT SPECIFIED
* INTO TABLE IT_UST10C
   WHERE MANDT =  S_PCLIEN
   .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_UST10C
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA

    LV_FILE = 'UST10C.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_UST10C-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROFN' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10C-PROFN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AKTPS' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10C-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SUBPROF' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10C-SUBPROF
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_UST10C = LINES( IT_UST10C ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_UST10C
      USING LV_FILE
      LS_TABLE .
      FREE IT_UST10C .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'UST10S'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF CK_PROF <> 'X'.
** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  PROFN
  AKTPS
  OBJCT
  AUTH
  FROM UST10S  CLIENT SPECIFIED
* INTO TABLE IT_UST10S
  WHERE MANDT =  S_PCLIEN
  .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_UST10S
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'UST10S.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_UST10S-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROFN' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-PROFN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AKTPS' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'OBJCT' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-OBJCT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AUTH' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-AUTH
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    lv_ust10s = lv_ust10s + LINES( it_ust10s ) .
  IF lv_ust10s GT 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_UST10S
      USING LV_FILE
      LS_TABLE .
      FREE IT_UST10S .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
ENDIF.

*Addition of exclusion function (#ACTT15.0 release)
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'UST12'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF CK_PROF <> 'X'.
** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
   SELECT
   BIS
   VON
   FIELD
   AKTPS
   AUTH
   OBJCT
   MANDT
   FROM UST12  CLIENT SPECIFIED
* INTO TABLE IT_UST12
   WHERE MANDT =  S_PCLIEN AND VON <> ''
   .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_UST12
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ELSE.
        IF rb_fore IS INITIAL.
          PERFORM SUB_DOWNLOAD_UST12.
        ENDIF.
      ENDIF.

    ENDDO.
IF rb_fore IS NOT INITIAL AND IT_UST12 IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_UST12.
ENDIF.
ENDIF.
ENDIF.

  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USOBT_C'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF CK_PROF <> 'X'.
** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
   SELECT
   NAME
   TYPE
   OBJECT
   FIELD
   LOW
   HIGH
   FROM USOBT_C
   .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_USOBT_C
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ELSE.
        IF rb_fore IS INITIAL.
          PERFORM SUB_DOWNLOAD_USOBT_C.
        ENDIF.
      ENDIF.

    ENDDO.
IF rb_fore IS NOT INITIAL AND IT_USOBT_C IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_USOBT_C.
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USRFLDGRP'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_USRFLDGRP = 'Yes'.
    DATA: COLUMN_USRFLDGRP TYPE STRING.
    DATA TABLE_USRFLDGRP TYPE STRING.
    COLUMN_USRFLDGRP = 'LOG_FIELD FIELDGROUP'.
    TABLE_USRFLDGRP = 'USRFLDGRP'.
    SELECT
   (COLUMN_USRFLDGRP)
    FROM (TABLE_USRFLDGRP)
    INTO TABLE IT_USRFLDGRP
.
lv_file = 'USRFLDGRP.ACTT'.
ls_table = 'LOG_FIELD'.
DESCRIBE FIELD WA_USRFLDGRP-LOG_FIELD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FIELDGROUP' into ls_table.
DESCRIBE FIELD WA_USRFLDGRP-FIELDGROUP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_USRFLDGRP = lines( it_USRFLDGRP ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_USRFLDGRP
using lv_file
 ls_table .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USRFLDSEL'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_USRFLDSEL = 'Yes'.
    DATA: COLUMN_USRFLDSEL TYPE STRING.
    DATA TABLE_USRFLDSEL TYPE STRING.
    COLUMN_USRFLDSEL = 'CLIENT CUSTMODEL BOROBJECT LOG_FIELD UFLAG'.
    TABLE_USRFLDSEL = 'USRFLDSEL'.
    SELECT
   (COLUMN_USRFLDSEL)
    FROM (TABLE_USRFLDSEL)
    INTO TABLE IT_USRFLDSEL
WHERE client =  s_pclien AND borobject = 'USER'
.
  lv_file = 'USRFLDSEL.ACTT'.
  ls_table = 'CLIENT'.
  DESCRIBE FIELD wa_usrfldsel-client
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CUSTMODEL' INTO ls_table.
  DESCRIBE FIELD wa_usrfldsel-custmodel
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BOROBJECT' INTO ls_table.
  DESCRIBE FIELD wa_usrfldsel-borobject
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LOG_FIELD' INTO ls_table.
  DESCRIBE FIELD wa_usrfldsel-log_field
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'UFLAG' INTO ls_table.
  DESCRIBE FIELD wa_usrfldsel-uflag
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_usrfldsel = LINES( it_usrfldsel ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_usrfldsel
    USING lv_file
     ls_table .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.


*#ACTTSAP12.0 Release 12.0 Changes Begin*
* Adding Tables PAT03, TVIMF, USH04, USR04, USH02, CDHDR, CDPOS,E070 and TPALOG*
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'PAT03'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  PATCH
  SHORT_TEXT
  STATUS
  IMPLE_DATE
  L_IMPL_REL
  DELIV_DATE
  IMPLE_TIME
  COMP_REL
  COMPONENT
  FROM PAT03
  INTO TABLE IT_PAT03
  .
  LV_FILE = 'PAT03.ACTT'.
  LS_TABLE = 'PATCH'.
  DESCRIBE FIELD WA_PAT03-PATCH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SHORT_TEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-SHORT_TEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-STATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'IMPLE_DATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-IMPLE_DATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'L_IMPL_REL' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-L_IMPL_REL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DELIV_DATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-DELIV_DATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'IMPLE_TIME' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-IMPLE_TIME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'COMP_REL' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-COMP_REL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'COMPONENT' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-COMPONENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_PAT03 = LINES( IT_PAT03 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_PAT03
    USING LV_FILE
     LS_TABLE .
    FREE IT_PAT03 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVIMF'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  TABNAME
  EVENT
  FORMNAME
  FROM TVIMF
  INTO TABLE IT_TVIMF
  WHERE TABNAME = 'T000'
  .
  LV_FILE = 'TVIMF.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_TVIMF-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'EVENT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVIMF-EVENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FORMNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVIMF-FORMNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TVIMF = LINES( IT_TVIMF ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TVIMF
    USING LV_FILE
     LS_TABLE .
    FREE IT_TVIMF .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USR04'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR

  SELECT
  MANDT
  BNAME
  MODDA
  MODTI
  MODBE
  NRPRO
  PROFS
  FROM USR04  CLIENT SPECIFIED
* INTO TABLE IT_USR04
  WHERE MANDT =  S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USR04
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA

  LV_FILE = 'USR04.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_USR04-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODDA' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-MODDA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODTI' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-MODTI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODBE' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-MODBE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NRPRO' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-NRPRO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROFS' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-PROFS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  lv_usr04 = lv_usr04 + LINES( it_usr04 ) .
  IF lv_usr04 GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR04
    USING LV_FILE
     LS_TABLE .
    FREE IT_USR04.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

    READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USH04'.
    IF ck_pop <> 'X' OR sy-subrc <> 0.


      DATA: it_ush04_tmp TYPE STANDARD TABLE OF ts_ush04.
      DATA: it_ush04_tmp1 TYPE STANDARD TABLE OF ts_ush04.
      DATA: wa_ush04_tmp TYPE ts_ush04.

    PERFORM sub_download_ush04.
     SELECT
      mandt
      bname
      modda
      modti
      modbe
      nrpro
      profs
      FROM ush04  CLIENT SPECIFIED
      APPENDING TABLE it_ush04
      WHERE mandt =  s_pclien AND modda >= s_start AND modda <= s_end.

      SORT it_ush04 BY mandt bname modda modti .


      lv_file = 'USH04.ACTT'.
      ls_table = 'MANDT'.
      DESCRIBE FIELD wa_ush04-mandt
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'BNAME' INTO ls_table.
      DESCRIBE FIELD wa_ush04-bname
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'MODDA' INTO ls_table.
      DESCRIBE FIELD wa_ush04-modda
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'MODTI' INTO ls_table.
      DESCRIBE FIELD wa_ush04-modti
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'MODBE' INTO ls_table.
      DESCRIBE FIELD wa_ush04-modbe
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'NRPRO' INTO ls_table.
      DESCRIBE FIELD wa_ush04-nrpro
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'PROFS' INTO ls_table.
      DESCRIBE FIELD wa_ush04-profs
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      lv_ush04 = lv_ush04 + LINES( it_ush04 ) .
  IF lv_ush04 GT 0.
        PERFORM conv_table_to_text TABLES it_ush04
        USING lv_file
         ls_table .
        FREE it_ush04 .
        FREE it_ush04_tmp .
        CLEAR lt_table .
        CLEAR ls_table .
      ELSE.
        APPEND ls_table TO lt_table .
        PERFORM download_gui TABLES lt_table USING lv_file .
        CLEAR lt_table .
        CLEAR ls_table .
      ENDIF.
    ENDIF.



  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'USH02'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    DATA: IT_USH02_TMP TYPE STANDARD TABLE OF TS_USH02.
    DATA: IT_USH02_TMP1 TYPE STANDARD TABLE OF TS_USH02.
    DATA: WA_USH02_TMP TYPE TS_USH02 .

    SELECT
    MANDT
    BNAME
    MAX( MODDA ) AS MODDA
    FROM USH02  CLIENT SPECIFIED
    INTO TABLE IT_USH02_TMP
    WHERE MANDT =  S_PCLIEN AND MODDA < S_START
    GROUP BY MANDT BNAME.

*OPTION 1

    SELECT
        MANDT
        BNAME
        MODDA
        MODTI
        MODBE
        TCODE
        REPID
        GLTGV
        GLTGB
        USTYP
        CLASS
        UFLAG
        ACCNT
          FROM USH02  CLIENT SPECIFIED
          INTO TABLE IT_USH02_TMP1
          FOR ALL ENTRIES IN IT_USH02_TMP
          WHERE MANDT = IT_USH02_TMP-MANDT AND BNAME = IT_USH02_TMP-BNAME AND MODDA = IT_USH02_TMP-MODDA.

    SORT IT_USH02_TMP1 BY MANDT BNAME MODDA DESCENDING MODTI DESCENDING.

    LOOP AT IT_USH02_TMP INTO WA_USH02.
      READ TABLE IT_USH02_TMP1 INTO WA_USH02_TMP "How do we ensure only topmost line is copied
      WITH KEY MANDT = WA_USH02-MANDT BNAME = WA_USH02-BNAME MODDA = WA_USH02-MODDA BINARY SEARCH.
      APPEND WA_USH02_TMP TO IT_USH02.
      CLEAR WA_USH02.
      CLEAR WA_USH02_TMP.
    ENDLOOP.
    FREE IT_USH02_TMP.
    FREE IT_USH02_TMP1.

    SELECT
    MANDT
    BNAME
    MODDA
    MODTI
    MODBE
    TCODE
    REPID
    GLTGV
    GLTGB
    USTYP
    CLASS
    UFLAG
    ACCNT
    FROM USH02  CLIENT SPECIFIED
    APPENDING TABLE IT_USH02
    WHERE MANDT =  S_PCLIEN AND MODDA >= S_START AND MODDA <= S_END.

    SORT IT_USH02 BY MANDT BNAME MODDA MODTI .

    LV_FILE = 'USH02.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_USH02-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-BNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODDA' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-MODDA
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODTI' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-MODTI
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODBE' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-MODBE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TCODE' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-TCODE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'REPID' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-REPID
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-GLTGV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGB' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-GLTGB
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-USTYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CLASS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-CLASS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-UFLAG
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ACCNT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-ACCNT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.

    lv_USH02 = lv_USH02 + LINES( it_USH02 ) .
  IF lv_USH02 GT 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USH02
      USING LV_FILE
       LS_TABLE .
      FREE IT_USH02 .
      FREE IT_USH02_TMP.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.



READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'RSAUPROF'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  PROFNAME
  SLOTNO
  CURRPROF
  CLASSES
  SEVERITY
  CLIENT
  UNAME
  STATUS
  CUNAME
  CDATE
  SELVAR
  MSGVECT
  FROM RSAUPROF
  INTO TABLE IT_RSAUPROF
  .
  LV_FILE = 'RSAUPROF.ACTT'.
  LS_TABLE = 'PROFNAME'.
  DESCRIBE FIELD WA_RSAUPROF-PROFNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SLOTNO' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-SLOTNO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CURRPROF' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CURRPROF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CLASSES' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CLASSES
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SEVERITY' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-SEVERITY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CLIENT' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CLIENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-UNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-STATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CUNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CUNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CDATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CDATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SELVAR' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-SELVAR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGVECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-MSGVECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_RSAUPROF = LINES( IT_RSAUPROF ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_RSAUPROF
    USING LV_FILE
     LS_TABLE .
    FREE IT_RSAUPROF.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'AGR_TEXTS'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD s_cursor FOR
  SELECT
  MANDT
  agr_name
  text
  spras
  line
  FROM agr_texts  CLIENT SPECIFIED
*  INTO TABLE it_agr_texts
  WHERE MANDT = s_pclien AND spras = 'EN' AND LINE = '0000'
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR s_cursor
    APPENDING TABLE it_agr_texts
    PACKAGE SIZE maxsize.
    IF sy-subrc <> 0.
      CLOSE CURSOR s_cursor.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  lv_file = 'AGR_TEXTS.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_agr_texts-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AGR_NAME' INTO ls_table.
  DESCRIBE FIELD wa_agr_texts-agr_name
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TEXT' INTO ls_table.
  DESCRIBE FIELD wa_agr_texts-text
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_agr_texts-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LINE' INTO ls_table.
  DESCRIBE FIELD wa_agr_texts-line
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_agr_texts = LINES( it_agr_texts ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_agr_texts
    USING lv_file
     ls_table .
    FREE it_agr_texts.
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.

READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'TBTCO'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
    SELECT
    JOBNAME
    JOBCOUNT
    SDLSTRTDT
    SDLSTRTTM
    SDLUNAME
    STATUS
    ENDDATE
    ENDTIME
    LASTCHDATE
    LASTCHTIME
    LASTCHNAME
    FROM TBTCO
* INTO TABLE IT_TBTCO
    WHERE STATUS = 'A' AND SDLSTRTDT >= S_START AND SDLSTRTDT <= S_END
    .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_TBTCO
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'TBTCO.ACTT'.
    LS_TABLE = 'JOBNAME'.
    DESCRIBE FIELD WA_TBTCO-JOBNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'JOBCOUNT' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-JOBCOUNT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SDLSTRTDT' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-SDLSTRTDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SDLSTRTTM' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-SDLSTRTTM
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SDLUNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-SDLUNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'STATUS' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-STATUS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ENDDATE' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-ENDDATE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ENDTIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-ENDTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LASTCHDATE' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-LASTCHDATE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LASTCHTIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-LASTCHTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LASTCHNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-LASTCHNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_TBTCO = LINES( IT_TBTCO ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_TBTCO
      USING LV_FILE
       LS_TABLE .
      FREE IT_TBTCO.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'CDHDR'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
*** Begin of Change by Srinivas
    PERFORM sub_cdhdr_cdpos.
*** End of Change by Srinivas
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'PRF_CHI'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
    PERFORM sub_PRF_CHI.
  ENDIF.
***** End of Code for PRF_CHI.*****
* --------------------------------------------------------------------------------------- *


  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'E070'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
SELECT
TRKORR
TRFUNCTION
TRSTATUS
TARSYSTEM
KORRDEV
AS4USER
AS4DATE
AS4TIME
STRKORR
FROM E070
* INTO TABLE IT_E070
WHERE AS4DATE >= S_START AND AS4DATE <= S_END
.
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_E070
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'E070.ACTT'.
    LS_TABLE = 'TRKORR'.
    DESCRIBE FIELD WA_E070-TRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRFUNCTION' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-TRFUNCTION
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRSTATUS' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-TRSTATUS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TARSYSTEM' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-TARSYSTEM
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'KORRDEV' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-KORRDEV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4USER' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-AS4USER
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4DATE' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-AS4DATE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4TIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-AS4TIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'STRKORR' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-STRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    lv_E070 = lv_E070 + LINES( it_E070 ) .
  IF lv_E070 GT 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_E070
      USING LV_FILE
       LS_TABLE .

      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'E070'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    IF IT_E070 IS NOT INITIAL.
*** Begin of change by SUDHA
      OPEN CURSOR WITH HOLD S_CURSOR FOR
        SELECT
        TRKORR
        LANGU
        AS4TEXT
        FROM E07T
* INTO TABLE IT_E07T
        FOR ALL ENTRIES IN IT_E070
        WHERE TRKORR = IT_E070-TRKORR
        AND LANGU = SY-LANGU
        .

    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_E07T
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
ENDIF.
*** End of change by SUDHA

    LV_FILE = 'E07T.ACTT'.
    LS_TABLE = 'TRKORR'.
    DESCRIBE FIELD WA_E07T-TRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LANGU' INTO LS_TABLE.
    DESCRIBE FIELD WA_E07T-LANGU
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4TEXT' INTO LS_TABLE.
    DESCRIBE FIELD WA_E07T-AS4TEXT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_E07T = LINES( IT_E07T ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_E07T
      USING LV_FILE
       LS_TABLE .

      FREE IT_E07T .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.


  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'E070'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    IF IT_E070 IS NOT INITIAL.
*** BEGIN OF CHANGE BY SUDHA
      OPEN CURSOR WITH HOLD S_CURSOR FOR

             SELECT
             TRTIME
             TRKORR
             TARSYSTEM
             TRCLI
             TRSTEP
             ALLCLI
             PROJECT
             TRUSER
             RETCODE
             HOST
             ADMIN
             TPSTAT_KEY
             FROM TPALOG
* INTO TABLE IT_TPALOG
             FOR ALL ENTRIES IN IT_E070
             WHERE TRCLI = S_PCLIEN AND TRSTEP = 'I' AND TRKORR = IT_E070-TRKORR
             .

    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_TPALOG
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
 ENDIF.
*** End of change by SUDHA

    LV_FILE = 'TPALOG.ACTT'.
    LS_TABLE = 'TRTIME'.
    DESCRIBE FIELD WA_TPALOG-TRTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRKORR' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TARSYSTEM' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TARSYSTEM
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRCLI' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRCLI
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRSTEP' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRSTEP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ALLCLI' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-ALLCLI
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROJECT' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-PROJECT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRUSER' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRUSER
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'RETCODE' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-RETCODE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'HOST' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-HOST
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ADMIN' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-ADMIN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TPSTAT_KEY' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TPSTAT_KEY
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_TPALOG = LINES( IT_TPALOG ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_TPALOG
      USING LV_FILE
       LS_TABLE .
      FREE IT_TPALOG .
      FREE IT_E070 .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'SSM_CIDT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  TABNAME
  ID
  STEXT
  LANGU
  FROM SSM_CIDT
  INTO TABLE IT_SSM_CIDT
  WHERE TABNAME = 'PRGN_CUST' AND LANGU = 'EN' AND ( ID IN ('CHECK_S_USER_SAS', 'ASSIGN_ROLE_AUTH') )
  .
  LV_FILE = 'SSM_CIDT.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_SSM_CIDT-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ID' INTO LS_TABLE.
  DESCRIBE FIELD WA_SSM_CIDT-ID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_SSM_CIDT-STEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LANGU' INTO LS_TABLE.
  DESCRIBE FIELD WA_SSM_CIDT-LANGU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_SSM_CIDT = LINES( IT_SSM_CIDT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_SSM_CIDT
    USING LV_FILE
     LS_TABLE .
    FREE IT_SSM_CIDT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.


READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'DD09L'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
    TABNAME
    PROTOKOLL
    AS4LOCAL
    FROM DD09L
    INTO TABLE IT_DD09L
    WHERE ( TABNAME IN ('T095', 'T095B', 'ANLZ', 'T000', 'DEVACCESS' ,
       'T001B', 'TCURR', 'T169G', 'T001', 'TADIR', 'PAHI')
      )
    .
  LV_FILE = 'DD09L.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_DD09L-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROTOKOLL' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD09L-PROTOKOLL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AS4LOCAL' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD09L-AS4LOCAL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DD09L = LINES( IT_DD09L ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DD09L
    USING LV_FILE
    LS_TABLE .
    FREE IT_DD09L .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'PRGN_CUST'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  ID
  PATH
  FROM PRGN_CUST
  INTO TABLE IT_PRGN_CUST
  .
  LV_FILE = 'PRGN_CUST.ACTT'.
  LS_TABLE = 'ID'.
  DESCRIBE FIELD WA_PRGN_CUST-ID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PATH' INTO LS_TABLE.
  DESCRIBE FIELD WA_PRGN_CUST-PATH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_PRGN_CUST = LINES( IT_PRGN_CUST ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_PRGN_CUST
    USING LV_FILE
     LS_TABLE .
    FREE IT_PRGN_CUST .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'RSTRACTIVE'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_RSTRACTIVE = 'Yes'.
    DATA: COLUMN_RSTRACTIVE TYPE STRING.
    DATA TABLE_RSTRACTIVE TYPE STRING.
    COLUMN_RSTRACTIVE = 'TLOGO CODE CHANGEABLE'.
    TABLE_RSTRACTIVE = 'RSTRACTIVE'.
    SELECT
   (COLUMN_RSTRACTIVE)
    FROM (TABLE_RSTRACTIVE)
    INTO TABLE IT_RSTRACTIVE.

 LV_FILE = 'RSTRACTIVE.ACTT'.
  LS_TABLE = 'TLOGO'.
  DESCRIBE FIELD WA_RSTRACTIVE-TLOGO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CODE' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSTRACTIVE-CODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CHANGEABLE' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSTRACTIVE-CHANGEABLE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_RSTRACTIVE = LINES( IT_RSTRACTIVE ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_RSTRACTIVE
    USING LV_FILE
    LS_TABLE .
    FREE IT_RSTRACTIVE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.
ENDIF.


  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'SEC_POLICY_RT'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_SEC_POLICY_RT = 'Yes'.
    DATA: COLUMN_SEC_POLICY_RT TYPE STRING.
    DATA TABLE_SEC_POLICY_RT TYPE STRING.
    COLUMN_SEC_POLICY_RT = 'CLIENT NAME ATTRIB_KEY ATTRIB_VALUE'.
    TABLE_SEC_POLICY_RT = 'SEC_POLICY_RT'.
    SELECT
    (COLUMN_SEC_POLICY_RT)
    FROM (TABLE_SEC_POLICY_RT)  CLIENT SPECIFIED
    INTO TABLE IT_SEC_POLICY_RT
    .
    LV_FILE = 'SEC_POLICY_RT.ACTT'.
    LS_TABLE = 'CLIENT'.
    DESCRIBE FIELD WA_SEC_POLICY_RT-CLIENT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'NAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_RT-NAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ATTRIB_KEY' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_RT-ATTRIB_KEY
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ATTRIB_VALUE' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_RT-ATTRIB_VALUE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_SEC_POLICY_RT = LINES( IT_SEC_POLICY_RT ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_SEC_POLICY_RT
      USING LV_FILE
       LS_TABLE .
      FREE IT_SEC_POLICY_RT .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .

    ENDIF.

  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'SEC_POLICY_CUSTT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_SEC_POLICY_CUSTT = 'Yes'.

    DATA: COLUMN_SEC_POLICY_CUSTT TYPE STRING.
    DATA: TABLE_SEC_POLICY_CUSTT TYPE STRING.

    COLUMN_SEC_POLICY_CUSTT = 'CLIENT LANGU POLICY_NAME POLICY_TEXT'.
    TABLE_SEC_POLICY_CUSTT = 'SEC_POLICY_CUSTT'.

    SELECT
      (COLUMN_SEC_POLICY_CUSTT)
    FROM (TABLE_SEC_POLICY_CUSTT)  CLIENT SPECIFIED
    INTO TABLE IT_SEC_POLICY_CUSTT
    WHERE LANGU = 'EN'
    .
    LV_FILE = 'SEC_POLICY_CUSTT.ACTT'.
    LS_TABLE = 'CLIENT'.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-CLIENT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LANGU' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-LANGU
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'POLICY_NAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-POLICY_NAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'POLICY_TEXT' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-POLICY_TEXT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_SEC_POLICY_CUSTT = LINES( IT_SEC_POLICY_CUSTT ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_SEC_POLICY_CUSTT
      USING LV_FILE
       LS_TABLE .
      FREE IT_SEC_POLICY_CUSTT .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .

    ENDIF.

  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TSL1D'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  AREA
  SUBID
  CLASID
  SUBCLASID
  SEVERITY
  MONBEW
  MONKAT
  FROM TSL1D
  INTO TABLE IT_TSL1D
  .
  LV_FILE = 'TSL1D.ACTT'.
  LS_TABLE = 'AREA'.
  DESCRIBE FIELD WA_TSL1D-AREA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-SUBID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CLASID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-CLASID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBCLASID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-SUBCLASID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SEVERITY' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-SEVERITY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MONBEW' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-MONBEW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MONKAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-MONKAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSL1D = LINES( IT_TSL1D ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSL1D
    USING LV_FILE
     LS_TABLE .
    FREE IT_TSL1D.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TSL1T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  SPRAS
  AREA
  SUBID
  TXT
  FROM TSL1T
  INTO TABLE IT_TSL1T
    WHERE SPRAS = 'EN'
  .
  LV_FILE = 'TSL1T.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_TSL1T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AREA' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1T-AREA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1T-SUBID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1T-TXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSL1T = LINES( IT_TSL1T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSL1T
    USING LV_FILE
     LS_TABLE .
    FREE IT_TSL1T.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'USOBHASH'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_USOBHASH = 'Yes'.
    DATA: COLUMN_USOBHASH TYPE STRING.
    DATA TABLE_USOBHASH TYPE STRING.
    COLUMN_USOBHASH = 'NAME OBJECT OBJ_NAME'.
    TABLE_USOBHASH = 'USOBHASH'.
    SELECT
   (COLUMN_USOBHASH)
    FROM (TABLE_USOBHASH)
    INTO TABLE IT_USOBHASH
  WHERE OBJECT IN ('IWSV','WDYA')
    .
    LV_FILE = 'USOBHASH.ACTT'.
    ls_table = 'NAME'.
  DESCRIBE FIELD wa_USOBHASH-NAME
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'OBJECT' INTO ls_table.
  DESCRIBE FIELD wa_USOBHASH-OBJECT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'OBJ_NAME' INTO ls_table.
  DESCRIBE FIELD wa_USOBHASH-OBJ_NAME
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
   lv_USOBHASH = LINES( it_USOBHASH ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_USOBHASH
    USING lv_file
     ls_table .
    FREE it_USOBHASH.
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'SAPWLSERV'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  NAME
  INSTNO
  HOST
  LASTDAY
  INSTSHORT
  HOSTSHORT
  FROM SAPWLSERV
  INTO TABLE IT_SAPWLSERV
  .
  LV_FILE = 'SAPWLSERV.ACTT'.
  LS_TABLE = 'NAME'.
  DESCRIBE FIELD WA_SAPWLSERV-NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'INSTNO' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-INSTNO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HOST' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-HOST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LASTDAY' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-LASTDAY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'INSTSHORT' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-INSTSHORT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HOSTSHORT' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-HOSTSHORT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_SAPWLSERV = LINES( IT_SAPWLSERV ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_SAPWLSERV
    USING LV_FILE
     LS_TABLE .
    FREE IT_SAPWLSERV.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.


* Old Report Code Begin*
************************************************************************
* Report       :ZBCC_GCC_DEFAULTSAPR3_PASSWORD                         *
* Title        :Default SAP R/3 password                               *
* Rule ID      :1906                                                   *
* Purpose      :This program lists whether default SAP R/3 passwords   *
*               for SAP*, DDIC, SAPCPIC, and EarlyWatch (in client 066)*
*                are changed.                                          *
* Version      : v01                                                   *
* Author       : Prema Nalam           - Deloitte and Touche.          *
* Creation Date: 13/06/2007                                            *
* Kintana Req  : 41741                                                 *
*                                                                      *
************************************************************************
*                                                                      *
*            Copyright (c) 2001 by Deloitte & Touche                   *
*                      All rights reserved                             *
*                                                                      *
************************************************************************
* No part of this program may be used or reproduced in any form by any *
* means without written permission from Deloitte & Touche.             *
*                                                                      *
* This is confidential and proprietary information that may not be     *
* published, disclosed, or made available without the prior written    *
* consent of Deloitte & Touche.                                        *
*                                                                      *
************************************************************************
* Modification Log                                                     *
*                                                                      *
* Vrsn    Date           Name         Correction            Kintana    *
*----------------------------------------------------------------------*
*  1    07/04        Vidyadhar      Performance Analysis               *
*                                                                      *
************************************************************************

  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'RSUSR003'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  CONCATENATE P_FILE 'BCC_GCC_Default_SAPR3_Password.ACTT' INTO P_1906 .
**perform to get the data.
  PERFORM GET_DATA_1906.
**perform to display the data.
  PERFORM DISPLAY_DATA_1906.
*  Old Report Code End*
  ENDIF.


******* Release 16 - Begin -- All Non ECC tables added with option of Skipping, Exclusion and Chunking**************
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'ANLA'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_ANLA = 'Yes'.
    DATA: COLUMN_ANLA TYPE STRING.
    DATA TABLE_ANLA TYPE STRING.
    CONCATENATE   'MANDT BUKRS ANLN1 ANLN2 ANLKL ERNAM'
                  ' ERDAT AENAM AEDAT KTOGR'
                  ' ZUGDT AKTIV ABGDT DEAKT'
                  ' TXT50 TXA50'  INTO column_anla.

    TABLE_ANLA = 'ANLA'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_ANLA)
   FROM (TABLE_ANLA)
   WHERE mandt =  s_pclien AND SPRAS = 'EN'
  .
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_ANLA
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ELSE.
          IF rb_fore IS INITIAL.
            PERFORM SUB_DOWNLOAD_ANLA.
          ENDIF.
      ENDIF.

    ENDDO.
.
.
      IF rb_fore IS NOT INITIAL AND IT_ANLA IS NOT INITIAL .
        PERFORM SUB_DOWNLOAD_ANLA.
      ENDIF.
    ENDIF.
   ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'ANKA'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_ANKA = 'Yes'.
    DATA: COLUMN_ANKA TYPE STRING.
    DATA TABLE_ANKA TYPE STRING.
    COLUMN_ANKA = 'MANDT ANLKL KTOGR FELEI ANEQK NUMKR XSPEA XUNTV'.
    TABLE_ANKA = 'ANKA'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_ANKA)
   FROM (TABLE_ANKA)
   WHERE mandt =  s_pclien
  .
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_ANKA
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
  lv_file = 'ANKA.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_anka-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANLKL' INTO ls_table.
  DESCRIBE FIELD wa_anka-anlkl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOGR' INTO ls_table.
  DESCRIBE FIELD wa_anka-ktogr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FELEI' INTO ls_table.
  DESCRIBE FIELD wa_anka-felei
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANEQK' INTO ls_table.
  DESCRIBE FIELD wa_anka-aneqk
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'NUMKR' INTO ls_table.
  DESCRIBE FIELD wa_anka-numkr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XSPEA' INTO ls_table.
  DESCRIBE FIELD wa_anka-xspea
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XUNTV' INTO ls_table.
  DESCRIBE FIELD wa_anka-xuntv
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_ANKA = lv_ANKA + LINES( it_ANKA ) .
  IF lv_ANKA GT 0.
    PERFORM conv_table_to_text TABLES it_anka
    USING lv_file
    ls_table .
    FREE IT_ANKA .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'ANKB'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_ANKB = 'Yes'.
    DATA: COLUMN_ANKB TYPE STRING.
    DATA TABLE_ANKB TYPE STRING.
    COLUMN_ANKB = 'MANDT ANLKL AFAPL AFABE BDATU ADATU ERNAM ERDAT AENAM AEDAT XSPEB XLOEV FELEI KTOGR XNEGA XGWGK MINDJ MINDP MAXDJ MAXDP INVSL AFASL NDJAR NDPER NAPRZ SAPRZ WBIND ALIND APROP'.
    TABLE_ANKB = 'ANKB'.
OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
      (COLUMN_ANKB)
FROM (TABLE_ANKB)
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_ANKB
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
    .
    .
lv_file = 'ANKB.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_ANKB-mandt
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ANLKL' into ls_table.
DESCRIBE FIELD WA_ANKB-anlkl
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFAPL' into ls_table.
DESCRIBE FIELD WA_ANKB-afapl
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFABE' into ls_table.
DESCRIBE FIELD WA_ANKB-afabe
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BDATU' into ls_table.
DESCRIBE FIELD WA_ANKB-bdatu
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ADATU' into ls_table.
DESCRIBE FIELD WA_ANKB-adatu
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERNAM' into ls_table.
DESCRIBE FIELD WA_ANKB-ernam
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERDAT' into ls_table.
DESCRIBE FIELD WA_ANKB-erdat
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AENAM' into ls_table.
DESCRIBE FIELD WA_ANKB-aenam
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AEDAT' into ls_table.
DESCRIBE FIELD WA_ANKB-aedat
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSPEB' into ls_table.
DESCRIBE FIELD WA_ANKB-xspeb
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XLOEV' into ls_table.
DESCRIBE FIELD WA_ANKB-xloev
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FELEI' into ls_table.
DESCRIBE FIELD WA_ANKB-felei
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOGR' into ls_table.
DESCRIBE FIELD WA_ANKB-ktogr
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XNEGA' into ls_table.
DESCRIBE FIELD WA_ANKB-xnega
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XGWGK' into ls_table.
DESCRIBE FIELD WA_ANKB-xgwgk
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MINDJ' into ls_table.
DESCRIBE FIELD WA_ANKB-mindj
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MINDP' into ls_table.
DESCRIBE FIELD WA_ANKB-mindp
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MAXDJ' into ls_table.
DESCRIBE FIELD WA_ANKB-maxdj
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MAXDP' into ls_table.
DESCRIBE FIELD WA_ANKB-maxdp
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'INVSL' into ls_table.
DESCRIBE FIELD WA_ANKB-invsl
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFASL' into ls_table.
DESCRIBE FIELD WA_ANKB-afasl
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NDJAR' into ls_table.
DESCRIBE FIELD WA_ANKB-ndjar
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NDPER' into ls_table.
DESCRIBE FIELD WA_ANKB-ndper
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NAPRZ' into ls_table.
DESCRIBE FIELD WA_ANKB-naprz
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAPRZ' into ls_table.
DESCRIBE FIELD WA_ANKB-saprz
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WBIND' into ls_table.
DESCRIBE FIELD WA_ANKB-wbind
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ALIND' into ls_table.
DESCRIBE FIELD WA_ANKB-alind
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'APROP' into ls_table.
DESCRIBE FIELD WA_ANKB-aprop
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_ANKB = lv_ANKB + LINES( it_ANKB ) .
  IF lv_ANKB GT 0.
perform conv_table_to_text tables it_ANKB
using lv_file
 ls_table .
FREE IT_ANKB .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'ANKT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_ANKT = 'Yes'.
    DATA: COLUMN_ANKT TYPE STRING.
    DATA TABLE_ANKT TYPE STRING.
    COLUMN_ANKT = 'MANDT SPRAS ANLKL TXK50'.
    TABLE_ANKT = 'ANKT'.
OPEN CURSOR WITH HOLD s_cursor FOR
  SELECT
       (COLUMN_ANKT)
   FROM (TABLE_ANKT)
   WHERE mandt =  s_pclien AND spras = 'EN'
  .
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_ANKT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'ANKT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_ankt-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_ankt-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANLKL' INTO ls_table.
  DESCRIBE FIELD wa_ankt-anlkl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TXK50' INTO ls_table.
  DESCRIBE FIELD wa_ankt-txk50
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_ankt = LINES( it_ankt ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_ankt
    USING lv_file
    ls_table .
    FREE it_ankt .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'ANLB'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_ANLB = 'Yes'.
    DATA: COLUMN_ANLB TYPE STRING.
    DATA TABLE_ANLB TYPE STRING.
    COLUMN_ANLB = 'MANDT BUKRS ANLN1 ANLN2 AFABE XLOEV XSPEB AFASL NDJAR NDPER'.
    TABLE_ANLB = 'ANLB'.

OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
       (COLUMN_ANLB)
   FROM (TABLE_ANLB)
WHERE MANDT =  S_pclien.
.
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_ANLB
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_ANLB.
      ENDIF.
      ENDIF.

    ENDDO.
.
.
  IF rb_fore IS NOT INITIAL AND IT_ANLB IS NOT INITIAL.
    PERFORM SUB_DOWNLOAD_ANLB.
  ENDIF.
 ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'C001'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_C001 = 'Yes'.
    DATA: COLUMN_C001 TYPE STRING.
    DATA TABLE_C001 TYPE STRING.
    COLUMN_C001 = 'MANDT KAPPL KSCHL KTOPL VKORG KTGRD KTGRM KVSL1 SAKN1 SAKN2'.
    TABLE_C001 = 'C001'.

OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
      (COLUMN_C001)
FROM  (TABLE_C001)
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_C001
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'C001.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_C001-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_C001-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_C001-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOPL' into ls_table.
DESCRIBE FIELD WA_C001-KTOPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKORG' into ls_table.
DESCRIBE FIELD WA_C001-VKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTGRD' into ls_table.
DESCRIBE FIELD WA_C001-KTGRD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTGRM' into ls_table.
DESCRIBE FIELD WA_C001-KTGRM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVSL1' into ls_table.
DESCRIBE FIELD WA_C001-KVSL1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN1' into ls_table.
DESCRIBE FIELD WA_C001-SAKN1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN2' into ls_table.
DESCRIBE FIELD WA_C001-SAKN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_C001 = lines( it_C001 ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_C001
using lv_file
 ls_table .
FREE IT_C001.
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'C002'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_C002 = 'Yes'.
    DATA: COLUMN_C002 TYPE STRING.
    DATA TABLE_C002 TYPE STRING.
    COLUMN_C002 = 'MANDT KAPPL KSCHL KTOPL VKORG KTGRD KVSL1 SAKN1 SAKN2'.
    TABLE_C002 = 'C002'.

  OPEN CURSOR WITH HOLD s_cursor FOR
  SELECT
        (COLUMN_C002)
  FROM  (TABLE_C002) CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_C002
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'C002.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_C002-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_C002-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_C002-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOPL' into ls_table.
DESCRIBE FIELD WA_C002-KTOPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKORG' into ls_table.
DESCRIBE FIELD WA_C002-VKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTGRD' into ls_table.
DESCRIBE FIELD WA_C002-KTGRD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVSL1' into ls_table.
DESCRIBE FIELD WA_C002-KVSL1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN1' into ls_table.
DESCRIBE FIELD WA_C002-SAKN1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN2' into ls_table.
DESCRIBE FIELD WA_C002-SAKN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_C002 = lines( it_C002 ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_C002
using lv_file
 ls_table .
FREE IT_C002.
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'C003'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_C003 = 'Yes'.
    DATA: COLUMN_C003 TYPE STRING.
    DATA TABLE_C003 TYPE STRING.
    COLUMN_C003 = 'MANDT KAPPL KSCHL KTOPL VKORG KTGRM KVSL1 SAKN1 SAKN2'.
    TABLE_C003 ='C003'.
  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_C003)
FROM (TABLE_C003)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE it_c003
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'C003.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_C003-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_C003-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_C003-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOPL' into ls_table.
DESCRIBE FIELD WA_C003-KTOPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKORG' into ls_table.
DESCRIBE FIELD WA_C003-VKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTGRM' into ls_table.
DESCRIBE FIELD WA_C003-KTGRM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVSL1' into ls_table.
DESCRIBE FIELD WA_C003-KVSL1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN1' into ls_table.
DESCRIBE FIELD WA_C003-SAKN1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN2' into ls_table.
DESCRIBE FIELD WA_C003-SAKN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_C003 = lines( it_C003 ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_C003
using lv_file
 ls_table .
FREE it_c003.
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'C004'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_C004 = 'Yes'.
    DATA: COLUMN_C004 TYPE STRING.
    DATA TABLE_C004 TYPE STRING.
    COLUMN_C004 = 'MANDT KAPPL KSCHL KTOPL VKORG SAKN1 SAKN2'.
    TABLE_C004 = 'C004'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_C004)
FROM (TABLE_C004)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE it_c004
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'C004.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_C004-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_C004-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_C004-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOPL' into ls_table.
DESCRIBE FIELD WA_C004-KTOPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKORG' into ls_table.
DESCRIBE FIELD WA_C004-VKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN1' into ls_table.
DESCRIBE FIELD WA_C004-SAKN1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN2' into ls_table.
DESCRIBE FIELD WA_C004-SAKN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_C004 = lines( it_C004 ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_C004
using lv_file
 ls_table .
FREE it_c004.
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'C005'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_C005 = 'Yes'.
    DATA: COLUMN_C005 TYPE STRING.
    DATA TABLE_C005 TYPE STRING.
    COLUMN_C005 = 'MANDT KAPPL KSCHL KTOPL VKORG KVSL1 SAKN1 SAKN2'.
    TABLE_C005 = 'C005'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_C005)
FROM (TABLE_C005)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE it_c005
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'C005.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_C005-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_C005-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_C005-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOPL' into ls_table.
DESCRIBE FIELD WA_C005-KTOPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKORG' into ls_table.
DESCRIBE FIELD WA_C005-VKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVSL1' into ls_table.
DESCRIBE FIELD WA_C005-KVSL1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN1' into ls_table.
DESCRIBE FIELD WA_C005-SAKN1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKN2' into ls_table.
DESCRIBE FIELD WA_C005-SAKN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_C005 = lines( it_C005 ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_C005
using lv_file
 ls_table .
FREE it_c005.
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'MARV'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_MARV = 'Yes'.
    DATA: COLUMN_MARV TYPE STRING.
    DATA TABLE_MARV TYPE STRING.
    COLUMN_MARV = 'MANDT BUKRS LFGJA LFMON XRUEM XRUEV'.
    TABLE_MARV = 'MARV'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_MARV)
FROM (TABLE_MARV)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_MARV
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'MARV.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_marv-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_marv-bukrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LFGJA' INTO ls_table.
  DESCRIBE FIELD wa_marv-lfgja
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LFMON' INTO ls_table.
  DESCRIBE FIELD wa_marv-lfmon
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XRUEM' INTO ls_table.
  DESCRIBE FIELD wa_marv-xruem
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XRUEV' INTO ls_table.
  DESCRIBE FIELD wa_marv-xruev
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_marv = LINES( it_marv ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_marv
    USING lv_file
    ls_table .
    FREE IT_MARV .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'NRIV'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_NRIV = 'Yes'.
    DATA: COLUMN_NRIV TYPE STRING.
    DATA TABLE_NRIV TYPE STRING.
    COLUMN_NRIV = 'CLIENT OBJECT SUBOBJECT NRRANGENR TOYEAR FROMNUMBER TONUMBER NRLEVEL EXTERNIND'.
    TABLE_NRIV = 'NRIV'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_NRIV)
FROM (TABLE_NRIV)  CLIENT SPECIFIED
WHERE CLIENT =  S_pclien AND ( OBJECT IN ('ANLAGENNR', 'RF_BELEG') )
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_NRIV
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'NRIV.ACTT'.
  ls_table = 'CLIENT'.
  DESCRIBE FIELD wa_nriv-client
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'OBJECT' INTO ls_table.
  DESCRIBE FIELD wa_nriv-object
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SUBOBJECT' INTO ls_table.
  DESCRIBE FIELD wa_nriv-subobject
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'NRRANGENR' INTO ls_table.
  DESCRIBE FIELD wa_nriv-nrrangenr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOYEAR' INTO ls_table.
  DESCRIBE FIELD wa_nriv-toyear
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FROMNUMBER' INTO ls_table.
  DESCRIBE FIELD wa_nriv-fromnumber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TONUMBER' INTO ls_table.
  DESCRIBE FIELD wa_nriv-tonumber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'NRLEVEL' INTO ls_table.
  DESCRIBE FIELD wa_nriv-nrlevel
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'EXTERNIND' INTO ls_table.
  DESCRIBE FIELD wa_nriv-externind
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_NRIV = lv_NRIV + LINES( it_NRIV ) .
  IF lv_NRIV GT 0.
    PERFORM conv_table_to_text TABLES it_nriv
    USING lv_file
    ls_table .
    FREE it_nriv .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'SKA1'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_SKA1 = 'Yes'.
    DATA: COLUMN_SKA1 TYPE STRING.
    DATA TABLE_SKA1 TYPE STRING.
    COLUMN_SKA1 = 'MANDT KTOPL SAKNR XBILK SAKAN BILKT ERDAT ERNAM GVTYP KTOKS MUSTR VBUND XLOEV XSPEA XSPEB XSPEP MCOD1'.
    TABLE_SKA1 = 'SKA1'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_SKA1)
FROM (TABLE_SKA1)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_SKA1
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'SKA1.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_SKA1-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOPL' into ls_table.
DESCRIBE FIELD WA_SKA1-KTOPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKNR' into ls_table.
DESCRIBE FIELD WA_SKA1-SAKNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XBILK' into ls_table.
DESCRIBE FIELD WA_SKA1-XBILK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKAN' into ls_table.
DESCRIBE FIELD WA_SKA1-SAKAN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BILKT' into ls_table.
DESCRIBE FIELD WA_SKA1-BILKT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERDAT' into ls_table.
DESCRIBE FIELD WA_SKA1-ERDAT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERNAM' into ls_table.
DESCRIBE FIELD WA_SKA1-ERNAM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GVTYP' into ls_table.
DESCRIBE FIELD WA_SKA1-GVTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOKS' into ls_table.
DESCRIBE FIELD WA_SKA1-KTOKS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MUSTR' into ls_table.
DESCRIBE FIELD WA_SKA1-MUSTR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VBUND' into ls_table.
DESCRIBE FIELD WA_SKA1-VBUND
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XLOEV' into ls_table.
DESCRIBE FIELD WA_SKA1-XLOEV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSPEA' into ls_table.
DESCRIBE FIELD WA_SKA1-XSPEA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSPEB' into ls_table.
DESCRIBE FIELD WA_SKA1-XSPEB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSPEP' into ls_table.
DESCRIBE FIELD WA_SKA1-XSPEP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MCOD1' into ls_table.
DESCRIBE FIELD WA_SKA1-MCOD1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_SKA1 = lv_SKA1 + LINES( it_SKA1 ) .
  IF lv_SKA1 GT 0.
perform conv_table_to_text tables it_SKA1
using lv_file
 ls_table .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'SKAT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_SKAT = 'Yes'.
    DATA: COLUMN_SKAT TYPE STRING.
    DATA TABLE_SKAT TYPE STRING.
    COLUMN_SKAT = 'MANDT SPRAS KTOPL SAKNR TXT50'.
    TABLE_SKAT = 'SKAT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_SKAT)
FROM (TABLE_SKAT)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_SKAT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'SKAT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_skat-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_skat-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_skat-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SAKNR' INTO ls_table.
  DESCRIBE FIELD wa_skat-saknr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TXT50' INTO ls_table.
  DESCRIBE FIELD wa_skat-txt50
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_skat = LINES( it_skat ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_skat
    USING lv_file
    ls_table .
    FREE it_skat .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'SKB1'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_SKB1 = 'Yes'.
    DATA: COLUMN_SKB1 TYPE STRING.
    DATA TABLE_SKB1 TYPE STRING.
    CONCATENATE 'MANDT BUKRS SAKNR BEGRU BUSAB DATLZ ERDAT ERNAM'
                  ' FDGRV FDLEV FIPLS FSTAG HBKID HKTID KDFSL MITKZ'
                  ' MWSKZ STEXT VZSKZ WAERS WMETH XGKON XINTB XKRES'
                  ' XLOEB XNKON XOPVW XSPEB ZINDT ZINRT ZUAWA ALTKT'
                  ' XMITK RECID FIPOS XMWNO XSALH BEWGP INFKY TOGRU' INTO COLUMN_SKB1.
    TABLE_SKB1 = 'SKB1'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_SKB1)
FROM (TABLE_SKB1)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_SKB1
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
.
lv_file = 'SKB1.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_SKB1-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUKRS' into ls_table.
DESCRIBE FIELD WA_SKB1-BUKRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SAKNR' into ls_table.
DESCRIBE FIELD WA_SKB1-SAKNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BEGRU' into ls_table.
DESCRIBE FIELD WA_SKB1-BEGRU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUSAB' into ls_table.
DESCRIBE FIELD WA_SKB1-BUSAB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'DATLZ' into ls_table.
DESCRIBE FIELD WA_SKB1-DATLZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERDAT' into ls_table.
DESCRIBE FIELD WA_SKB1-ERDAT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERNAM' into ls_table.
DESCRIBE FIELD WA_SKB1-ERNAM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FDGRV' into ls_table.
DESCRIBE FIELD WA_SKB1-FDGRV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FDLEV' into ls_table.
DESCRIBE FIELD WA_SKB1-FDLEV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FIPLS' into ls_table.
DESCRIBE FIELD WA_SKB1-FIPLS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FSTAG' into ls_table.
DESCRIBE FIELD WA_SKB1-FSTAG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'HBKID' into ls_table.
DESCRIBE FIELD WA_SKB1-HBKID
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'HKTID' into ls_table.
DESCRIBE FIELD WA_SKB1-HKTID
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KDFSL' into ls_table.
DESCRIBE FIELD WA_SKB1-KDFSL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MITKZ' into ls_table.
DESCRIBE FIELD WA_SKB1-MITKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MWSKZ' into ls_table.
DESCRIBE FIELD WA_SKB1-MWSKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STEXT' into ls_table.
DESCRIBE FIELD WA_SKB1-STEXT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VZSKZ' into ls_table.
DESCRIBE FIELD WA_SKB1-VZSKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WAERS' into ls_table.
DESCRIBE FIELD WA_SKB1-WAERS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WMETH' into ls_table.
DESCRIBE FIELD WA_SKB1-WMETH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XGKON' into ls_table.
DESCRIBE FIELD WA_SKB1-XGKON
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XINTB' into ls_table.
DESCRIBE FIELD WA_SKB1-XINTB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XKRES' into ls_table.
DESCRIBE FIELD WA_SKB1-XKRES
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XLOEB' into ls_table.
DESCRIBE FIELD WA_SKB1-XLOEB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XNKON' into ls_table.
DESCRIBE FIELD WA_SKB1-XNKON
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XOPVW' into ls_table.
DESCRIBE FIELD WA_SKB1-XOPVW
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSPEB' into ls_table.
DESCRIBE FIELD WA_SKB1-XSPEB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ZINDT' into ls_table.
DESCRIBE FIELD WA_SKB1-ZINDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ZINRT' into ls_table.
DESCRIBE FIELD WA_SKB1-ZINRT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ZUAWA' into ls_table.
DESCRIBE FIELD WA_SKB1-ZUAWA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ALTKT' into ls_table.
DESCRIBE FIELD WA_SKB1-ALTKT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XMITK' into ls_table.
DESCRIBE FIELD WA_SKB1-XMITK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RECID' into ls_table.
DESCRIBE FIELD WA_SKB1-RECID
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FIPOS' into ls_table.
DESCRIBE FIELD WA_SKB1-FIPOS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XMWNO' into ls_table.
DESCRIBE FIELD WA_SKB1-XMWNO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSALH' into ls_table.
DESCRIBE FIELD WA_SKB1-XSALH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BEWGP' into ls_table.
DESCRIBE FIELD WA_SKB1-BEWGP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'INFKY' into ls_table.
DESCRIBE FIELD WA_SKB1-INFKY
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TOGRU' into ls_table.
DESCRIBE FIELD WA_SKB1-TOGRU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_SKB1 = lv_SKB1 + LINES( it_SKB1 ) .
  IF lv_SKB1 GT 0.
perform conv_table_to_text tables it_SKB1
using lv_file
 ls_table .
FREE IT_SKB1 .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T001B'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T001B = 'Yes'.
    DATA: COLUMN_T001B TYPE STRING.
    DATA TABLE_T001B TYPE STRING.
    COLUMN_T001B = 'MANDT RRCTY BUKRS MKOAR  BKONT VKONT FRYE1 FRPE1  TOYE1 TOPE1 FRYE2 FRPE2  TOYE2 TOPE2'.
    TABLE_T001B = 'T001B'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T001B)
FROM (TABLE_T001B)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T001B
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T001B.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t001b-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'RRCTY' INTO ls_table.
  DESCRIBE FIELD wa_t001b-rrcty
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t001b-bukrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MKOAR' INTO ls_table.
  DESCRIBE FIELD wa_t001b-mkoar
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BKONT' INTO ls_table.
  DESCRIBE FIELD wa_t001b-bkont
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'VKONT' INTO ls_table.
  DESCRIBE FIELD wa_t001b-vkont
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FRYE1' INTO ls_table.
  DESCRIBE FIELD wa_t001b-frye1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FRPE1' INTO ls_table.
  DESCRIBE FIELD wa_t001b-frpe1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOYE1' INTO ls_table.
  DESCRIBE FIELD wa_t001b-toye1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOPE1' INTO ls_table.
  DESCRIBE FIELD wa_t001b-tope1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FRYE2' INTO ls_table.
  DESCRIBE FIELD wa_t001b-frye2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FRPE2' INTO ls_table.
  DESCRIBE FIELD wa_t001b-frpe2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOYE2' INTO ls_table.
  DESCRIBE FIELD wa_t001b-toye2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOPE2' INTO ls_table.
  DESCRIBE FIELD wa_t001b-tope2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t001b = LINES( it_t001b ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t001b
    USING lv_file
    ls_table .
    FREE IT_T001B .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T001R'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T001R = 'Yes'.
    DATA: COLUMN_T001R TYPE STRING.
    DATA TABLE_T001R TYPE STRING.
    COLUMN_T001R = 'MANDT BUKRS WAERS REINH'.
    TABLE_T001R = 'T001R'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T001R)
FROM (TABLE_T001R)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T001R
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T001R.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t001r-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t001r-bukrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WAERS' INTO ls_table.
  DESCRIBE FIELD wa_t001r-waers
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'REINH' INTO ls_table.
  DESCRIBE FIELD wa_t001r-reinh
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t001r = LINES( it_t001r ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t001r
    USING lv_file
    ls_table .
    FREE IT_T001R .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T001W'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T001W = 'Yes'.
    DATA: COLUMN_T001W TYPE STRING.
    DATA TABLE_T001W TYPE STRING.
    COLUMN_T001W = 'MANDT WERKS NAME1'.
    TABLE_T001W = 'T001W'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T001W)
FROM (TABLE_T001W)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T001W
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T001W.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t001w-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WERKS' INTO ls_table.
  DESCRIBE FIELD wa_t001w-werks
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'NAME1' INTO ls_table.
  DESCRIBE FIELD wa_t001w-name1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t001w = LINES( it_t001w ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t001w
    USING lv_file
    ls_table .
    FREE IT_T001W .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T003'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T003 = 'Yes'.
    DATA: COLUMN_T003 TYPE STRING.
    DATA TABLE_T003 TYPE STRING.
    COLUMN_T003 = 'MANDT BLART BRGRU NUMKR KOARS STBLA XMTXT XMREF'.
    TABLE_T003 = 'T003'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T003)
FROM (TABLE_T003)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T003
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T003.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t003-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BLART' INTO ls_table.
  DESCRIBE FIELD wa_t003-blart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BRGRU' INTO ls_table.
  DESCRIBE FIELD wa_t003-brgru
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'NUMKR' INTO ls_table.
  DESCRIBE FIELD wa_t003-numkr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOARS' INTO ls_table.
  DESCRIBE FIELD wa_t003-koars
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STBLA' INTO ls_table.
  DESCRIBE FIELD wa_t003-stbla
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XMTXT' INTO ls_table.
  DESCRIBE FIELD wa_t003-xmtxt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XMREF' INTO ls_table.
  DESCRIBE FIELD wa_t003-xmref
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t003 = LINES( it_t003 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t003
    USING lv_file
    ls_table .
    FREE it_t003 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T003T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T003T = 'Yes'.
    DATA: COLUMN_T003T TYPE STRING.
    DATA TABLE_T003T TYPE STRING.
    COLUMN_T003T = 'MANDT SPRAS BLART LTEXT'.
    TABLE_T003T = 'T003T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T003T)
FROM (TABLE_T003T)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T003T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T003T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t003t-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t003t-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BLART' INTO ls_table.
  DESCRIBE FIELD wa_t003t-blart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t003t-ltext
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t003t = LINES( it_t003t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t003t
    USING lv_file
    ls_table .
    FREE IT_T003T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T004'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T004 = 'Yes'.
    DATA: COLUMN_T004 TYPE STRING.
    DATA TABLE_T004 TYPE STRING.
    COLUMN_T004 = 'MANDT KTOPL'.
    TABLE_T004 = 'T004'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T004)
FROM (TABLE_T004)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T004
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T004.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t004-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ktopl' INTO ls_table.
  DESCRIBE FIELD wa_t004-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t004 = LINES( it_t004 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t004
    USING lv_file
    ls_table .
    FREE IT_T004 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T004T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T004T = 'Yes'.
    DATA: COLUMN_T004T TYPE STRING.
    DATA TABLE_T004T TYPE STRING.
    COLUMN_T004T = 'MANDT SPRAS KTOPL KTPLT'.
    TABLE_T004T = 'T004T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T004T)
FROM (TABLE_T004T)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T004T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T004T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t004t-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t004t-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_t004t-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTPLT' INTO ls_table.
  DESCRIBE FIELD wa_t004t-ktplt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t004t = LINES( it_t004t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t004t
    USING lv_file
    ls_table .
    FREE it_t004t .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T009'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T009 = 'Yes'.
    DATA: COLUMN_T009 TYPE STRING.
    DATA TABLE_T009 TYPE STRING.
    COLUMN_T009 = 'MANDT PERIV XKALE XJABH ANZBP ANZSP'.
    TABLE_T009 = 'T009'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T009)
FROM (TABLE_T009)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T009
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T009.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t009-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PERIV' INTO ls_table.
  DESCRIBE FIELD wa_t009-periv
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XKALE' INTO ls_table.
  DESCRIBE FIELD wa_t009-xkale
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XJABH' INTO ls_table.
  DESCRIBE FIELD wa_t009-xjabh
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANZBP' INTO ls_table.
  DESCRIBE FIELD wa_t009-anzbp
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANZSP' INTO ls_table.
  DESCRIBE FIELD wa_t009-anzsp
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t009 = LINES( it_t009 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t009
    USING lv_file
    ls_table .
    FREE it_t009 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T009B'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T009B = 'Yes'.
    DATA: COLUMN_T009B TYPE STRING.
    DATA TABLE_T009B TYPE STRING.
    COLUMN_T009B = 'MANDT PERIV BDATJ BUMON  BUTAG POPER RELJR'.
    TABLE_T009B = 'T009B'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T009B)
FROM (TABLE_T009B)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T009B
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T009B.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T009B-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PERIV' into ls_table.
DESCRIBE FIELD WA_T009B-PERIV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BDATJ' into ls_table.
DESCRIBE FIELD WA_T009B-BDATJ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUMON' into ls_table.
DESCRIBE FIELD WA_T009B-BUMON
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUTAG' into ls_table.
DESCRIBE FIELD WA_T009B-BUTAG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'POPER' into ls_table.
DESCRIBE FIELD WA_T009B-POPER
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RELJR' into ls_table.
DESCRIBE FIELD WA_T009B-RELJR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T009B = lines( it_T009B ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T009B
using lv_file
 ls_table .
FREE IT_T009B .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T009T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T009T = 'Yes'.
    DATA: COLUMN_T009T TYPE STRING.
    DATA TABLE_T009T TYPE STRING.
    COLUMN_T009T = 'MANDT SPRAS PERIV LTEXT'.
    TABLE_T009T = 'T009T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T009T)
FROM (TABLE_T009T)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T009T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T009T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t009t-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t009t-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PERIV' INTO ls_table.
  DESCRIBE FIELD wa_t009t-periv
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t009t-ltext
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t009t = LINES( it_t009t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t009t
    USING lv_file
    ls_table .
    FREE IT_T009T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T030'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T030 = 'Yes'.
    DATA: COLUMN_T030 TYPE STRING.
    DATA TABLE_T030 TYPE STRING.
    COLUMN_T030 = 'MANDT KTOPL KTOSL BWMOD KOMOK BKLAS KONTS KONTH'.
    TABLE_T030 = 'T030'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T030)
FROM (TABLE_T030)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T030
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T030.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t030-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_t030-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOSL' INTO ls_table.
  DESCRIBE FIELD wa_t030-ktosl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BWMOD' INTO ls_table.
  DESCRIBE FIELD wa_t030-bwmod
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOMOK' INTO ls_table.
  DESCRIBE FIELD wa_t030-komok
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BKLAS' INTO ls_table.
  DESCRIBE FIELD wa_t030-bklas
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KONTS' INTO ls_table.
  DESCRIBE FIELD wa_t030-konts
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KONTH' INTO ls_table.
  DESCRIBE FIELD wa_t030-konth
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t030 = LINES( it_t030 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t030
    USING lv_file
    ls_table .
    FREE IT_T030 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T030B'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T030B = 'Yes'.
    DATA: COLUMN_T030B TYPE STRING.
    DATA TABLE_T030B TYPE STRING.
    COLUMN_T030B = 'MANDT KTOSL BSCHS BSCHH  UMSKZ'.
    TABLE_T030B = 'T030B'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T030B)
FROM (TABLE_T030B)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien AND KTOSL = 'KDF'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T030B
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T030B.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t030b-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOSL' INTO ls_table.
  DESCRIBE FIELD wa_t030b-ktosl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSCHS' INTO ls_table.
  DESCRIBE FIELD wa_t030b-bschs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSCHH' INTO ls_table.
  DESCRIBE FIELD wa_t030b-bschh
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'UMSKZ' INTO ls_table.
  DESCRIBE FIELD wa_t030b-umskz
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t030b = LINES( it_t030b ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t030b
    USING lv_file
    ls_table .
    FREE IT_T030B .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T030H'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T030H = 'Yes'.
    DATA: COLUMN_T030H TYPE STRING.
    DATA TABLE_T030H TYPE STRING.
    COLUMN_T030H = 'MANDT KTOPL HKONT WAERS  CURTP LKORR LSREA LHREA  LSTRA LHTRA LSBEW LHBEW  LSTRV LHTRV'.
    TABLE_T030H = 'T030H'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T030H)
FROM (TABLE_T030H)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T030H
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T030H.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t030h-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_t030h-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'HKONT' INTO ls_table.
  DESCRIBE FIELD wa_t030h-hkont
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WAERS' INTO ls_table.
  DESCRIBE FIELD wa_t030h-waers
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CURTP' INTO ls_table.
  DESCRIBE FIELD wa_t030h-curtp
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LKORR' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lkorr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LSREA' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lsrea
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LHREA' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lhrea
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LSTRA' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lstra
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LHTRA' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lhtra
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LSBEW' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lsbew
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LHBEW' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lhbew
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LSTRV' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lstrv
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LHTRV' INTO ls_table.
  DESCRIBE FIELD wa_t030h-lhtrv
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t030h = LINES( it_t030h ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t030h
    USING lv_file
    ls_table .
    FREE IT_T030H .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T030R'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T030R = 'Yes'.
    DATA: COLUMN_T030R TYPE STRING.
    DATA TABLE_T030R TYPE STRING.
    COLUMN_T030R = 'MANDT KTOPL KTOSL XKOMO  XBWMO XBKLA XDIKO'.
    TABLE_T030R = 'T030R'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T030R)
FROM (TABLE_T030R)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T030R
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T030R.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t030r-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_t030r-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOSL' INTO ls_table.
  DESCRIBE FIELD wa_t030r-ktosl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XKOMO' INTO ls_table.
  DESCRIBE FIELD wa_t030r-xkomo
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XBWMO' INTO ls_table.
  DESCRIBE FIELD wa_t030r-xbwmo
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XBKLA' INTO ls_table.
  DESCRIBE FIELD wa_t030r-xbkla
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XDIKO' INTO ls_table.
  DESCRIBE FIELD wa_t030r-xdiko
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t030r = LINES( it_t030r ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t030r
    USING lv_file
    ls_table .
    FREE it_t030r .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T030S'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T030S = 'Yes'.
    DATA: COLUMN_T030S TYPE STRING.
    DATA TABLE_T030S TYPE STRING.
    COLUMN_T030S = 'MANDT KTOPL KDFSL CURTP  KSOLL KHABN GSOLL GHABN'.
    TABLE_T030S = 'T030S'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T030S)
FROM (TABLE_T030S)  CLIENT SPECIFIED
WHERE MANDT =  S_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T030S
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T030S.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T030S-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOPL' into ls_table.
DESCRIBE FIELD WA_T030S-KTOPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KDFSL' into ls_table.
DESCRIBE FIELD WA_T030S-KDFSL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'CURTP' into ls_table.
DESCRIBE FIELD WA_T030S-CURTP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSOLL' into ls_table.
DESCRIBE FIELD WA_T030S-KSOLL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KHABN' into ls_table.
DESCRIBE FIELD WA_T030S-KHABN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GSOLL' into ls_table.
DESCRIBE FIELD WA_T030S-GSOLL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GHABN' into ls_table.
DESCRIBE FIELD WA_T030S-GHABN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T030S = lines( it_T030S ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T030S
using lv_file
 ls_table .
FREE IT_T030S.
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T030W'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T030W = 'Yes'.
    DATA: COLUMN_T030W TYPE STRING.
    DATA TABLE_T030W TYPE STRING.
    COLUMN_T030W = 'SPRAS KTOSL LTEXT KTEXT KTXT2 KTXT3'.
    TABLE_T030W = 'T030W'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T030W)
FROM (TABLE_T030W)  CLIENT SPECIFIED
WHERE SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T030W
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T030W.ACTT'.
  ls_table = 'SPRAS'.
  DESCRIBE FIELD wa_t030w-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOSL' INTO ls_table.
  DESCRIBE FIELD wa_t030w-ktosl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t030w-LTEXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t030w-KTEXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTXT2' INTO ls_table.
  DESCRIBE FIELD wa_t030w-KTXT2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTXT3' INTO ls_table.
  DESCRIBE FIELD wa_t030w-KTXT3
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t030w = LINES( it_t030w ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t030w
    USING lv_file
    ls_table .
    FREE IT_T030W .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'KNKK'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
    IF istable_knkk = 'Yes'.
      DATA: column_knkk TYPE string.
      DATA table_knkk TYPE string.
      COLUMN_KNKK = 'MANDT KUNNR KKBER KLIMK ERNAM ERDAT'.
      TABLE_KNKK = 'KNKK'.
   OPEN CURSOR WITH HOLD s_cursor FOR
     SELECT
     (COLUMN_KNKK)
     FROM (TABLE_KNKK)  CLIENT SPECIFIED
     WHERE mandt =  s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_KNKK
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
    lv_file = 'KNKK.ACTT'.
    ls_table = 'MANDT'.
    DESCRIBE FIELD WA_KNKK-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'KUNNR' into ls_table.
    DESCRIBE FIELD WA_KNKK-KUNNR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'KKBER' into ls_table.
    DESCRIBE FIELD WA_KNKK-KKBER
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'KLIMK' into ls_table.
    DESCRIBE FIELD WA_KNKK-KLIMK
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'ERNAM' into ls_table.
    DESCRIBE FIELD WA_KNKK-ERNAM
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'ERDAT' into ls_table.
    DESCRIBE FIELD WA_KNKK-ERDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  lv_KNKK = lv_KNKK + LINES( it_KNKK ) .
  IF lv_KNKK GT 0.
    perform conv_table_to_text tables it_KNKK
    using lv_file
    ls_table .
    FREE IT_KNKK.
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    append ls_table TO lt_table .
  PERFORM download_gui TABLES lt_table USING lv_file .
  CLEAR lt_table .
  CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T043G'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T043G = 'Yes'.
    DATA: COLUMN_T043G TYPE STRING.
    DATA TABLE_T043G TYPE STRING.
    COLUMN_T043G = 'MANDT BUKRS TOGRU BETRS BETRH PROZS PROZH SKNTS SKNTH TOLER SKTRE XKONR ZTERM XSKAN MSLRP PRAVS PRAVH BEAVS BEAVH VRZDE BEADS BEADH PRADS PRADH'.
    TABLE_T043G = 'T043G'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T043G)
FROM (TABLE_T043G)  CLIENT SPECIFIED
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T043G
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T043G.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t043g-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-BUKRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOGRU' INTO ls_table.
  DESCRIBE FIELD wa_t043g-TOGRU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BETRS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-BETRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BETRH' INTO ls_table.
  DESCRIBE FIELD wa_t043g-BETRH
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PROZS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-PROZS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PROZH' INTO ls_table.
  DESCRIBE FIELD wa_t043g-PROZH
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SKNTS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-SKNTS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SKNTH' INTO ls_table.
  DESCRIBE FIELD wa_t043g-sknth
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOLER' INTO ls_table.
  DESCRIBE FIELD wa_t043g-TOLER
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SKTRE' INTO ls_table.
  DESCRIBE FIELD wa_t043g-SKTRE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XKONR' INTO ls_table.
  DESCRIBE FIELD wa_t043g-XKONR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ZTERM' INTO ls_table.
  DESCRIBE FIELD wa_t043g-ZTERM
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XSKAN' INTO ls_table.
  DESCRIBE FIELD wa_t043g-XSKAN
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSLRP' INTO ls_table.
  DESCRIBE FIELD wa_t043g-MSLRP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PRAVS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-PRAVS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PRAVH' INTO ls_table.
  DESCRIBE FIELD wa_t043g-PRAVH
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BEAVS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-BEAVS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BEAVH' INTO ls_table.
  DESCRIBE FIELD wa_t043g-BEAVH
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'VRZDE' INTO ls_table.
  DESCRIBE FIELD wa_t043g-VRZDE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BEADS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-BEADS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BEADH' INTO ls_table.
  DESCRIBE FIELD wa_t043g-BEADH
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PRADS' INTO ls_table.
  DESCRIBE FIELD wa_t043g-PRADS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PRADH' INTO ls_table.
  DESCRIBE FIELD wa_t043g-PRADH
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t043g = LINES( it_t043g ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t043g
    USING lv_file
    ls_table .
    FREE IT_T043G .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T043GT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T043GT = 'Yes'.
    DATA: COLUMN_T043GT TYPE STRING.
    DATA TABLE_T043GT TYPE STRING.
    COLUMN_T043GT = 'MANDT SPRAS BUKRS TOGRU TXT30'.
    TABLE_T043GT = 'T043GT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T043GT)
FROM (TABLE_T043GT)  CLIENT SPECIFIED
WHERE SPRAS = 'EN' AND MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T043GT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T043GT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t043gt-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t043gt-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t043gt-BUKRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOGRU' INTO ls_table.
  DESCRIBE FIELD wa_t043gt-TOGRU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TXT30' INTO ls_table.
  DESCRIBE FIELD wa_t043gt-TXT30
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t043gt = LINES( it_t043gt ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t043gt
    USING lv_file
    ls_table .
    FREE IT_T043GT .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T043T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T043T = 'Yes'.
    DATA: COLUMN_T043T TYPE STRING.
    DATA TABLE_T043T TYPE STRING.
    COLUMN_T043T = 'MANDT RFPRO BUKRS BETRS BETRH PROZS PROZH SKNTS SKNTH MAXBT MAXEB MAXSK'.
    TABLE_T043T = 'T043T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T043T)
FROM (TABLE_T043T)  CLIENT SPECIFIED
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T043T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T043T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t043t-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'RFPRO' INTO ls_table.
  DESCRIBE FIELD wa_t043t-rfpro
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t043t-bukrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BETRS' INTO ls_table.
  DESCRIBE FIELD wa_t043t-betrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BETRH' INTO ls_table.
  DESCRIBE FIELD wa_t043t-betrh
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PROZS' INTO ls_table.
  DESCRIBE FIELD wa_t043t-prozs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PROZH' INTO ls_table.
  DESCRIBE FIELD wa_t043t-prozh
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SKNTS' INTO ls_table.
  DESCRIBE FIELD wa_t043t-sknts
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SKNTH' INTO ls_table.
  DESCRIBE FIELD wa_t043t-sknth
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MAXBT' INTO ls_table.
  DESCRIBE FIELD wa_t043t-maxbt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MAXEB' INTO ls_table.
  DESCRIBE FIELD wa_t043t-maxeb
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MAXSK' INTO ls_table.
  DESCRIBE FIELD wa_t043t-maxsk
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t043t = LINES( it_t043t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t043t
    USING lv_file
    ls_table .
    FREE IT_T043T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T055F'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T055F = 'Yes'.
    DATA: COLUMN_T055F TYPE STRING.
    DATA TABLE_T055F TYPE STRING.
    COLUMN_T055F = 'MANDT KOART FELDN'.
    TABLE_T055F = 'T055F'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T055F)
FROM (TABLE_T055F)  CLIENT SPECIFIED
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T055F
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T055F.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t055f-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOART' INTO ls_table.
  DESCRIBE FIELD wa_t055f-koart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FELDN' INTO ls_table.
  DESCRIBE FIELD wa_t055f-feldn
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t055f = LINES( it_t055f ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t055f
    USING lv_file
    ls_table .
    FREE IT_T055F .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T077D'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T077D = 'Yes'.
    DATA: COLUMN_T077D TYPE STRING.
    DATA TABLE_T077D TYPE STRING.
    COLUMN_T077D = 'MANDT KTOKD FAUSA FAUSF FAUSV FAUS1 FAUSW FAUSG FAUS2 FAUSU'.
    TABLE_T077D = 'T077D'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T077D)
FROM (TABLE_T077D)  CLIENT SPECIFIED
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T077D
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T077D.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t077d-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOKD' INTO ls_table.
  DESCRIBE FIELD wa_t077d-ktokd
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSA' INTO ls_table.
  DESCRIBE FIELD wa_t077d-fausa
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSF' INTO ls_table.
  DESCRIBE FIELD wa_t077d-fausf
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSV' INTO ls_table.
  DESCRIBE FIELD wa_t077d-fausv
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS1' INTO ls_table.
  DESCRIBE FIELD wa_t077d-faus1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSW' INTO ls_table.
  DESCRIBE FIELD wa_t077d-fausw
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSG' INTO ls_table.
  DESCRIBE FIELD wa_t077d-fausg
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS2' INTO ls_table.
  DESCRIBE FIELD wa_t077d-faus2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSU' INTO ls_table.
  DESCRIBE FIELD wa_t077d-fausu
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t077d = LINES( it_t077d ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t077d
    USING lv_file
    ls_table .
    FREE IT_T077D .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T077K'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T077K = 'Yes'.
    DATA: COLUMN_T077K TYPE STRING.
    DATA TABLE_T077K TYPE STRING.
    COLUMN_T077K = 'MANDT KTOKK FAUSA FAUSF FAUSM FAUS1 FAUSW FAUST FAUS2 FAUSU FAUSG FAUSN  FAUSX'.
    TABLE_T077K = 'T077K'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T077K)
FROM (TABLE_T077K)  CLIENT SPECIFIED
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T077K
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T077K.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t077k-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOKK' INTO ls_table.
  DESCRIBE FIELD wa_t077k-ktokk
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSA' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSF' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSF
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSM' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSM
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS1' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUS1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSW' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSW
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUST' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUST
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS2' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUS2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSU' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSG' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSN' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSN
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUSX' INTO ls_table.
  DESCRIBE FIELD wa_t077k-FAUSX
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t077k = LINES( it_t077k ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t077k
    USING lv_file
    ls_table .
    FREE IT_T077K .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T077X'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T077X = 'Yes'.
    DATA: COLUMN_T077X TYPE STRING.
    DATA TABLE_T077X TYPE STRING.
    COLUMN_T077X = 'MANDT SPRAS KTOKD TXT30'.
    TABLE_T077X = 'T077X'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T077X)
FROM (TABLE_T077X)  CLIENT SPECIFIED
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T077X
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T077X.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t077x-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t077x-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOKD' INTO ls_table.
  DESCRIBE FIELD wa_t077x-ktokd
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TXT30' INTO ls_table.
  DESCRIBE FIELD wa_t077x-txt30
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t077x = LINES( it_t077x ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t077x
    USING lv_file
    ls_table .
    FREE IT_T077X .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T077Y'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T077Y = 'Yes'.
    DATA: COLUMN_T077Y TYPE STRING.
    DATA TABLE_T077Y TYPE STRING.
    COLUMN_T077Y = 'MANDT SPRAS KTOKK TXT30'.
    TABLE_T077Y = 'T077Y'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T077Y)
FROM (TABLE_T077Y)  CLIENT SPECIFIED
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T077Y
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T077Y.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t077y-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t077y-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOKK' INTO ls_table.
  DESCRIBE FIELD wa_t077y-KTOKK
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TXT30' INTO ls_table.
  DESCRIBE FIELD wa_t077y-TXT30
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t077y = LINES( it_t077y ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t077y
    USING lv_file
    ls_table .
    FREE IT_T077Y .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T082A'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T082A = 'Yes'.
    DATA: COLUMN_T082A TYPE STRING.
    DATA TABLE_T082A TYPE STRING.
    COLUMN_T082A = 'MANDT FEGTB FELEI'.
    TABLE_T082A = 'T082A'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T082A)
FROM (TABLE_T082A)  CLIENT SPECIFIED
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T082A
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T082A.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t082a-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGTB' INTO ls_table.
  DESCRIBE FIELD wa_t082a-FEGTB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FELEI' INTO ls_table.
  DESCRIBE FIELD wa_t082a-FELEI
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t082a = LINES( it_t082a ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t082a
    USING lv_file
    ls_table .
    FREE IT_T082A .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T082B'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T082B = 'Yes'.
    DATA: COLUMN_T082B TYPE STRING.
    DATA TABLE_T082B TYPE STRING.
    COLUMN_T082B = 'FEGTB FEGRU FEGLG'.
    TABLE_T082B = 'T082B'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T082B)
FROM (TABLE_T082B)  CLIENT SPECIFIED
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T082B
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T082B.ACTT'.
  ls_table = 'FEGTB'.
  DESCRIBE FIELD wa_t082b-FEGTB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGRU' INTO ls_table.
  DESCRIBE FIELD wa_t082b-fegru
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGLG' INTO ls_table.
  DESCRIBE FIELD wa_t082b-FEGLG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t082b = LINES( it_t082b ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t082b
    USING lv_file
    ls_table .
    FREE IT_T082B .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T082G'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T082G = 'Yes'.
    DATA: COLUMN_T082G TYPE STRING.
    DATA TABLE_T082G TYPE STRING.
    COLUMN_T082G = 'MANDT FEGTB FELEI FEGRU  FMUSS FKANN FNEIN INGEG'.
    TABLE_T082G = 'T082G'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T082G)
FROM (TABLE_T082G)  CLIENT SPECIFIED
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T082G
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
.
  lv_file = 'T082G.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t082g-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGTB' INTO ls_table.
  DESCRIBE FIELD wa_t082g-FEGTB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FELEI' INTO ls_table.
  DESCRIBE FIELD wa_t082g-FELEI
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGRU' INTO ls_table.
  DESCRIBE FIELD wa_t082g-FEGRU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FMUSS' INTO ls_table.
  DESCRIBE FIELD wa_t082g-FMUSS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FKANN' INTO ls_table.
  DESCRIBE FIELD wa_t082g-FKANN
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FNEIN' INTO ls_table.
  DESCRIBE FIELD wa_t082g-FNEIN
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'INGEG' INTO ls_table.
  DESCRIBE FIELD wa_t082g-INGEG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t082g = LINES( it_t082g ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t082g
    USING lv_file
    ls_table .
    FREE IT_T082G .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T082H'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T082H = 'Yes'.
    DATA: COLUMN_T082H TYPE STRING.
    DATA TABLE_T082H TYPE STRING.
    COLUMN_T082H = 'MANDT SPRAS FEGTB FELEI  TXT30'.
    TABLE_T082H = 'T082H'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T082H)
FROM (TABLE_T082H)  CLIENT SPECIFIED
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T082H
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T082H.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t082h-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t082h-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGTB' INTO ls_table.
  DESCRIBE FIELD wa_t082h-FEGTB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FELEI' INTO ls_table.
  DESCRIBE FIELD wa_t082h-FELEI
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TXT30' INTO ls_table.
  DESCRIBE FIELD wa_t082h-txt30
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t082h = LINES( it_t082h ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t082h
    USING lv_file
    ls_table .
    FREE IT_T082H .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T082L'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T082L = 'Yes'.
    DATA: COLUMN_T082L TYPE STRING.
    DATA TABLE_T082L TYPE STRING.
    COLUMN_T082L = 'FEGTB FEGLG XVALID'.
    TABLE_T082L = 'T082L'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T082L)
FROM (TABLE_T082L)  CLIENT SPECIFIED
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T082L
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T082L.ACTT'.
  ls_table = 'FEGTB'.
  DESCRIBE FIELD wa_t082l-fegtb
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGLG' INTO ls_table.
  DESCRIBE FIELD wa_t082l-feglg
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XVALID' INTO ls_table.
  DESCRIBE FIELD wa_t082l-xvalid
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t082l = LINES( it_t082l ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t082l
    USING lv_file
    ls_table .
    FREE IT_T082L .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T082M'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T082M = 'Yes'.
    DATA: COLUMN_T082M TYPE STRING.
    DATA TABLE_T082M TYPE STRING.
    COLUMN_T082M = 'SPRAS FEGTB FEGLG FEGBEZ'.
    TABLE_T082M = 'T082M'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T082M)
FROM (TABLE_T082M)
WHERE SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T082M
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T082M.ACTT'.
  ls_table = 'SPRAS'.
  DESCRIBE FIELD wa_t082m-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGTB' INTO ls_table.
  DESCRIBE FIELD wa_t082m-FEGTB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGLG' INTO ls_table.
  DESCRIBE FIELD wa_t082m-FEGLG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGBEZ' INTO ls_table.
  DESCRIBE FIELD wa_t082m-FEGBEZ
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t082m = LINES( it_t082m ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t082m
    USING lv_file
    ls_table .
    FREE IT_T082M .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T082T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T082T = 'Yes'.
    DATA: COLUMN_T082T TYPE STRING.
    DATA TABLE_T082T TYPE STRING.
    COLUMN_T082T = 'SPRAS FEGTB FEGRU TXT20'.
    TABLE_T082T = 'T082T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T082T)
FROM (TABLE_T082T)
WHERE SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T082T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T082T.ACTT'.
  ls_table = 'SPRAS'.
  DESCRIBE FIELD wa_t082t-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGTB' INTO ls_table.
  DESCRIBE FIELD wa_t082t-FEGTB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FEGRU' INTO ls_table.
  DESCRIBE FIELD wa_t082t-FEGRU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TXT20' INTO ls_table.
  DESCRIBE FIELD wa_t082t-TXT20
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t082t = LINES( it_t082t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t082t
    USING lv_file
    ls_table .
    FREE IT_T082T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090 = 'Yes'.
    DATA: COLUMN_T090 TYPE STRING.
    DATA TABLE_T090 TYPE STRING.
    CONCATENATE   'MANDT AFARSL GBEGIN AFATYP XAFAUT DEGFAK MAXPRZ MINPRZ'
                  ' UMAFSL UMRPRZ XSTILL XENDAU XUNTNL XEFDAU PERBZU PERBNA'
                  ' PERBAB PERBUM XDAILY XLIFEC XAFNAH XBZDAT UMSTM AFACLA'
                  ' AFAMET XRAFA MSFAKR SCHROTT' INTO COLUMN_T090.
    TABLE_T090 = 'T090'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090)
FROM (TABLE_T090)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T090.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T090-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFARSL' into ls_table.
DESCRIBE FIELD WA_T090-AFARSL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GBEGIN' into ls_table.
DESCRIBE FIELD WA_T090-GBEGIN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFATYP' into ls_table.
DESCRIBE FIELD WA_T090-AFATYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XAFAUT' into ls_table.
DESCRIBE FIELD WA_T090-XAFAUT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'DEGFAK' into ls_table.
DESCRIBE FIELD WA_T090-DEGFAK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MAXPRZ' into ls_table.
DESCRIBE FIELD WA_T090-MAXPRZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MINPRZ' into ls_table.
DESCRIBE FIELD WA_T090-MINPRZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UMAFSL' into ls_table.
DESCRIBE FIELD WA_T090-UMAFSL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UMRPRZ' into ls_table.
DESCRIBE FIELD WA_T090-UMRPRZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSTILL' into ls_table.
DESCRIBE FIELD WA_T090-XSTILL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XENDAU' into ls_table.
DESCRIBE FIELD WA_T090-XENDAU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XUNTNL' into ls_table.
DESCRIBE FIELD WA_T090-XUNTNL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XEFDAU' into ls_table.
DESCRIBE FIELD WA_T090-XEFDAU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PERBZU' into ls_table.
DESCRIBE FIELD WA_T090-PERBZU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PERBNA' into ls_table.
DESCRIBE FIELD WA_T090-PERBNA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PERBAB' into ls_table.
DESCRIBE FIELD WA_T090-PERBAB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PERBUM' into ls_table.
DESCRIBE FIELD WA_T090-PERBUM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XDAILY' into ls_table.
DESCRIBE FIELD WA_T090-XDAILY
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XLIFEC' into ls_table.
DESCRIBE FIELD WA_T090-XLIFEC
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XAFNAH' into ls_table.
DESCRIBE FIELD WA_T090-XAFNAH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XBZDAT' into ls_table.
DESCRIBE FIELD WA_T090-XBZDAT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UMSTM' into ls_table.
DESCRIBE FIELD WA_T090-UMSTM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFACLA' into ls_table.
DESCRIBE FIELD WA_T090-AFACLA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFAMET' into ls_table.
DESCRIBE FIELD WA_T090-AFAMET
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XRAFA' into ls_table.
DESCRIBE FIELD WA_T090-XRAFA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MSFAKR' into ls_table.
DESCRIBE FIELD WA_T090-MSFAKR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SCHROTT' into ls_table.
DESCRIBE FIELD WA_T090-SCHROTT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T090 = lines( it_T090 ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T090
using lv_file
 ls_table .
FREE IT_T090 .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090NA'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090NA = 'Yes'.
    DATA: COLUMN_T090NA TYPE STRING.
    DATA TABLE_T090NA TYPE STRING.
    COLUMN_T090NA = 'MANDT AFAPL AFASL ANHWSL'.
    TABLE_T090NA = 'T090NA'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090NA)
FROM (TABLE_T090NA)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090NA
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T090NA.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t090na-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t090na-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFASL' INTO ls_table.
  DESCRIBE FIELD wa_t090na-AFASL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANHWSL' INTO ls_table.
  DESCRIBE FIELD wa_t090na-ANHWSL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t090na = LINES( it_t090na ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t090na
    USING lv_file
    ls_table .
    FREE IT_T090NA .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090NAT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090NAT = 'Yes'.
    DATA: COLUMN_T090NAT TYPE STRING.
    DATA TABLE_T090NAT TYPE STRING.
    COLUMN_T090NAT = 'MANDT SPRAS AFAPL AFASL  AFATXT'.
    TABLE_T090NAT = 'T090NAT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090NAT)
FROM (TABLE_T090NAT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090NAT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T090NAT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t090nat-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t090nat-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t090nat-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFASL' INTO ls_table.
  DESCRIBE FIELD wa_t090nat-AFASL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFATXT' INTO ls_table.
  DESCRIBE FIELD wa_t090nat-AFATXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t090nat = LINES( it_t090nat ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t090nat
    USING lv_file
    ls_table .
    FREE IT_T090NAT .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090NAZ'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090NAZ = 'Yes'.
    DATA: COLUMN_T090NAZ TYPE STRING.
    DATA TABLE_T090NAZ TYPE STRING.
    COLUMN_T090NAZ = 'MANDT AFAPL AFASL AFACLA AFATYP AFARSL METDEG METPER METSTU PHASE'.
    TABLE_T090NAZ = 'T090NAZ'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090NAZ)
FROM (TABLE_T090NAZ)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090NAZ
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T090NAZ.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t090naz-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFASL' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-afasl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
***** Added the column AFACLA for BCC - Gautam Jha - 07/03/2019
  CONCATENATE ls_table '|^|' 'AFACLA' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-AFACLA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
***** Added the column AFACLA for BCC - Gautam Jha - 07/03/2019
  CONCATENATE ls_table '|^|' 'AFATYP' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-AFATYP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFARSL' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-AFARSL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'METDEG' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-METDEG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'METPER' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-METPER
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'METSTU' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-METSTU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
***** Added the column PHASE for BCC - Gautam Jha - 07/03/2019
  CONCATENATE ls_table '|^|' 'PHASE' INTO ls_table.
  DESCRIBE FIELD wa_t090naz-PHASE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
***** Added the column PHASE for BCC - Gautam Jha - 07/03/2019
  lv_t090naz = LINES( it_t090naz ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t090naz
    USING lv_file
    ls_table .
    FREE IT_T090NAZ .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090NDT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090NDT = 'Yes'.
    DATA: COLUMN_T090NDT TYPE STRING.
    DATA TABLE_T090NDT TYPE STRING.
    COLUMN_T090NDT = 'MANDT SPRAS AFAPL METDEG DEGTXT'.
    TABLE_T090NDT = 'T090NDT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090NDT)
FROM (TABLE_T090NDT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090NDT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T090NDT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t090ndt-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t090ndt-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t090ndt-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'METDEG' INTO ls_table.
  DESCRIBE FIELD wa_t090ndt-METDEG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'DEGTXT' INTO ls_table.
  DESCRIBE FIELD wa_t090ndt-DEGTXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t090ndt = LINES( it_t090ndt ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t090ndt
    USING lv_file
    ls_table .
    FREE IT_T090NDT .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090NPT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090NPT = 'Yes'.
    DATA: COLUMN_T090NPT TYPE STRING.
    DATA TABLE_T090NPT TYPE STRING.
    COLUMN_T090NPT = 'MANDT SPRAS AFAPL METPER PERTXT'.
    TABLE_T090NPT = 'T090NPT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090NPT)
FROM (TABLE_T090NPT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090NPT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T090NPT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t090npt-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t090npt-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t090npt-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'METPER' INTO ls_table.
  DESCRIBE FIELD wa_t090npt-METPER
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PERTXT' INTO ls_table.
  DESCRIBE FIELD wa_t090npt-PERTXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t090npt = LINES( it_t090npt ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t090npt
    USING lv_file
    ls_table .
    FREE IT_T090NPT .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090NRT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090NRT = 'Yes'.
    DATA: COLUMN_T090NRT TYPE STRING.
    DATA TABLE_T090NRT TYPE STRING.
    COLUMN_T090NRT = 'MANDT SPRAS AFARSL RSLTXT'.
    TABLE_T090NRT = 'T090NRT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090NRT)
FROM (TABLE_T090NRT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090NRT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T090NRT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t090nrt-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t090nrt-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFARSL' INTO ls_table.
  DESCRIBE FIELD wa_t090nrt-AFARSL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'RSLTXT' INTO ls_table.
  DESCRIBE FIELD wa_t090nrt-RSLTXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t090nrt = LINES( it_t090nrt ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t090nrt
    USING lv_file
    ls_table .
    FREE IT_T090NRT .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T090NST'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T090NST = 'Yes'.
    DATA: COLUMN_T090NST TYPE STRING.
    DATA TABLE_T090NST TYPE STRING.
    COLUMN_T090NST = 'MANDT SPRAS AFAPL METSTU STUTXT'.
    TABLE_T090NST = 'T090NST'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T090NST)
FROM (TABLE_T090NST)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T090NST
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T090NST.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t090nst-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t090nst-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t090nst-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'METSTU' INTO ls_table.
  DESCRIBE FIELD wa_t090nst-METSTU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STUTXT' INTO ls_table.
  DESCRIBE FIELD wa_t090nst-stutxt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t090nst = LINES( it_t090nst ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t090nst
    USING lv_file
    ls_table .
    FREE IT_T090NST .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T091T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T091T = 'Yes'.
    DATA: COLUMN_T091T TYPE STRING.
    DATA TABLE_T091T TYPE STRING.
    COLUMN_T091T = 'MANDT SPRAS ANHWSL ANHTXT'.
    TABLE_T091T = 'T091T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T091T)
FROM (TABLE_T091T)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T091T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T091T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t091t-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t091t-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANHWSL' INTO ls_table.
  DESCRIBE FIELD wa_t091t-anhwsl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ANHTXT' INTO ls_table.
  DESCRIBE FIELD wa_t091t-anhtxt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t091t = LINES( it_t091t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t091t
    USING lv_file
    ls_table .
    FREE IT_T091T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T093'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T093 = 'Yes'.
    DATA: COLUMN_T093 TYPE STRING.
    DATA TABLE_T093 TYPE STRING.
    COLUMN_T093 = 'AFABER AFAPL BUHBKT MANDT'.
    TABLE_T093 = 'T093'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T093)
FROM (TABLE_T093)
WHERE BUHBKT = '1' AND MANDT =  s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T093
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T093.ACTT'.
  ls_table = 'AFABER'.
  DESCRIBE FIELD wa_t093-afaber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t093-afapl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUHBKT' INTO ls_table.
  DESCRIBE FIELD wa_t093-buhbkt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_t093-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t093 = LINES( it_t093 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t093
    USING lv_file
    ls_table .
    FREE IT_T093 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T093C'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T093C = 'Yes'.
    DATA: COLUMN_T093C TYPE STRING.
    DATA TABLE_T093C TYPE STRING.
    COLUMN_T093C = 'MANDT BUKRS AFAPL VRMAFB'.
    TABLE_T093C = 'T093C'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T093C)
FROM (TABLE_T093C)
WHERE MANDT =  s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T093C
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T093C.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t093c-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t093c-BUKRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t093c-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'VRMAFB' INTO ls_table.
  DESCRIBE FIELD wa_t093c-vrmafb
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t093c = LINES( it_t093c ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t093c
    USING lv_file
    ls_table .
    FREE IT_T093C .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T093D'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T093D = 'Yes'.
    DATA: COLUMN_T093D TYPE STRING.
    DATA TABLE_T093D TYPE STRING.
    COLUMN_T093D = 'MANDT BUKRS AFABER AFBRHY ZINBUC AUFBUC'.
    TABLE_T093D = 'T093D'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T093D)
FROM (TABLE_T093D)
WHERE MANDT =  s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T093D
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T093D.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t093d-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t093d-BUKRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFABER' INTO ls_table.
  DESCRIBE FIELD wa_t093d-AFABER
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFBRHY' INTO ls_table.
  DESCRIBE FIELD wa_t093d-AFBRHY
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ZINBUC' INTO ls_table.
  DESCRIBE FIELD wa_t093d-ZINBUC
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AUFBUC' INTO ls_table.
  DESCRIBE FIELD wa_t093d-AUFBUC
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t093d = LINES( it_t093d ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t093d
    USING lv_file
    ls_table .
    FREE IT_T093D .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T093T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T093T = 'Yes'.
    DATA: COLUMN_T093T TYPE STRING.
    DATA TABLE_T093T TYPE STRING.
    COLUMN_T093T = 'SPRAS MANDT AFBTXT AFBKTX AFAPL AFABER'.
    TABLE_T093T = 'T093T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T093T)
FROM (TABLE_T093T)
WHERE MANDT =  s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T093T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T093T.ACTT'.
  ls_table = 'SPRAS'.
  DESCRIBE FIELD wa_t093t-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_t093t-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFBTXT' INTO ls_table.
  DESCRIBE FIELD wa_t093t-afbtxt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFBKTX' INTO ls_table.
  DESCRIBE FIELD wa_t093t-afbktx
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t093t-afapl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFABER' INTO ls_table.
  DESCRIBE FIELD wa_t093t-afaber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t093t = LINES( it_t093t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t093t
    USING lv_file
    ls_table .
    FREE IT_T093T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T095'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T095 = 'Yes'.
    DATA: COLUMN_T095 TYPE STRING.
    DATA TABLE_T095 TYPE STRING.
    COLUMN_T095 = 'MANDT KTOPL KTOGR AFABE KTVBAB KTVZU KTREST KTMIND KTMEHR KTERLW KTENAK KTANZG KTANZA KTANSW KTANSG'.
    TABLE_T095 = 'T095'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T095)
FROM (TABLE_T095)
WHERE MANDT =  s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T095
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T095.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t095-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTOPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOGR' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTOGR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFABE' INTO ls_table.
  DESCRIBE FIELD wa_t095-AFABE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTVBAB' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTVBAB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTVZU' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTVZU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTREST' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTREST
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTMIND' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTMIND
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTMEHR' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTMEHR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTERLW' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTERLW
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTENAK' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTENAK
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTANZG' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTANZG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTANZA' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTANZA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTANSW' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTANSW
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTANSG' INTO ls_table.
  DESCRIBE FIELD wa_t095-KTANSG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t095 = LINES( it_t095 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t095
    USING lv_file
    ls_table .
    FREE IT_T095 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T095B'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T095B = 'Yes'.
    DATA: COLUMN_T095B TYPE STRING.
    DATA TABLE_T095B TYPE STRING.
    COLUMN_T095B = 'MANDT KTOPL KTOGR AFABE  KTSZUS KTSAFU KTNAFB KTNAFG KTNZUS KTNAFU KTSAFB KTSAFG'.
    TABLE_T095B = 'T095B'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T095B)
FROM (TABLE_T095B)
WHERE MANDT =  s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T095B
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T095B.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t095b-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOPL' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTOPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOGR' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTOGR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFABE' INTO ls_table.
  DESCRIBE FIELD wa_t095b-AFABE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTSZUS' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTSZUS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTSAFU' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTSAFU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTNAFB' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTNAFB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTNAFG' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTNAFG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTNZUS' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTNZUS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTNAFU' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTNAFU
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTSAFB' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTSAFB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTSAFG' INTO ls_table.
  DESCRIBE FIELD wa_t095b-KTSAFG
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t095b = LINES( it_t095b ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t095b
    USING lv_file
    ls_table .
    FREE IT_T095B .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T095T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T095T = 'Yes'.
    DATA: COLUMN_T095T TYPE STRING.
    DATA TABLE_T095T TYPE STRING.
    COLUMN_T095T = 'MANDT SPRAS KTOGR KTGRTX'.
    TABLE_T095T = 'T095T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T095T)
FROM (TABLE_T095T)
WHERE MANDT =  s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T095T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T095T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t095t-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t095t-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTOGR' INTO ls_table.
  DESCRIBE FIELD wa_t095t-KTOGR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTGRTX' INTO ls_table.
  DESCRIBE FIELD wa_t095t-KTGRTX
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t095t = LINES( it_t095t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t095t
    USING lv_file
    ls_table .
    FREE IT_T095T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T096'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T096 = 'Yes'.
    DATA: COLUMN_T096 TYPE STRING.
    DATA TABLE_T096 TYPE STRING.
    COLUMN_T096 = 'MANDT AFAPL BPLAKT'.
    TABLE_T096 = 'T096'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T096)
FROM (TABLE_T096)
WHERE MANDT =  s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T096
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T096.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t096-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t096-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BPLAKT' INTO ls_table.
  DESCRIBE FIELD wa_t096-BPLAKT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t096 = LINES( it_t096 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t096
    USING lv_file
    ls_table .
    FREE IT_T096 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T096T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T096T = 'Yes'.
    DATA: COLUMN_T096T TYPE STRING.
    DATA TABLE_T096T TYPE STRING.
    COLUMN_T096T = 'MANDT SPRAS AFAPL KTEXT'.
    TABLE_T096T = 'T096T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T096T)
FROM (TABLE_T096T)
WHERE MANDT =  s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T096T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T096T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t096t-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t096t-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AFAPL' INTO ls_table.
  DESCRIBE FIELD wa_t096t-AFAPL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t096t-KTEXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t096t = LINES( it_t096t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t096t
    USING lv_file
    ls_table .
    FREE IT_T096T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T100'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T100 = 'Yes'.
    DATA: COLUMN_T100 TYPE STRING.
    DATA TABLE_T100 TYPE STRING.
    COLUMN_T100 = 'SPRSL ARBGB MSGNR TEXT'.
    TABLE_T100 = 'T100'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T100)
FROM (TABLE_T100)
WHERE ( MSGNR IN ('207','117','108','081','082','083','504') ) AND SPRSL = SY-LANGU
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T100
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T100.ACTT'.
  ls_table = 'SPRSL'.
  DESCRIBE FIELD wa_t100-SPRSL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ARBGB' INTO ls_table.
  DESCRIBE FIELD wa_t100-ARBGB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGNR' INTO ls_table.
  DESCRIBE FIELD wa_t100-MSGNR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TEXT' INTO ls_table.
  DESCRIBE FIELD wa_t100-TEXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t100 = LINES( it_t100 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t100
    USING lv_file
    ls_table .
    FREE IT_T100 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T100C'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T100C = 'Yes'.
    DATA: COLUMN_T100C TYPE STRING.
    DATA TABLE_T100C TYPE STRING.
    COLUMN_T100C = 'MANDT ARBGB MSGNR UNAME MSGTS MSGTB'.
    TABLE_T100C = 'T100C'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T100C)
FROM (TABLE_T100C)
WHERE ( MSGNR IN ('207','117','108','081','082','083','504') )
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T100C
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 't100C.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t100c-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ARBGB' INTO ls_table.
  DESCRIBE FIELD wa_t100c-arbgb
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGNR' INTO ls_table.
  DESCRIBE FIELD wa_t100c-msgnr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'UNAME' INTO ls_table.
  DESCRIBE FIELD wa_t100c-uname
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGTS' INTO ls_table.
  DESCRIBE FIELD wa_t100c-msgts
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGTB' INTO ls_table.
  DESCRIBE FIELD wa_t100c-msgtb
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t100c = LINES( it_t100c ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t100c
    USING lv_file
    ls_table .
    FREE IT_T100C .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T100S'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T100S = 'Yes'.
    DATA: COLUMN_T100S TYPE STRING.
    DATA TABLE_T100S TYPE STRING.
    COLUMN_T100S = 'ARBGB MSGNR MSGTA MSGTD XIGNO'.
    TABLE_T100S = 'T100S'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T100S)
FROM (TABLE_T100S)
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T100S
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T100S.ACTT'.
ls_table = 'ARBGB'.
DESCRIBE FIELD WA_T100S-ARBGB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MSGNR' into ls_table.
DESCRIBE FIELD WA_T100S-MSGNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MSGTA' into ls_table.
DESCRIBE FIELD WA_T100S-MSGTA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MSGTD' into ls_table.
DESCRIBE FIELD WA_T100S-MSGTD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XIGNO' into ls_table.
DESCRIBE FIELD WA_T100S-XIGNO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T100S = lines( it_T100S ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T100S
using lv_file
 ls_table .
FREE IT_T100S .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T156'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T156 = 'Yes'.
    DATA: COLUMN_T156 TYPE STRING.
    DATA TABLE_T156 TYPE STRING.
    COLUMN_T156 = 'MANDT BWART KZKON'.
    TABLE_T156 = 'T156'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T156)
FROM (TABLE_T156)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T156
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T156.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t156-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BWART' INTO ls_table.
  DESCRIBE FIELD wa_t156-BWART
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KZKON' INTO ls_table.
  DESCRIBE FIELD wa_t156-KZKON
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t156 = LINES( it_t156 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t156
    USING lv_file
    ls_table .
    FREE it_t156 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T156T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T156T = 'Yes'.
    DATA: COLUMN_T156T TYPE STRING.
    DATA TABLE_T156T TYPE STRING.
    COLUMN_T156T = 'MANDT SPRAS BWART SOBKZ  BTEXT'.
    TABLE_T156T = 'T156T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T156T)
FROM (TABLE_T156T)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T156T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T156T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t156t-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t156t-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BWART' INTO ls_table.
  DESCRIBE FIELD wa_t156t-BWART
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SOBKZ' INTO ls_table.
  DESCRIBE FIELD wa_t156t-SOBKZ
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t156t-BTEXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t156t = LINES( it_t156t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t156t
    USING lv_file
    ls_table .
    FREE IT_T156T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T156W'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T156W = 'Yes'.
    DATA: COLUMN_T156W TYPE STRING.
    DATA TABLE_T156W TYPE STRING.
    COLUMN_T156W = 'VORSL BUSTW'.
    TABLE_T156W = 'T156W'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T156W)
FROM (TABLE_T156W)
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T156W
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T156W.ACTT'.
  ls_table = 'VORSL'.
  DESCRIBE FIELD wa_t156w-vorsl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUSTW' INTO ls_table.
  DESCRIBE FIELD wa_t156w-bustw
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t156w = LINES( it_t156w ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t156w
    USING lv_file
    ls_table .
    FREE IT_T156W .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T156X'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T156X = 'Yes'.
    DATA: COLUMN_T156X TYPE STRING.
    DATA TABLE_T156X TYPE STRING.
    COLUMN_T156X = 'MANDT BWART BUSTW KOMOK'.
    TABLE_T156X = 'T156X'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T156X)
FROM (TABLE_T156X)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T156X
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T156X.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t156x-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BWART' INTO ls_table.
  DESCRIBE FIELD wa_t156x-BWART
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUSTW' INTO ls_table.
  DESCRIBE FIELD wa_t156x-BUSTW
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOMOK' INTO ls_table.
  DESCRIBE FIELD wa_t156x-KOMOK
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t156x = LINES( it_t156x ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t156x
    USING lv_file
    ls_table .
    FREE IT_T156X .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T159C'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T159C = 'Yes'.
    DATA: COLUMN_T159C TYPE STRING.
    DATA TABLE_T159C TYPE STRING.
    COLUMN_T159C = 'MANDT WERKS ABCIN ANINV  ININV PZINV CCDEV'.
    TABLE_T159C = 'T159C'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T159C)
FROM (TABLE_T159C)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T159C
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T159C.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T159C-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WERKS' into ls_table.
DESCRIBE FIELD WA_T159C-WERKS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ABCIN' into ls_table.
DESCRIBE FIELD WA_T159C-ABCIN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ANINV' into ls_table.
DESCRIBE FIELD WA_T159C-ANINV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ININV' into ls_table.
DESCRIBE FIELD WA_T159C-ININV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PZINV' into ls_table.
DESCRIBE FIELD WA_T159C-PZINV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'CCDEV' into ls_table.
DESCRIBE FIELD WA_T159C-CCDEV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T159C = lines( it_T159C ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T159C
using lv_file
 ls_table .
FREE IT_T159C .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T159L'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T159L = 'Yes'.
    DATA: COLUMN_T159L TYPE STRING.
    DATA TABLE_T159L TYPE STRING.
    COLUMN_T159L = 'MANDT WERKS XLAUT'.
    TABLE_T159L = 'T159L'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T159L)
FROM (TABLE_T159L)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T159L
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T159L.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t159l-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WERKS' INTO ls_table.
  DESCRIBE FIELD wa_t159l-werks
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XLAUT' INTO ls_table.
  DESCRIBE FIELD wa_t159l-XLAUT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t159l = LINES( it_t159l ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t159l
    USING lv_file
    ls_table .
    FREE IT_T159L .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T160M'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T160M = 'Yes'.
    DATA: COLUMN_T160M TYPE STRING.
    DATA TABLE_T160M TYPE STRING.
    COLUMN_T160M = 'MANDT MSGVS ARBGB MSGNR  MSGTP MSGTYWS'.
    TABLE_T160M = 'T160M'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T160M)
FROM (TABLE_T160M)
WHERE MANDT = s_pclien AND ( MSGNR IN ('207','117','108') )
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T160M
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T160M.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t160m-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGVS' INTO ls_table.
  DESCRIBE FIELD wa_t160m-MSGVS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ARBGB' INTO ls_table.
  DESCRIBE FIELD wa_t160m-ARBGB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGNR' INTO ls_table.
  DESCRIBE FIELD wa_t160m-MSGNR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGTP' INTO ls_table.
  DESCRIBE FIELD wa_t160m-MSGTP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MSGTYWS' INTO ls_table.
  DESCRIBE FIELD wa_t160m-MSGTYWS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t160m = LINES( it_t160m ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t160m
    USING lv_file
    ls_table .
    FREE IT_T160M .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T161'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T161 = 'Yes'.
    DATA: COLUMN_T161 TYPE STRING.
    DATA TABLE_T161 TYPE STRING.
    COLUMN_T161 = 'MANDT BSTYP BSART BREFN'.
    TABLE_T161 = 'T161'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T161)
FROM (TABLE_T161)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T161
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T161.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t161-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSTYP' INTO ls_table.
  DESCRIBE FIELD wa_t161-BSTYP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSART' INTO ls_table.
  DESCRIBE FIELD wa_t161-bsart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BREFN' INTO ls_table.
  DESCRIBE FIELD wa_t161-BREFN
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t161 = LINES( it_t161 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t161
    USING lv_file
    ls_table .
    FREE IT_T161 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T161S'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T161S = 'Yes'.
    DATA: COLUMN_T161S TYPE STRING.
    DATA TABLE_T161S TYPE STRING.
    COLUMN_T161S = 'MANDT FRGKZ FIXBP FRANG  FRBST FLREF KZFAE TLFAE'.
    TABLE_T161S = 'T161S'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T161S)
FROM (TABLE_T161S)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T161S
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T161S.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T161S-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGKZ' into ls_table.
DESCRIBE FIELD WA_T161S-FRGKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FIXBP' into ls_table.
DESCRIBE FIELD WA_T161S-FIXBP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRANG' into ls_table.
DESCRIBE FIELD WA_T161S-FRANG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRBST' into ls_table.
DESCRIBE FIELD WA_T161S-FRBST
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FLREF' into ls_table.
DESCRIBE FIELD WA_T161S-FLREF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KZFAE' into ls_table.
DESCRIBE FIELD WA_T161S-KZFAE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TLFAE' into ls_table.
DESCRIBE FIELD WA_T161S-TLFAE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T161S = lines( it_T161S ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T161S
using lv_file
 ls_table .
FREE IT_T161S .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T161T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T161T = 'Yes'.
    DATA: COLUMN_T161T TYPE STRING.
    DATA TABLE_T161T TYPE STRING.
    COLUMN_T161T = 'MANDT SPRAS BSART BSTYP  BATXT'.
    TABLE_T161T = 'T161T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T161T)
FROM (TABLE_T161T)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T161T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T161T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t161t-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t161t-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSART' INTO ls_table.
  DESCRIBE FIELD wa_t161t-BSART
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSTYP' INTO ls_table.
  DESCRIBE FIELD wa_t161t-BSTYP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BATXT' INTO ls_table.
  DESCRIBE FIELD wa_t161t-BATXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t161t = LINES( it_t161t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t161t
    USING lv_file
    ls_table .
    FREE IT_T161T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T162'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T162 = 'Yes'.
    DATA: COLUMN_T162 TYPE STRING.
    DATA TABLE_T162 TYPE STRING.
    COLUMN_T162 = 'MANDT FLREF FAUS1 FAUS2 FAUS3 BSTYP'.
    TABLE_T162 = 'T162'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T162)
FROM (TABLE_T162)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T162
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T162.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t162-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FLREF' INTO ls_table.
  DESCRIBE FIELD wa_t162-flref
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS1' INTO ls_table.
  DESCRIBE FIELD wa_t162-faus1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS2' INTO ls_table.
  DESCRIBE FIELD wa_t162-faus2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS3' INTO ls_table.
  DESCRIBE FIELD wa_t162-faus3
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSTYP' INTO ls_table.
  DESCRIBE FIELD wa_t162-bstyp
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t162 = LINES( it_t162 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t162
    USING lv_file
    ls_table .
    FREE IT_T162 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T162K'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T162K = 'Yes'.
    DATA: COLUMN_T162K TYPE STRING.
    DATA TABLE_T162K TYPE STRING.
    COLUMN_T162K = 'MANDT KNTTP FAUS1 FAUS2'.
    TABLE_T162K = 'T162K'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T162K)
FROM (TABLE_T162K)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T162K
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T162K.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t162k-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KNTTP' INTO ls_table.
  DESCRIBE FIELD wa_t162k-KNTTP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS1' INTO ls_table.
  DESCRIBE FIELD wa_t162k-FAUS1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUS2' INTO ls_table.
  DESCRIBE FIELD wa_t162k-FAUS2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t162k = LINES( it_t162k ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t162k
    USING lv_file
    ls_table .
    FREE IT_T162K .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T162T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T162T = 'Yes'.
    DATA: COLUMN_T162T TYPE STRING.
    DATA TABLE_T162T TYPE STRING.
    COLUMN_T162T = 'MANDT SPRAS FLREF FLRTX'.
    TABLE_T162T = 'T162T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T162T)
FROM (TABLE_T162T)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T162T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T162T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t162t-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t162t-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FLREF' INTO ls_table.
  DESCRIBE FIELD wa_t162t-FLREF
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FLRTX' INTO ls_table.
  DESCRIBE FIELD wa_t162t-FLRTX
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t162t = LINES( it_t162t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t162t
    USING lv_file
    ls_table .
    FREE IT_T162T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T162X'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T162X = 'Yes'.
    DATA: COLUMN_T162X TYPE STRING.
    DATA TABLE_T162X TYPE STRING.
    COLUMN_T162X = 'MANDT SPRAS FAUTB FAUNR  FAUTX FAUGR FAUBS FAUAN  FAUKT FAULP FAUBA'.
    TABLE_T162X = 'T162X'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T162X)
FROM (TABLE_T162X)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T162X
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T162X.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t162x-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t162x-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUTB' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUTB
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUNR' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUNR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUTX' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUTX
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUGR' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUGR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUBS' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUBS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUAN' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUAN
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUKT' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUKT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAULP' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAULP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUBA' INTO ls_table.
  DESCRIBE FIELD wa_t162x-FAUBA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t162x = LINES( it_t162x ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t162x
    USING lv_file
    ls_table .
    FREE IT_T162X .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T162Y'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T162Y = 'Yes'.
    DATA: COLUMN_T162Y TYPE STRING.
    DATA TABLE_T162Y TYPE STRING.
    COLUMN_T162Y = 'MANDT SPRAS FAUGR FAUGT'.
    TABLE_T162Y = 'T162Y'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T162Y)
FROM (TABLE_T162Y)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T162Y
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T162Y.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t162y-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t162y-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUGR' INTO ls_table.
  DESCRIBE FIELD wa_t162y-FAUGR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FAUGT' INTO ls_table.
  DESCRIBE FIELD wa_t162y-FAUGT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t162y = LINES( it_t162y ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t162y
    USING lv_file
    ls_table .
    FREE IT_T162Y .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T163'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T163 = 'Yes'.
    DATA: COLUMN_T163 TYPE STRING.
    DATA TABLE_T163 TYPE STRING.
    COLUMN_T163 = 'MANDT PSTYP MATNO KNTZU BFKNZ WEPOS WEPOV WEUNB WEUNV REPOS REPOV STAFO J_1BITMTYP'.
    TABLE_T163 = 'T163'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T163)
FROM (TABLE_T163)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T163
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T163.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T163-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PSTYP' into ls_table.
DESCRIBE FIELD WA_T163-PSTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MATNO' into ls_table.
DESCRIBE FIELD WA_T163-MATNO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KNTZU' into ls_table.
DESCRIBE FIELD WA_T163-KNTZU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BFKNZ' into ls_table.
DESCRIBE FIELD WA_T163-BFKNZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WEPOS' into ls_table.
DESCRIBE FIELD WA_T163-WEPOS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WEPOV' into ls_table.
DESCRIBE FIELD WA_T163-WEPOV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WEUNB' into ls_table.
DESCRIBE FIELD WA_T163-WEUNB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WEUNV' into ls_table.
DESCRIBE FIELD WA_T163-WEUNV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'REPOS' into ls_table.
DESCRIBE FIELD WA_T163-REPOS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'REPOV' into ls_table.
DESCRIBE FIELD WA_T163-REPOV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STAFO' into ls_table.
DESCRIBE FIELD WA_T163-STAFO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1BITMTYP' into ls_table.
DESCRIBE FIELD WA_T163-J_1BITMTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T163 = lines( it_T163 ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T163
using lv_file
 ls_table .
FREE IT_T163 .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T163A'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T163A = 'Yes'.
    DATA: COLUMN_T163A TYPE STRING.
    DATA TABLE_T163A TYPE STRING.
    COLUMN_T163A = 'MANDT PSTYP KNTTP'.
    TABLE_T163A = 'T163A'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T163A)
FROM (TABLE_T163A)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T163A
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T163A.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T163A-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PSTYP' into ls_table.
DESCRIBE FIELD WA_T163A-PSTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KNTTP' into ls_table.
DESCRIBE FIELD WA_T163A-KNTTP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T163A = lines( it_T163A ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T163A
using lv_file
 ls_table .
FREE IT_T163A .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T163K'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T163K = 'Yes'.
    DATA: COLUMN_T163K TYPE STRING.
    DATA TABLE_T163K TYPE STRING.
    COLUMN_T163K = 'MANDT KNTTP REPOS WEPOS WEPOV'.
    TABLE_T163K = 'T163K'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T163K)
FROM (TABLE_T163K)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T163K
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T163K.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t163k-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KNTTP' INTO ls_table.
  DESCRIBE FIELD wa_t163k-KNTTP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'REPOS' INTO ls_table.
  DESCRIBE FIELD wa_t163k-repos
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WEPOS' INTO ls_table.
  DESCRIBE FIELD wa_t163k-wepos
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WEPOV' INTO ls_table.
  DESCRIBE FIELD wa_t163k-wepov
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t163k = LINES( it_t163k ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t163k
    USING lv_file
    ls_table .
    FREE IT_T163K .
    FREE it_t163k .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T163I'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T163I = 'Yes'.
    DATA: COLUMN_T163I TYPE STRING.
    DATA TABLE_T163I TYPE STRING.
    COLUMN_T163I = 'MANDT SPRAS KNTTP KNTTX'.
    TABLE_T163I = 'T163I'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T163I)
FROM (TABLE_T163I)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T163I
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T163I.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t163i-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t163i-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KNTTP' INTO ls_table.
  DESCRIBE FIELD wa_t163i-KNTTP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KNTTX' INTO ls_table.
  DESCRIBE FIELD wa_t163i-KNTTX
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t163i = LINES( it_t163i ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t163i
    USING lv_file
    ls_table .
    FREE it_t163i .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T163Y'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T163Y = 'Yes'.
    DATA: COLUMN_T163Y TYPE STRING.
    DATA TABLE_T163Y TYPE STRING.
    COLUMN_T163Y = 'MANDT SPRAS PSTYP PTEXT'.
    TABLE_T163Y = 'T163Y'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T163Y)
FROM (TABLE_T163Y)
WHERE MANDT = s_pclien AND SPRAS = 'E'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T163Y
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T163Y.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t163y-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t163y-SPRAS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PSTYP' INTO ls_table.
  DESCRIBE FIELD wa_t163y-PSTYP
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t163y-PTEXT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t163i = LINES( it_t163y ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t163y
    USING lv_file
    ls_table .
    FREE it_t163y .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T169G'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T169G = 'Yes'.
    DATA: COLUMN_T169G TYPE STRING.
    DATA TABLE_T169G TYPE STRING.
    COLUMN_T169G = 'MANDT BUKRS TOLSL WERT1  XW1JA XW1NE WERT2 XW2JA  XW2NE PROZ1 XP1JA XP1NE PROZ2 XP2JA XP2NE'.
    TABLE_T169G = 'T169G'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T169G)
FROM (TABLE_T169G)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T169G
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T169G.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t169g-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t169g-BUKRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TOLSL' INTO ls_table.
  DESCRIBE FIELD wa_t169g-TOLSL
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WERT1' INTO ls_table.
  DESCRIBE FIELD wa_t169g-WERT1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XW1JA' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XW1JA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XW1NE' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XW1NE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WERT2' INTO ls_table.
  DESCRIBE FIELD wa_t169g-WERT2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XW2JA' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XW2JA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XW2NE' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XW2NE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PROZ1' INTO ls_table.
  DESCRIBE FIELD wa_t169g-PROZ1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XP1JA' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XP1JA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XP1NE' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XP1NE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PROZ2' INTO ls_table.
  DESCRIBE FIELD wa_t169g-PROZ2
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XP2JA' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XP2JA
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XP2NE' INTO ls_table.
  DESCRIBE FIELD wa_t169g-XP2NE
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t169g = LINES( it_t169g ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t169g
    USING lv_file
    ls_table .
    FREE IT_T169G .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T169P'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T169P = 'Yes'.
    DATA: COLUMN_T169P TYPE STRING.
    DATA TABLE_T169P TYPE STRING.
    COLUMN_T169P = 'MANDT BUKRS XBLDAT XBUKRS XXBLNR'.
    TABLE_T169P = 'T169P'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T169P)
FROM (TABLE_T169P)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T169P
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T169P.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t169p-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t169p-BUKRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XBLDAT' INTO ls_table.
  DESCRIBE FIELD wa_t169p-xbldat
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XBUKRS' INTO ls_table.
  DESCRIBE FIELD wa_t169p-XBUKRS
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XXBLNR' INTO ls_table.
  DESCRIBE FIELD wa_t169p-XXBLNR
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t169p = LINES( it_t169p ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t169p
    USING lv_file
    ls_table .
    FREE IT_T169P .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T16FB'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T16FB = 'Yes'.
    DATA: COLUMN_T16FB TYPE STRING.
    DATA TABLE_T16FB TYPE STRING.
    COLUMN_T16FB = 'MANDT FRGKE KZFRE KZFAE  TLFAE'.
    TABLE_T16FB = 'T16FB'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T16FB)
FROM (TABLE_T16FB)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T16FB
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T16FB.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T16FB-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGKE' into ls_table.
DESCRIBE FIELD WA_T16FB-FRGKE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KZFRE' into ls_table.
DESCRIBE FIELD WA_T16FB-KZFRE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KZFAE' into ls_table.
DESCRIBE FIELD WA_T16FB-KZFAE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TLFAE' into ls_table.
DESCRIBE FIELD WA_T16FB-TLFAE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T16FB = lines( it_T16FB ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T16FB
using lv_file
 ls_table .
FREE IT_T16FB .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T16FC'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T16FC = 'Yes'.
    DATA: COLUMN_T16FC TYPE STRING.
    DATA TABLE_T16FC TYPE STRING.
    COLUMN_T16FC = 'MANDT FRGGR FRGCO FRGWF'.
    TABLE_T16FC = 'T16FC'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T16FC)
FROM (TABLE_T16FC)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T16FC
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T16FC.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T16FC-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGGR' into ls_table.
DESCRIBE FIELD WA_T16FC-FRGGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGCO' into ls_table.
DESCRIBE FIELD WA_T16FC-FRGCO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGWF' into ls_table.
DESCRIBE FIELD WA_T16FC-FRGWF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T16FC = lines( it_T16FC ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T16FC
using lv_file
 ls_table .
FREE IT_T16FC .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T16FE'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T16FE = 'Yes'.
    DATA: COLUMN_T16FE TYPE STRING.
    DATA TABLE_T16FE TYPE STRING.
    COLUMN_T16FE = 'MANDT SPRAS FRGKE FRGET'.
    TABLE_T16FE = 'T16FE'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T16FE)
FROM (TABLE_T16FE)
WHERE MANDT = s_pclien AND SPRAS ='EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T16FE
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T16FE.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T16FE-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SPRAS' into ls_table.
DESCRIBE FIELD WA_T16FE-SPRAS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGKE' into ls_table.
DESCRIBE FIELD WA_T16FE-FRGKE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGET' into ls_table.
DESCRIBE FIELD WA_T16FE-FRGET
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T16FE = lines( it_T16FE ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T16FE
using lv_file
 ls_table .
FREE IT_T16FE .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T16FG'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T16FG = 'Yes'.
    DATA: COLUMN_T16FG TYPE STRING.
    DATA TABLE_T16FG TYPE STRING.
    COLUMN_T16FG = 'MANDT FRGGR FRGOT FRGFG  FRGKL'.
    TABLE_T16FG = 'T16FG'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T16FG)
FROM (TABLE_T16FG)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T16FG
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T16FG.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T16FG-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGGR' into ls_table.
DESCRIBE FIELD WA_T16FG-FRGGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGOT' into ls_table.
DESCRIBE FIELD WA_T16FG-FRGOT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGFG' into ls_table.
DESCRIBE FIELD WA_T16FG-FRGFG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGKL' into ls_table.
DESCRIBE FIELD WA_T16FG-FRGKL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T16FG = lines( it_T16FG ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T16FG
using lv_file
 ls_table .
FREE IT_T16FG .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T16FK'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T16FK = 'Yes'.
    DATA: COLUMN_T16FK TYPE STRING.
    DATA TABLE_T16FK TYPE STRING.
    COLUMN_T16FK = 'MANDT FRGGR FRGSX FRGA1  FRGA2 FRGA3 FRGA4 FRGA5  FRGA6 FRGA7 FRGA8 FRGKX'.
    TABLE_T16FK = 'T16FK'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T16FK)
FROM (TABLE_T16FK)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T16FK
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T16FK.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T16FK-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGGR' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGSX' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGSX
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA1' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA2' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA3' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA3
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA4' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA4
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA5' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA5
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA6' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA6
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA7' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA7
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA8' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGA8
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGKX' into ls_table.
DESCRIBE FIELD WA_T16FK-FRGKX
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T16FK = lines( it_T16FK ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T16FK
using lv_file
 ls_table .
FREE IT_T16FK .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T16FS'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T16FS = 'Yes'.
    DATA: COLUMN_T16FS TYPE STRING.
    DATA TABLE_T16FS TYPE STRING.
    COLUMN_T16FS = 'MANDT FRGGR FRGSX FRGC1  FRGC2 FRGC3 FRGC4 FRGC5  FRGC6 FRGC7 FRGC8'.
    TABLE_T16FS = 'T16FS'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T16FS)
FROM (TABLE_T16FS)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T16FS
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T16FS.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T16FS-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGGR' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGSX' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGSX
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC1' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC2' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC3' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC3
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC4' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC4
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC5' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC5
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC6' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC6
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC7' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC7
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGC8' into ls_table.
DESCRIBE FIELD WA_T16FS-FRGC8
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T16FS = lines( it_T16FS ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T16FS
using lv_file
 ls_table .
FREE IT_T16FS .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T16FV'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T16FV = 'Yes'.
    DATA: COLUMN_T16FV TYPE STRING.
    DATA TABLE_T16FV TYPE STRING.
    COLUMN_T16FV = 'MANDT FRGGR FRGSX FRGCO  FRGA1 FRGA2 FRGA3 FRGA4  FRGA5 FRGA6 FRGA7 FRGA8'.
    TABLE_T16FV = 'T16FV'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T16FV)
FROM (TABLE_T16FV)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T16FV
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T16FV.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T16FV-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGGR' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGSX' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGSX
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGCO' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGCO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA1' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA2' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA3' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA3
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA4' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA4
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA5' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA5
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA6' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA6
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA7' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA7
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FRGA8' into ls_table.
DESCRIBE FIELD WA_T16FV-FRGA8
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T16FV = lines( it_T16FV ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T16FV
using lv_file
 ls_table .
FREE IT_T16FV .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T683S'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T683S = 'Yes'.
    DATA: COLUMN_T683S TYPE STRING.
    DATA TABLE_T683S TYPE STRING.
    CONCATENATE    'MANDT KVEWE KAPPL KALSM  STUNR ZAEHK KSCHL STUNB'
                   ' STUN2 KAUTO KOBED KZWIW  KSTAT KOFRM KOFRA KVSL1'
                   ' KVSL2 DRUKZ KOBLI' INTO COLUMN_T683S.
    TABLE_T683S = 'T683S'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T683S)
FROM (TABLE_T683S)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T683S
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T683S.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T683S-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVEWE' into ls_table.
DESCRIBE FIELD WA_T683S-KVEWE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_T683S-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSM' into ls_table.
DESCRIBE FIELD WA_T683S-KALSM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STUNR' into ls_table.
DESCRIBE FIELD WA_T683S-STUNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ZAEHK' into ls_table.
DESCRIBE FIELD WA_T683S-ZAEHK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_T683S-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STUNB' into ls_table.
DESCRIBE FIELD WA_T683S-STUNB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STUN2' into ls_table.
DESCRIBE FIELD WA_T683S-STUN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAUTO' into ls_table.
DESCRIBE FIELD WA_T683S-KAUTO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOBED' into ls_table.
DESCRIBE FIELD WA_T683S-KOBED
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KZWIW' into ls_table.
DESCRIBE FIELD WA_T683S-KZWIW
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSTAT' into ls_table.
DESCRIBE FIELD WA_T683S-KSTAT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOFRM' into ls_table.
DESCRIBE FIELD WA_T683S-KOFRM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOFRA' into ls_table.
DESCRIBE FIELD WA_T683S-KOFRA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVSL1' into ls_table.
DESCRIBE FIELD WA_T683S-KVSL1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVSL2' into ls_table.
DESCRIBE FIELD WA_T683S-KVSL2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'DRUKZ' into ls_table.
DESCRIBE FIELD WA_T683S-DRUKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOBLI' into ls_table.
DESCRIBE FIELD WA_T683S-KOBLI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T683S = lines( it_T683S ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T683S
using lv_file
 ls_table .
FREE IT_T683S .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T683V'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T683V = 'Yes'.
    DATA: COLUMN_T683V TYPE STRING.
    DATA TABLE_T683V TYPE STRING.
    COLUMN_T683V = 'MANDT VKORG VTWEG SPART  KALVG KALKS KALSM KARTV KALNB KALBB'.
    TABLE_T683V = 'T683V'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T683V)
FROM (TABLE_T683V)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T683V
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T683V.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T683V-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKORG' into ls_table.
DESCRIBE FIELD WA_T683V-VKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VTWEG' into ls_table.
DESCRIBE FIELD WA_T683V-VTWEG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SPART' into ls_table.
DESCRIBE FIELD WA_T683V-SPART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALVG' into ls_table.
DESCRIBE FIELD WA_T683V-KALVG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALKS' into ls_table.
DESCRIBE FIELD WA_T683V-KALKS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSM' into ls_table.
DESCRIBE FIELD WA_T683V-KALSM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KARTV' into ls_table.
DESCRIBE FIELD WA_T683V-KARTV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALNB' into ls_table.
DESCRIBE FIELD WA_T683V-KALNB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALBB' into ls_table.
DESCRIBE FIELD WA_T683V-KALBB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T683V = lines( it_T683V ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T683V
using lv_file
 ls_table .
FREE IT_T683V .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T685A'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T685A = 'Yes'.
    DATA: COLUMN_T685A TYPE STRING.
    DATA TABLE_T685A TYPE STRING.
    CONCATENATE    'MANDT KAPPL KSCHL KRECH KZBZG KNTYP KONAU KMANU'
                   ' GRZGF GRLNR GRMEN GANZZ KGRPE KRELI KDUPL KRUEK'
                   ' KOUPD SOSTA KOFRS KALSM KZNEP KOAID KKOPF KPOSI'
                   ' KNEGA TXPRF KSTPR KAEND_BTR KAEND_WRT KAEND_UFK'
                   ' KAEND_RCH KAEND_LOE KAEND_MEH IDXUP RUKOR BOVER'
                   ' KPRDT STFKZ PRECH BNKWE AKTKO VKKAL VKOBL RKAPPL'
                   ' RKSCHL BERGL VHART RDIFA KFKIV KVARC KMENG MDFLG'
                   ' KTREL BNKTK KFRST TXTGR TDID KDELE KBFLAG OIGRNET'
                   ' OIINVCYC OIREPORT OIHEAD OIITEM OIERRHAN OIDATA'
                   ' OIA_SPLTIV OIRCONDCL OIU_EP WTY_KONDM WTY_KATEG' INTO COLUMN_T685A.
    TABLE_T685A = 'T685A'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T685A)
FROM (TABLE_T685A)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T685A
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T685A.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_T685A-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_T685A-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_T685A-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KRECH' into ls_table.
DESCRIBE FIELD WA_T685A-KRECH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KZBZG' into ls_table.
DESCRIBE FIELD WA_T685A-KZBZG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KNTYP' into ls_table.
DESCRIBE FIELD WA_T685A-KNTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KONAU' into ls_table.
DESCRIBE FIELD WA_T685A-KONAU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KMANU' into ls_table.
DESCRIBE FIELD WA_T685A-KMANU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRZGF' into ls_table.
DESCRIBE FIELD WA_T685A-GRZGF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRLNR' into ls_table.
DESCRIBE FIELD WA_T685A-GRLNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRMEN' into ls_table.
DESCRIBE FIELD WA_T685A-GRMEN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GANZZ' into ls_table.
DESCRIBE FIELD WA_T685A-GANZZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KGRPE' into ls_table.
DESCRIBE FIELD WA_T685A-KGRPE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KRELI' into ls_table.
DESCRIBE FIELD WA_T685A-KRELI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KDUPL' into ls_table.
DESCRIBE FIELD WA_T685A-KDUPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KRUEK' into ls_table.
DESCRIBE FIELD WA_T685A-KRUEK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOUPD' into ls_table.
DESCRIBE FIELD WA_T685A-KOUPD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SOSTA' into ls_table.
DESCRIBE FIELD WA_T685A-SOSTA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOFRS' into ls_table.
DESCRIBE FIELD WA_T685A-KOFRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSM' into ls_table.
DESCRIBE FIELD WA_T685A-KALSM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KZNEP' into ls_table.
DESCRIBE FIELD WA_T685A-KZNEP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOAID' into ls_table.
DESCRIBE FIELD WA_T685A-KOAID
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KKOPF' into ls_table.
DESCRIBE FIELD WA_T685A-KKOPF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KPOSI' into ls_table.
DESCRIBE FIELD WA_T685A-KPOSI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KNEGA' into ls_table.
DESCRIBE FIELD WA_T685A-KNEGA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXPRF' into ls_table.
DESCRIBE FIELD WA_T685A-TXPRF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSTPR' into ls_table.
DESCRIBE FIELD WA_T685A-KSTPR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAEND_BTR' into ls_table.
DESCRIBE FIELD WA_T685A-KAEND_BTR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAEND_WRT' into ls_table.
DESCRIBE FIELD WA_T685A-KAEND_WRT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAEND_UFK' into ls_table.
DESCRIBE FIELD WA_T685A-KAEND_UFK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAEND_RCH' into ls_table.
DESCRIBE FIELD WA_T685A-KAEND_RCH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAEND_LOE' into ls_table.
DESCRIBE FIELD WA_T685A-KAEND_LOE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAEND_MEH' into ls_table.
DESCRIBE FIELD WA_T685A-KAEND_MEH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'IDXUP' into ls_table.
DESCRIBE FIELD WA_T685A-IDXUP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RUKOR' into ls_table.
DESCRIBE FIELD WA_T685A-RUKOR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BOVER' into ls_table.
DESCRIBE FIELD WA_T685A-BOVER
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KPRDT' into ls_table.
DESCRIBE FIELD WA_T685A-KPRDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STFKZ' into ls_table.
DESCRIBE FIELD WA_T685A-STFKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PRECH' into ls_table.
DESCRIBE FIELD WA_T685A-PRECH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BNKWE' into ls_table.
DESCRIBE FIELD WA_T685A-BNKWE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AKTKO' into ls_table.
DESCRIBE FIELD WA_T685A-AKTKO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKKAL' into ls_table.
DESCRIBE FIELD WA_T685A-VKKAL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKOBL' into ls_table.
DESCRIBE FIELD WA_T685A-VKOBL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RKAPPL' into ls_table.
DESCRIBE FIELD WA_T685A-RKAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RKSCHL' into ls_table.
DESCRIBE FIELD WA_T685A-RKSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BERGL' into ls_table.
DESCRIBE FIELD WA_T685A-BERGL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VHART' into ls_table.
DESCRIBE FIELD WA_T685A-VHART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RDIFA' into ls_table.
DESCRIBE FIELD WA_T685A-RDIFA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KFKIV' into ls_table.
DESCRIBE FIELD WA_T685A-KFKIV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVARC' into ls_table.
DESCRIBE FIELD WA_T685A-KVARC
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KMENG' into ls_table.
DESCRIBE FIELD WA_T685A-KMENG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MDFLG' into ls_table.
DESCRIBE FIELD WA_T685A-MDFLG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTREL' into ls_table.
DESCRIBE FIELD WA_T685A-KTREL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BNKTK' into ls_table.
DESCRIBE FIELD WA_T685A-BNKTK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KFRST' into ls_table.
DESCRIBE FIELD WA_T685A-KFRST
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXTGR' into ls_table.
DESCRIBE FIELD WA_T685A-TXTGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TDID' into ls_table.
DESCRIBE FIELD WA_T685A-TDID
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KDELE' into ls_table.
DESCRIBE FIELD WA_T685A-KDELE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KBFLAG' into ls_table.
DESCRIBE FIELD WA_T685A-KBFLAG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIGRNET' into ls_table.
DESCRIBE FIELD WA_T685A-OIGRNET
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC' into ls_table.
DESCRIBE FIELD WA_T685A-OIINVCYC
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIREPORT' into ls_table.
DESCRIBE FIELD WA_T685A-OIREPORT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIHEAD' into ls_table.
DESCRIBE FIELD WA_T685A-OIHEAD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIITEM' into ls_table.
DESCRIBE FIELD WA_T685A-OIITEM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIERRHAN' into ls_table.
DESCRIBE FIELD WA_T685A-OIERRHAN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIDATA' into ls_table.
DESCRIBE FIELD WA_T685A-OIDATA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIA_SPLTIV' into ls_table.
DESCRIBE FIELD WA_T685A-OIA_SPLTIV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIRCONDCL' into ls_table.
DESCRIBE FIELD WA_T685A-OIRCONDCL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIU_EP' into ls_table.
DESCRIBE FIELD WA_T685A-OIU_EP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WTY_KONDM' into ls_table.
DESCRIBE FIELD WA_T685A-WTY_KONDM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WTY_KATEG' into ls_table.
DESCRIBE FIELD WA_T685A-WTY_KATEG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_T685A = lines( it_T685A ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_T685A
using lv_file
 ls_table .
FREE IT_T685A .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T691F'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T691F = 'Yes'.
    DATA: COLUMN_T691F TYPE STRING.
    DATA TABLE_T691F TYPE STRING.
    CONCATENATE    'PDTOL STREA STSET STVAW  STVLW WSWIN PDMAX OITOL'
                   ' MAVAL MANDT KKBER DUNNG CTLPC CRPRC CRMGR CMPAH'
                   ' CMPAG CMPAF CMPAE CMPAD CMPAC CMPAB CMPAA CECKI DKLIM WOVLW WSREA WLSET MAREA MASET' INTO COLUMN_T691F.
    TABLE_T691F = 'T691F'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T691F)
FROM (TABLE_T691F)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T691F
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T691F.ACTT'.
  ls_table = 'PDTOL'.
  DESCRIBE FIELD wa_t691f-pdtol
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STREA' INTO ls_table.
  DESCRIBE FIELD wa_t691f-strea
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STSET' INTO ls_table.
  DESCRIBE FIELD wa_t691f-stset
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STVAW' INTO ls_table.
  DESCRIBE FIELD wa_t691f-stvaw
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STVLW' INTO ls_table.
  DESCRIBE FIELD wa_t691f-stvlw
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WSWIN' INTO ls_table.
  DESCRIBE FIELD wa_t691f-wswin
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PDMAX' INTO ls_table.
  DESCRIBE FIELD wa_t691f-pdmax
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'OITOL' INTO ls_table.
  DESCRIBE FIELD wa_t691f-oitol
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MAVAL' INTO ls_table.
  DESCRIBE FIELD wa_t691f-maval
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_t691f-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KKBER' INTO ls_table.
  DESCRIBE FIELD wa_t691f-kkber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'DUNNG' INTO ls_table.
  DESCRIBE FIELD wa_t691f-dunng
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CTLPC' INTO ls_table.
  DESCRIBE FIELD wa_t691f-ctlpc
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CRPRC' INTO ls_table.
  DESCRIBE FIELD wa_t691f-crprc
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CRMGR' INTO ls_table.
  DESCRIBE FIELD wa_t691f-crmgr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAH' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpah
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAG' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpag
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAF' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpaf
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAE' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpae
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAD' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpad
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAC' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpac
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAB' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpab
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMPAA' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cmpaa
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CECKI' INTO ls_table.
  DESCRIBE FIELD wa_t691f-cecki
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'DKLIM' INTO ls_table.
  DESCRIBE FIELD wa_t691f-dklim
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WOVLW' INTO ls_table.
  DESCRIBE FIELD wa_t691f-WOVLW
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WSREA' INTO ls_table.
  DESCRIBE FIELD wa_t691f-wsrea
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WLSET' INTO ls_table.
  DESCRIBE FIELD wa_t691f-wlset
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MAREA' INTO ls_table.
  DESCRIBE FIELD wa_t691f-marea
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MASET' INTO ls_table.
  DESCRIBE FIELD wa_t691f-maset
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t691f = LINES( it_t691f ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t691f
    USING lv_file
    ls_table .
    FREE IT_T691F .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T691G'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T691G = 'Yes'.
    DATA: COLUMN_T691G TYPE STRING.
    DATA TABLE_T691G TYPE STRING.
    COLUMN_T691G = 'SPRAS MANDT CRMGR CTLPC  KKBER PRBEZ'.
    TABLE_T691G = 'T691G'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T691G)
FROM (TABLE_T691G)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T691G
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'T691G.ACTT'.
  ls_table = 'SPRAS'.
  DESCRIBE FIELD wa_t691g-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_t691g-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CRMGR' INTO ls_table.
  DESCRIBE FIELD wa_t691g-crmgr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CTLPC' INTO ls_table.
  DESCRIBE FIELD wa_t691g-ctlpc
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KKBER' INTO ls_table.
  DESCRIBE FIELD wa_t691g-kkber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'PRBEZ' INTO ls_table.
  DESCRIBE FIELD wa_t691g-prbez
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t691g = LINES( it_t691g ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_t691g
    USING lv_file
    ls_table .
    FREE IT_T691G .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TBAER'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TBAER = 'Yes'.
    DATA: COLUMN_TBAER TYPE STRING.
    DATA TABLE_TBAER TYPE STRING.
    COLUMN_TBAER = 'BUKRS FNAME KOART UMSKS  XAEND XAUSZ XBUPE MANDT'.
    TABLE_TBAER = 'TBAER'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TBAER)
FROM (TABLE_TBAER)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TBAER
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TBAER.ACTT'.
  ls_table = 'BUKRS'.
  DESCRIBE FIELD wa_tbaer-bukrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FNAME' INTO ls_table.
  DESCRIBE FIELD wa_tbaer-fname
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOART' INTO ls_table.
  DESCRIBE FIELD wa_tbaer-koart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'UMSKS' INTO ls_table.
  DESCRIBE FIELD wa_tbaer-umsks
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XAEND' INTO ls_table.
  DESCRIBE FIELD wa_tbaer-xaend
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XAUSZ' INTO ls_table.
  DESCRIBE FIELD wa_tbaer-xausz
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XBUPE' INTO ls_table.
  DESCRIBE FIELD wa_tbaer-xbupe
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_tbaer-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tbaer = LINES( it_tbaer ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tbaer
    USING lv_file
    ls_table .
    FREE IT_TBAER .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TBSL'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TBSL = 'Yes'.
    DATA: COLUMN_TBSL TYPE STRING.
    DATA TABLE_TBSL TYPE STRING.
    COLUMN_TBSL = 'XZAHL XUMSW XSONU STBSL SHKZG MANDT KOART BSCHL'.
    TABLE_TBSL = 'TBSL'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TBSL)
FROM (TABLE_TBSL)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TBSL
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TBSL.ACTT'.
  ls_table = 'XZAHL'.
  DESCRIBE FIELD wa_tbsl-xzahl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XUMSW' INTO ls_table.
  DESCRIBE FIELD wa_tbsl-xumsw
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'XSONU' INTO ls_table.
  DESCRIBE FIELD wa_tbsl-xsonu
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STBSL' INTO ls_table.
  DESCRIBE FIELD wa_tbsl-stbsl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SHKZG' INTO ls_table.
  DESCRIBE FIELD wa_tbsl-shkzg
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_tbsl-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOART' INTO ls_table.
  DESCRIBE FIELD wa_tbsl-koart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BSCHL' INTO ls_table.
  DESCRIBE FIELD wa_tbsl-bschl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tbsl = LINES( it_tbsl ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tbsl
    USING lv_file
    ls_table .
    FREE IT_TBSL .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TBSLT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TBSLT = 'Yes'.
    DATA: COLUMN_TBSLT TYPE STRING.
    DATA TABLE_TBSLT TYPE STRING.
    COLUMN_TBSLT = 'BSCHL LTEXT MANDT SPRAS UMSKZ'.
    TABLE_TBSLT = 'TBSLT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TBSLT)
FROM (TABLE_TBSLT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TBSLT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TBSLT.ACTT'.
  ls_table = 'BSCHL'.
  DESCRIBE FIELD wa_tbslt-bschl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LTEXT' INTO ls_table.
  DESCRIBE FIELD wa_tbslt-ltext
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_tbslt-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_tbslt-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'UMSKZ' INTO ls_table.
  DESCRIBE FIELD wa_tbslt-umskz
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tbslt = LINES( it_tbslt ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tbslt
    USING lv_file
    ls_table .
    FREE IT_TBSLT .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.


READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TCDOB'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TCDOB = 'Yes'.
    DATA: COLUMN_TCDOB TYPE STRING.
    DATA TABLE_TCDOB TYPE STRING.
    COLUMN_TCDOB = 'DOCUDEL MULTCASE OBJECT OLDTABNAME REFNAME TABNAME'.
    TABLE_TCDOB = 'TCDOB'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TCDOB)
FROM (TABLE_TCDOB)
WHERE ( TABNAME IN ('T095', 'T095B', 'ANLZ') )
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TCDOB
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TCDOB.ACTT'.
  ls_table = 'DOCUDEL'.
  DESCRIBE FIELD wa_tcdob-docudel
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MULTCASE' INTO ls_table.
  DESCRIBE FIELD wa_tcdob-multcase
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'OBJECT' INTO ls_table.
  DESCRIBE FIELD wa_tcdob-object
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'OLDTABNAME' INTO ls_table.
  DESCRIBE FIELD wa_tcdob-oldtabname
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'REFNAME' INTO ls_table.
  DESCRIBE FIELD wa_tcdob-refname
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TABNAME' INTO ls_table.
  DESCRIBE FIELD wa_tcdob-tabname
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tcdob = LINES( it_tcdob ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tcdob
    USING lv_file
    ls_table .
    FREE IT_TCDOB .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TCURF'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TCURF = 'Yes'.
    DATA: COLUMN_TCURF TYPE STRING.
    DATA TABLE_TCURF TYPE STRING.
    COLUMN_TCURF = 'FFACT GDATU KURST MANDT  TCURR TFACT FCURR'.
    TABLE_TCURF = 'TCURF'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TCURF)
FROM (TABLE_TCURF)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TCURF
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'TCURF.ACTT'.
  ls_table = 'FFACT'.
  DESCRIBE FIELD wa_tcurf-ffact
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'GDATU' INTO ls_table.
  DESCRIBE FIELD wa_tcurf-gdatu
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KURST' INTO ls_table.
  DESCRIBE FIELD wa_tcurf-kurst
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_tcurf-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TCURR' INTO ls_table.
  DESCRIBE FIELD wa_tcurf-tcurr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'TFACT' INTO ls_table.
  DESCRIBE FIELD wa_tcurf-tfact
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FCURR' INTO ls_table.
  DESCRIBE FIELD wa_tcurf-fcurr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tcurf = LINES( it_tcurf ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tcurf
    USING lv_file
    ls_table .
    FREE IT_TCURF .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TKA01'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TKA01 = 'Yes'.
    DATA: COLUMN_TKA01 TYPE STRING.
    DATA TABLE_TKA01 TYPE STRING.
    COLUMN_TKA01 = 'KTOPL  BEZEI  KOKRS  LMONA  MANDT  WAERS'.
    TABLE_TKA01 = 'TKA01'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TKA01)
FROM (TABLE_TKA01)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TKA01
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TKA01.ACTT'.
  ls_table = 'KTOPL'.
  DESCRIBE FIELD wa_tka01-ktopl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BEZEI' INTO ls_table.
  DESCRIBE FIELD wa_tka01-bezei
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOKRS' INTO ls_table.
  DESCRIBE FIELD wa_tka01-kokrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'LMONA' INTO ls_table.
  DESCRIBE FIELD wa_tka01-lmona
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_tka01-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'WAERS' INTO ls_table.
  DESCRIBE FIELD wa_tka01-waers
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tka01 = LINES( it_tka01 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tka01
    USING lv_file
    ls_table .
    FREE IT_TKA01 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TKA02'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TKA02 = 'Yes'.
    DATA: COLUMN_TKA02 TYPE STRING.
    DATA TABLE_TKA02 TYPE STRING.
    COLUMN_TKA02 = 'MANDT BUKRS GSBER KOKRS'.
    TABLE_TKA02 = 'TKA02'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TKA02)
FROM (TABLE_TKA02)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TKA02
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TKA02.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_tka02-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BUKRS' INTO ls_table.
  DESCRIBE FIELD wa_tka02-bukrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'GSBER' INTO ls_table.
  DESCRIBE FIELD wa_tka02-gsber
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KOKRS' INTO ls_table.
  DESCRIBE FIELD wa_tka02-kokrs
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tka02 = LINES( it_tka02 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tka02
    USING lv_file
    ls_table .
    FREE IT_TKA02 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TMC4'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TMC4 = 'Yes'.
    DATA: COLUMN_TMC4 TYPE STRING.
    DATA TABLE_TMC4 TYPE STRING.
    COLUMN_TMC4 = 'MCINF SPERI'.
    TABLE_TMC4 = 'TMC4'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TMC4)
FROM (TABLE_TMC4)
WHERE MCINF = 'S066'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TMC4
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
 lv_file = 'TMC4.ACTT'.
  ls_table = 'MCINF'.
  DESCRIBE FIELD wa_tmc4-mcinf
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPERI' INTO ls_table.
  DESCRIBE FIELD wa_tmc4-speri
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tmc4 = LINES( it_tmc4 ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tmc4
    USING lv_file
     ls_table .
    FREE IT_TMC4 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TMODP'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TMODP = 'Yes'.
    DATA: COLUMN_TMODP TYPE STRING.
    DATA TABLE_TMODP TYPE STRING.
    COLUMN_TMODP = 'FAUNA MODIF SPRAS FTEXT'.
    TABLE_TMODP = 'TMODP'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TMODP)
FROM (TABLE_TMODP)
WHERE SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TMODP
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TMODP.ACTT'.
  ls_table = 'FAUNA'.
  DESCRIBE FIELD wa_tmodp-fauna
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MODIF' INTO ls_table.
  DESCRIBE FIELD wa_tmodp-modif
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_tmodp-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'FTEXT' INTO ls_table.
  DESCRIBE FIELD wa_tmodp-ftext
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tmodp = LINES( it_tmodp ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tmodp
    USING lv_file
    ls_table .
    FREE IT_TMODP .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVAK'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVAK = 'Yes'.
    DATA: COLUMN_TVAK TYPE STRING.
    DATA TABLE_TVAK TYPE STRING.
    COLUMN_TVAK = 'AUART BEZOB CMGRA KLIMP MANDT VBTYP'.
    TABLE_TVAK = 'TVAK'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVAK)
FROM (TABLE_TVAK)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVAK
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVAK.ACTT'.
  ls_table = 'AUART'.
  DESCRIBE FIELD wa_tvak-auart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BEZOB' INTO ls_table.
  DESCRIBE FIELD wa_tvak-bezob
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'CMGRA' INTO ls_table.
  DESCRIBE FIELD wa_tvak-cmgra
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KLIMP' INTO ls_table.
  DESCRIBE FIELD wa_tvak-klimp
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
  DESCRIBE FIELD wa_tvak-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'VBTYP' INTO ls_table.
  DESCRIBE FIELD wa_tvak-vbtyp
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tvak = LINES( it_tvak ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tvak
    USING lv_file
    ls_table .
    FREE IT_TVAK .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVAKT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVAKT = 'Yes'.
    DATA: COLUMN_TVAKT TYPE STRING.
    DATA TABLE_TVAKT TYPE STRING.
    COLUMN_TVAKT = 'MANDT AUART BEZEI SPRAS'.
    TABLE_TVAKT = 'TVAKT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVAKT)
FROM (TABLE_TVAKT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVAKT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVAKT.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_tvakt-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'AUART' INTO ls_table.
  DESCRIBE FIELD wa_tvakt-auart
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'BEZEI' INTO ls_table.
  DESCRIBE FIELD wa_tvakt-bezei
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_tvakt-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_tvakt = LINES( it_tvakt ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES it_tvakt
    USING lv_file
    ls_table .
    FREE it_tvakt .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
  ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVAP'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVAP = 'Yes'.
    DATA: COLUMN_TVAP TYPE STRING.
    DATA TABLE_TVAP TYPE STRING.
    CONCATENATE   'MANDT PSTYV FKREL PRSFD'
                  ' ASWPA STRUM EVRWR KALSM SOBKZ FAKTF RRREL'
                  ' ACDATV UVEIB LVART' INTO COLUMN_TVAP.
    TABLE_TVAP = 'TVAP'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVAP)
FROM (TABLE_TVAP)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVAP
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVAP.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVAP-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PSTYV' into ls_table.
DESCRIBE FIELD WA_TVAP-PSTYV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKREL' into ls_table.
DESCRIBE FIELD WA_TVAP-FKREL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PRSFD' into ls_table.
DESCRIBE FIELD WA_TVAP-PRSFD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ASWPA' into ls_table.
DESCRIBE FIELD WA_TVAP-ASWPA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STRUM' into ls_table.
DESCRIBE FIELD WA_TVAP-STRUM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'EVRWR' into ls_table.
DESCRIBE FIELD WA_TVAP-EVRWR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSM' into ls_table.
DESCRIBE FIELD WA_TVAP-KALSM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SOBKZ' into ls_table.
DESCRIBE FIELD WA_TVAP-SOBKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FAKTF' into ls_table.
DESCRIBE FIELD WA_TVAP-FAKTF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RRREL' into ls_table.
DESCRIBE FIELD WA_TVAP-RRREL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ACDATV' into ls_table.
DESCRIBE FIELD WA_TVAP-ACDATV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UVEIB' into ls_table.
DESCRIBE FIELD WA_TVAP-UVEIB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LVART' into ls_table.
DESCRIBE FIELD WA_TVAP-LVART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVAP = lines( it_TVAP ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVAP
using lv_file
 ls_table .
FREE IT_TVAP .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVAPT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVAPT = 'Yes'.
    DATA: COLUMN_TVAPT TYPE STRING.
    DATA TABLE_TVAPT TYPE STRING.
    COLUMN_TVAPT = 'MANDT SPRAS PSTYV VTEXT'.
    TABLE_TVAPT = 'TVAPT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVAPT)
FROM (TABLE_TVAPT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVAPT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVAPT.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVAPT-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SPRAS' into ls_table.
DESCRIBE FIELD WA_TVAPT-SPRAS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PSTYV' into ls_table.
DESCRIBE FIELD WA_TVAPT-PSTYV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VTEXT' into ls_table.
DESCRIBE FIELD WA_TVAPT-VTEXT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVAPT = lines( it_TVAPT ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVAPT
using lv_file
 ls_table .
FREE IT_TVAPT .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVCPF'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVCPF = 'Yes'.
    DATA: COLUMN_TVCPF TYPE STRING.
    DATA TABLE_TVCPF TYPE STRING.
    CONCATENATE 'MANDT FKARN AUARV LFARV FKARV PSTYV GRBED GRURK'
                ' GRURP GRUKO KNPRS PLMIN  FKMGK POSVO HINEU PFKUR'
                ' EXPIM ORDNR_FI XBLNR_FI  PRSQU KVPRS PSTYN OIFERP OIFEECH' INTO COLUMN_TVCPF.
    TABLE_TVCPF = 'TVCPF'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVCPF)
FROM (TABLE_TVCPF)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVCPF
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVCPF.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVCPF-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKARN' into ls_table.
DESCRIBE FIELD WA_TVCPF-FKARN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AUARV' into ls_table.
DESCRIBE FIELD WA_TVCPF-AUARV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LFARV' into ls_table.
DESCRIBE FIELD WA_TVCPF-LFARV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKARV' into ls_table.
DESCRIBE FIELD WA_TVCPF-FKARV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PSTYV' into ls_table.
DESCRIBE FIELD WA_TVCPF-PSTYV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRBED' into ls_table.
DESCRIBE FIELD WA_TVCPF-GRBED
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRURK' into ls_table.
DESCRIBE FIELD WA_TVCPF-GRURK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRURP' into ls_table.
DESCRIBE FIELD WA_TVCPF-GRURP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUKO' into ls_table.
DESCRIBE FIELD WA_TVCPF-GRUKO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KNPRS' into ls_table.
DESCRIBE FIELD WA_TVCPF-KNPRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PLMIN' into ls_table.
DESCRIBE FIELD WA_TVCPF-PLMIN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKMGK' into ls_table.
DESCRIBE FIELD WA_TVCPF-FKMGK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'POSVO' into ls_table.
DESCRIBE FIELD WA_TVCPF-POSVO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'HINEU' into ls_table.
DESCRIBE FIELD WA_TVCPF-HINEU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PFKUR' into ls_table.
DESCRIBE FIELD WA_TVCPF-PFKUR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'EXPIM' into ls_table.
DESCRIBE FIELD WA_TVCPF-EXPIM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ORDNR_FI' into ls_table.
DESCRIBE FIELD WA_TVCPF-ORDNR_FI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XBLNR_FI' into ls_table.
DESCRIBE FIELD WA_TVCPF-XBLNR_FI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PRSQU' into ls_table.
DESCRIBE FIELD WA_TVCPF-PRSQU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVPRS' into ls_table.
DESCRIBE FIELD WA_TVCPF-KVPRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PSTYN' into ls_table.
DESCRIBE FIELD WA_TVCPF-PSTYN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIFERP' into ls_table.
DESCRIBE FIELD WA_TVCPF-OIFERP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIFEECH' into ls_table.
DESCRIBE FIELD WA_TVCPF-OIFEECH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVCPF = lines( it_TVCPF ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVCPF
using lv_file
 ls_table .
FREE IT_TVCPF .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVCPL'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVCPL = 'Yes'.
    DATA: COLUMN_TVCPL TYPE STRING.
    DATA TABLE_TVCPL TYPE STRING.
    CONCATENATE    'MANDT LFARN AUARV PSTYV  AUBED AUZUS ETBED GRUAK'
                   ' GRUAP GRUKD GRUPA GRUET POSVO PLMIN UPFLU GRUVS'
                   ' GRUAK_AIP GRUAP_AIP' INTO COLUMN_TVCPL.
    TABLE_TVCPL = 'TVCPL'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVCPL)
FROM (TABLE_TVCPL)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVCPL
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVCPL.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVCPL-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LFARN' into ls_table.
DESCRIBE FIELD WA_TVCPL-LFARN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AUARV' into ls_table.
DESCRIBE FIELD WA_TVCPL-AUARV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PSTYV' into ls_table.
DESCRIBE FIELD WA_TVCPL-PSTYV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AUBED' into ls_table.
DESCRIBE FIELD WA_TVCPL-AUBED
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AUZUS' into ls_table.
DESCRIBE FIELD WA_TVCPL-AUZUS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ETBED' into ls_table.
DESCRIBE FIELD WA_TVCPL-ETBED
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUAK' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUAK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUAP' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUAP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUKD' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUKD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUPA' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUPA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUET' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUET
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'POSVO' into ls_table.
DESCRIBE FIELD WA_TVCPL-POSVO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PLMIN' into ls_table.
DESCRIBE FIELD WA_TVCPL-PLMIN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UPFLU' into ls_table.
DESCRIBE FIELD WA_TVCPL-UPFLU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUVS' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUVS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUAK_AIP' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUAK_AIP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRUAP_AIP' into ls_table.
DESCRIBE FIELD WA_TVCPL-GRUAP_AIP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVCPL = lines( it_TVCPL ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVCPL
using lv_file
 ls_table .
FREE IT_TVCPL .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVFK'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVFK = 'Yes'.
    DATA: COLUMN_TVFK TYPE STRING.
    DATA TABLE_TVFK TYPE STRING.
    CONCATENATE 'MANDT FKART KOPGR NUMKI NUMKE INCPO KUNN0 UEVOR'
                ' UMFNG RFBFK TRVOG TXN08  VBTYP ERNAM PARGK PARGP'
                ' KALSMC FKARTS TXTGR KAPPL KALSM  KSCHL STAFO KVSLV'
                ' KALVG  TXTGR_P STATI KALSMBP BORVF FKART_RL RELEP'
                ' TXTLF HITYP_PR FKART_AB GRBED_S ORDNR_FI_S XBLNR_FI_S'
                ' J_1BNFREL J_1BMAINPA J_1BTDIDH J_1BTDCOH J_1BTDIDL'
                ' J_1BTDCOL FKTYP XNEGP BLART XFILKD XVALGS KALSMCA'
                ' KALSMCB KALSMCC KALSMCD XKOIV J_1AINVREF J_1ACPDEL'
                ' UVEIB OICINPD OIFEEPD OIINVCYC1 OIINVCYC2'
                ' OIINVCYC3 OIINVCYC4 OIINVCYC5 OIINVCYC6 OIINVCYC7 OIINVCYC8'
                ' OIINVCYC9 OINETEXIT OIPTRMEX OIC_DIFFIN OIC_DICNTR OIC_ACCVAL'
                ' OIC_ERRHA OIC_FKART OISELEXIT OIFINEXIT  OINETRPT OIBTCEXIT'
                ' OIAMWOFI OIABALAN OIINVAPP OIINDCM' INTO COLUMN_TVFK.
    TABLE_TVFK = 'TVFK'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVFK)
FROM (TABLE_TVFK)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVFK
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVFK.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVFK-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKART' into ls_table.
DESCRIBE FIELD WA_TVFK-FKART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KOPGR' into ls_table.
DESCRIBE FIELD WA_TVFK-KOPGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NUMKI' into ls_table.
DESCRIBE FIELD WA_TVFK-NUMKI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NUMKE' into ls_table.
DESCRIBE FIELD WA_TVFK-NUMKE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'INCPO' into ls_table.
DESCRIBE FIELD WA_TVFK-INCPO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KUNN0' into ls_table.
DESCRIBE FIELD WA_TVFK-KUNN0
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UEVOR' into ls_table.
DESCRIBE FIELD WA_TVFK-UEVOR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UMFNG' into ls_table.
DESCRIBE FIELD WA_TVFK-UMFNG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RFBFK' into ls_table.
DESCRIBE FIELD WA_TVFK-RFBFK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TRVOG' into ls_table.
DESCRIBE FIELD WA_TVFK-TRVOG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXN08' into ls_table.
DESCRIBE FIELD WA_TVFK-TXN08
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VBTYP' into ls_table.
DESCRIBE FIELD WA_TVFK-VBTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERNAM' into ls_table.
DESCRIBE FIELD WA_TVFK-ERNAM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PARGK' into ls_table.
DESCRIBE FIELD WA_TVFK-PARGK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'PARGP' into ls_table.
DESCRIBE FIELD WA_TVFK-PARGP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSMC' into ls_table.
DESCRIBE FIELD WA_TVFK-KALSMC
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKARTS' into ls_table.
DESCRIBE FIELD WA_TVFK-FKARTS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXTGR' into ls_table.
DESCRIBE FIELD WA_TVFK-TXTGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KAPPL' into ls_table.
DESCRIBE FIELD WA_TVFK-KAPPL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSM' into ls_table.
DESCRIBE FIELD WA_TVFK-KALSM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KSCHL' into ls_table.
DESCRIBE FIELD WA_TVFK-KSCHL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STAFO' into ls_table.
DESCRIBE FIELD WA_TVFK-STAFO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KVSLV' into ls_table.
DESCRIBE FIELD WA_TVFK-KVSLV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALVG' into ls_table.
DESCRIBE FIELD WA_TVFK-KALVG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXTGR_P' into ls_table.
DESCRIBE FIELD WA_TVFK-TXTGR_P
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'STATI' into ls_table.
DESCRIBE FIELD WA_TVFK-STATI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSMBP' into ls_table.
DESCRIBE FIELD WA_TVFK-KALSMBP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BORVF' into ls_table.
DESCRIBE FIELD WA_TVFK-BORVF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKART_RL' into ls_table.
DESCRIBE FIELD WA_TVFK-FKART_RL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RELEP' into ls_table.
DESCRIBE FIELD WA_TVFK-RELEP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXTLF' into ls_table.
DESCRIBE FIELD WA_TVFK-TXTLF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'HITYP_PR' into ls_table.
DESCRIBE FIELD WA_TVFK-HITYP_PR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKART_AB' into ls_table.
DESCRIBE FIELD WA_TVFK-FKART_AB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'GRBED_S' into ls_table.
DESCRIBE FIELD WA_TVFK-GRBED_S
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ORDNR_FI_S' into ls_table.
DESCRIBE FIELD WA_TVFK-ORDNR_FI_S
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XBLNR_FI_S' into ls_table.
DESCRIBE FIELD WA_TVFK-XBLNR_FI_S
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1BNFREL' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1BNFREL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1BMAINPA' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1BMAINPA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1BTDIDH' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1BTDIDH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1BTDCOH' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1BTDCOH
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1BTDIDL' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1BTDIDL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1BTDCOL' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1BTDCOL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKTYP' into ls_table.
DESCRIBE FIELD WA_TVFK-FKTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XNEGP' into ls_table.
DESCRIBE FIELD WA_TVFK-XNEGP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BLART' into ls_table.
DESCRIBE FIELD WA_TVFK-BLART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XFILKD' into ls_table.
DESCRIBE FIELD WA_TVFK-XFILKD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XVALGS' into ls_table.
DESCRIBE FIELD WA_TVFK-XVALGS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSMCA' into ls_table.
DESCRIBE FIELD WA_TVFK-KALSMCA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSMCB' into ls_table.
DESCRIBE FIELD WA_TVFK-KALSMCB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSMCC' into ls_table.
DESCRIBE FIELD WA_TVFK-KALSMCC
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KALSMCD' into ls_table.
DESCRIBE FIELD WA_TVFK-KALSMCD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XKOIV' into ls_table.
DESCRIBE FIELD WA_TVFK-XKOIV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1AINVREF' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1AINVREF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1ACPDEL' into ls_table.
DESCRIBE FIELD WA_TVFK-J_1ACPDEL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'UVEIB' into ls_table.
DESCRIBE FIELD WA_TVFK-UVEIB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OICINPD' into ls_table.
DESCRIBE FIELD WA_TVFK-OICINPD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIFEEPD' into ls_table.
DESCRIBE FIELD WA_TVFK-OIFEEPD
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC1' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC2' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC3' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC3
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC4' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC4
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC5' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC5
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC6' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC6
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC7' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC7
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC8' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC8
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVCYC9' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVCYC9
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OINETEXIT' into ls_table.
DESCRIBE FIELD WA_TVFK-OINETEXIT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIPTRMEX' into ls_table.
DESCRIBE FIELD WA_TVFK-OIPTRMEX
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIC_DIFFIN' into ls_table.
DESCRIBE FIELD WA_TVFK-OIC_DIFFIN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIC_DICNTR' into ls_table.
DESCRIBE FIELD WA_TVFK-OIC_DICNTR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIC_ACCVAL' into ls_table.
DESCRIBE FIELD WA_TVFK-OIC_ACCVAL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIC_ERRHA' into ls_table.
DESCRIBE FIELD WA_TVFK-OIC_ERRHA
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIC_FKART' into ls_table.
DESCRIBE FIELD WA_TVFK-OIC_FKART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OISELEXIT' into ls_table.
DESCRIBE FIELD WA_TVFK-OISELEXIT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIFINEXIT' into ls_table.
DESCRIBE FIELD WA_TVFK-OIFINEXIT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OINETRPT' into ls_table.
DESCRIBE FIELD WA_TVFK-OINETRPT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIBTCEXIT' into ls_table.
DESCRIBE FIELD WA_TVFK-OIBTCEXIT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIAMWOFI' into ls_table.
DESCRIBE FIELD WA_TVFK-OIAMWOFI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIABALAN' into ls_table.
DESCRIBE FIELD WA_TVFK-OIABALAN
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINVAPP' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINVAPP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'OIINDCM' into ls_table.
DESCRIBE FIELD WA_TVFK-OIINDCM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVFK = lines( it_TVFK ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVFK
using lv_file
 ls_table .
FREE IT_TVFK .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVFKT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVFKT = 'Yes'.
    DATA: COLUMN_TVFKT TYPE STRING.
    DATA TABLE_TVFKT TYPE STRING.
    COLUMN_TVFKT = 'MANDT SPRAS FKART VTEXT'.
    TABLE_TVFKT = 'TVFKT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVFKT)
FROM (TABLE_TVFKT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVFKT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVFKT.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVFKT-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SPRAS' into ls_table.
DESCRIBE FIELD WA_TVFKT-SPRAS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'FKART' into ls_table.
DESCRIBE FIELD WA_TVFKT-FKART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VTEXT' into ls_table.
DESCRIBE FIELD WA_TVFKT-VTEXT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVFKT = lines( it_TVFKT ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVFKT
using lv_file
 ls_table .
FREE IT_TVFKT .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVLKT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVLKT = 'Yes'.
    DATA: COLUMN_TVLKT TYPE STRING.
    DATA TABLE_TVLKT TYPE STRING.
    COLUMN_TVLKT = 'MANDT SPRAS LFART VTEXT'.
    TABLE_TVLKT = 'TVLKT'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVLKT)
FROM (TABLE_TVLKT)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVLKT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVLKT.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVLKT-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'SPRAS' into ls_table.
DESCRIBE FIELD WA_TVLKT-SPRAS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LFART' into ls_table.
DESCRIBE FIELD WA_TVLKT-LFART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VTEXT' into ls_table.
DESCRIBE FIELD WA_TVLKT-VTEXT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVLKT = lines( it_TVLKT ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVLKT
using lv_file
 ls_table .
FREE IT_TVLKT .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'LFA1'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_LFA1 = 'Yes'.
    DATA: COLUMN_LFA1 TYPE STRING.
    DATA TABLE_LFA1 TYPE STRING.
    COLUMN_LFA1 = 'MANDT LIFNR NAME1 NAME2 KTOKK'.
    TABLE_LFA1 = 'LFA1'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_LFA1)
FROM (TABLE_LFA1)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_LFA1
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'LFA1.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_LFA1-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LIFNR' into ls_table.
DESCRIBE FIELD WA_LFA1-LIFNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NAME1' into ls_table.
DESCRIBE FIELD WA_LFA1-NAME1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NAME2' into ls_table.
DESCRIBE FIELD WA_LFA1-NAME2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOKK' into ls_table.
DESCRIBE FIELD WA_LFA1-KTOKK
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_LFA1 = lv_LFA1 + LINES( it_LFA1 ) .
  IF lv_LFA1 GT 0.
perform conv_table_to_text tables it_LFA1
using lv_file
 ls_table .
FREE IT_LFA1 .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'LFB1'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_LFB1 = 'Yes'.
    DATA: COLUMN_LFB1 TYPE STRING.
    DATA TABLE_LFB1 TYPE STRING.
    COLUMN_LFB1 = 'MANDT LIFNR BUKRS REPRF'.
    TABLE_LFB1 = 'LFB1'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_LFB1)
FROM (TABLE_LFB1)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_LFB1
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'LFB1.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_LFB1-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LIFNR' into ls_table.
DESCRIBE FIELD WA_LFB1-LIFNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUKRS' into ls_table.
DESCRIBE FIELD WA_LFB1-BUKRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'REPRF' into ls_table.
DESCRIBE FIELD WA_LFB1-REPRF
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_LFB1 = lv_LFB1 + LINES( it_LFB1 ) .
  IF lv_LFB1 GT 0.
perform conv_table_to_text tables it_LFB1
using lv_file
 ls_table .
FREE IT_LFB1 .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'CVERS'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_CVERS = 'Yes'.
    DATA: COLUMN_CVERS TYPE STRING.
    DATA TABLE_CVERS TYPE STRING.
    COLUMN_CVERS = 'COMPONENT RELEASE EXTRELEASE'.
    TABLE_CVERS = 'CVERS'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_CVERS)
FROM (TABLE_CVERS)
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_CVERS
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'CVERS.ACTT'.
ls_table = 'COMPONENT'.
DESCRIBE FIELD WA_CVERS-COMPONENT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'RELEASE' into ls_table.
DESCRIBE FIELD WA_CVERS-RELEASE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'EXTRELEASE' into ls_table.
DESCRIBE FIELD WA_CVERS-EXTRELEASE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_CVERS = lines( it_CVERS ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_CVERS
using lv_file
 ls_table .
FREE IT_CVERS .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'CVERS_REF'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_CVERS_REF = 'Yes'.
    DATA: COLUMN_CVERS_REF TYPE STRING.
    DATA TABLE_CVERS_REF TYPE STRING.
    COLUMN_CVERS_REF = 'COMPONENT LANGU DESC_TEXT'.
    TABLE_CVERS_REF = 'CVERS_REF'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_CVERS_REF)
FROM (TABLE_CVERS_REF)
WHERE LANGU = 'EN' AND DESC_TEXT NOT LIKE 'Sub%'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_CVERS_REF
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'CVERS_REF.ACTT'.
ls_table = 'COMPONENT'.
DESCRIBE FIELD WA_CVERS_REF-COMPONENT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LANGU' into ls_table.
DESCRIBE FIELD WA_CVERS_REF-LANGU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'DESC_TEXT' into ls_table.
DESCRIBE FIELD WA_CVERS_REF-DESC_TEXT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_CVERS_REF = lines( it_CVERS_REF ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_CVERS_REF
using lv_file
 ls_table .
FREE IT_CVERS_REF .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'PRDVERS'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
SELECT
DESCRIPT
INSTSTATUS
FROM PRDVERS
INTO TABLE IT_PRDVERS.

lv_file = 'PRDVERS.ACTT'.
ls_table = 'DESCRIPT'.
DESCRIBE FIELD WA_PRDVERS-DESCRIPT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'INSTSTATUS' INTO ls_table.
DESCRIBE FIELD WA_PRDVERS-INSTSTATUS
TYPE lv_type LENGTH lv_len IN BYTE MODE.
CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
lv_PRDVERS = lines( it_PRDVERS ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_PRDVERS
using lv_file
 ls_table .
FREE IT_PRDVERS .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.


READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T683T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T683T = 'Yes'.
    DATA: COLUMN_T683T TYPE STRING.
    DATA TABLE_T683T TYPE STRING.
    COLUMN_T683T = 'MANDT SPRAS KVEWE KAPPL KALSM STUNR ZAEHK VTEXT'.
    TABLE_T683T = 'T683T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T683T)
FROM (TABLE_T683T)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T683T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T683T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t683t-MANDT
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t683t-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KVEWE' INTO ls_table.
  DESCRIBE FIELD wa_t683t-kvewe
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KAPPL' INTO ls_table.
  DESCRIBE FIELD wa_t683t-kappl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KALSM' INTO ls_table.
  DESCRIBE FIELD wa_t683t-kalsm
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'STUNR' INTO ls_table.
  DESCRIBE FIELD wa_t683t-stunr
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'ZAEHK' INTO ls_table.
  DESCRIBE FIELD wa_t683t-zaehk
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'VTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t683t-vtext
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_t683t = LINES( it_t683t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES IT_T683T
    USING lv_file
    ls_table .
    FREE IT_T683T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T687T'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_T687T = 'Yes'.
    DATA: COLUMN_T687T TYPE STRING.
    DATA TABLE_T687T TYPE STRING.
    COLUMN_T687T = 'MANDT SPRAS KAPPL KVSL1  VTEXT'.
    TABLE_T687T = 'T687T'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_T687T)
FROM (TABLE_T687T)
WHERE MANDT = s_pclien AND SPRAS = 'EN'
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_T687T
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'T687T.ACTT'.
  ls_table = 'MANDT'.
  DESCRIBE FIELD wa_t687t-mandt
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'SPRAS' INTO ls_table.
  DESCRIBE FIELD wa_t687t-spras
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KAPPL' INTO ls_table.
  DESCRIBE FIELD wa_t687t-kappl
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'KVSL1' INTO ls_table.
  DESCRIBE FIELD wa_t687t-kvsl1
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  CONCATENATE ls_table '|^|' 'VTEXT' INTO ls_table.
  DESCRIBE FIELD wa_t687t-vtext
  TYPE lv_type LENGTH lv_len IN BYTE MODE.
  CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
lv_t687t = LINES( it_t687t ) .
  IF sy-subrc = 0.
    PERFORM conv_table_to_text TABLES IT_T687T
    USING lv_file
    ls_table .
    FREE IT_T687T .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TVKO'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  IF ISTABLE_TVKO = 'Yes'.
    DATA: COLUMN_TVKO TYPE STRING.
    DATA TABLE_TVKO TYPE STRING.
    CONCATENATE  'MANDT VKORG WAERS BUKRS ADRNR TXNAM_ADR TXNAM_KOP'
                 ' TXNAM_FUS TXNAM_GRU VKOAU KUNNR BOAVO VKOKL EKORG'
                 ' EKGRP LIFNR WERKS BSART BSTYP BWART LGORT TXNAM_SDB'
                 ' MWSKZ XSTCEG J_1ANUTIME MAXBI' INTO COLUMN_TVKO.
    TABLE_TVKO = 'TVKO'.

  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
     (COLUMN_TVKO)
FROM (TABLE_TVKO)
WHERE MANDT = s_pclien
.
DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor
      APPENDING TABLE IT_TVKO
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor.
        EXIT.
      ENDIF.

    ENDDO.
.
.
lv_file = 'TVKO.ACTT'.
ls_table = 'MANDT'.
DESCRIBE FIELD WA_TVKO-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKORG' into ls_table.
DESCRIBE FIELD WA_TVKO-VKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WAERS' into ls_table.
DESCRIBE FIELD WA_TVKO-WAERS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUKRS' into ls_table.
DESCRIBE FIELD WA_TVKO-BUKRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ADRNR' into ls_table.
DESCRIBE FIELD WA_TVKO-ADRNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXNAM_ADR' into ls_table.
DESCRIBE FIELD WA_TVKO-TXNAM_ADR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXNAM_KOP' into ls_table.
DESCRIBE FIELD WA_TVKO-TXNAM_KOP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXNAM_FUS' into ls_table.
DESCRIBE FIELD WA_TVKO-TXNAM_FUS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXNAM_GRU' into ls_table.
DESCRIBE FIELD WA_TVKO-TXNAM_GRU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKOAU' into ls_table.
DESCRIBE FIELD WA_TVKO-VKOAU
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KUNNR' into ls_table.
DESCRIBE FIELD WA_TVKO-KUNNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BOAVO' into ls_table.
DESCRIBE FIELD WA_TVKO-BOAVO
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'VKOKL' into ls_table.
DESCRIBE FIELD WA_TVKO-VKOKL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'EKORG' into ls_table.
DESCRIBE FIELD WA_TVKO-EKORG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'EKGRP' into ls_table.
DESCRIBE FIELD WA_TVKO-EKGRP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LIFNR' into ls_table.
DESCRIBE FIELD WA_TVKO-LIFNR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'WERKS' into ls_table.
DESCRIBE FIELD WA_TVKO-WERKS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BSART' into ls_table.
DESCRIBE FIELD WA_TVKO-BSART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BSTYP' into ls_table.
DESCRIBE FIELD WA_TVKO-BSTYP
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BWART' into ls_table.
DESCRIBE FIELD WA_TVKO-BWART
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'LGORT' into ls_table.
DESCRIBE FIELD WA_TVKO-LGORT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXNAM_SDB' into ls_table.
DESCRIBE FIELD WA_TVKO-TXNAM_SDB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MWSKZ' into ls_table.
DESCRIBE FIELD WA_TVKO-MWSKZ
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSTCEG' into ls_table.
DESCRIBE FIELD WA_TVKO-XSTCEG
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'J_1ANUTIME' into ls_table.
DESCRIBE FIELD WA_TVKO-J_1ANUTIME
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'MAXBI' into ls_table.
DESCRIBE FIELD WA_TVKO-MAXBI
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
lv_TVKO = lines( it_TVKO ) .
IF SY-SUBRC = 0.
perform conv_table_to_text tables it_TVKO
using lv_file
 ls_table .
FREE IT_TVKO .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDIF.
ENDIF.
*EDIDS Extraction
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'EDIDS'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.

  OPEN CURSOR WITH HOLD S_CURSOR FOR
SELECT
MANDT
DOCNUM
LOGDAT
LOGTIM
COUNTR
CREDAT
CRETIM
STATUS
UNAME
REPID

FROM EDIDS CLIENT SPECIFIED
WHERE MANDT =  S_PCLIEN AND LOGDAT >= s_start AND LOGDAT <= s_end.
.

 DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_EDIDS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_EDIDS.
      ENDIF.
    ENDIF.

  ENDDO.
  .
  IF rb_fore IS NOT INITIAL AND IT_EDIDS IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_EDIDS.
  ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TEDS2'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  STATUS
  LANGUA
  DESCRP
  FROM TEDS2
  INTO TABLE IT_TEDS2 WHERE LANGUA = 'E'
  .
  LV_FILE = 'TEDS2.ACTT'.
  LS_TABLE = 'STATUS'.
  DESCRIBE FIELD WA_TEDS2-STATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LANGUA' INTO LS_TABLE.
  DESCRIBE FIELD WA_TEDS2-LANGUA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DESCRP' INTO LS_TABLE.
  DESCRIBE FIELD WA_TEDS2-DESCRP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TEDS2 = lv_TEDS2 + LINES( it_TEDS2 ).
  IF LV_TEDS2 GT 0.
    PERFORM conv_table_to_text TABLES IT_TEDS2
    USING lv_file
    ls_table .
    FREE it_teds2.
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.
*EDIDC Extraction
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'EDIDC'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.

  OPEN CURSOR WITH HOLD S_CURSOR FOR
SELECT
MANDT
DOCNUM
MESTYP
IDOCTP

FROM EDIDC CLIENT SPECIFIED
WHERE MANDT = S_PCLIEN.
 DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_EDIDC
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_EDIDC.
      ENDIF.
    ENDIF.

  ENDDO.
  .
  IF rb_fore IS NOT INITIAL AND IT_EDIDC IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_EDIDC.
  ENDIF.
ENDIF.
*EDIMSGT Extraction
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'EDIMSGT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  MESTYP
  LANGUA
  DESCRP
  FROM EDIMSGT
  INTO TABLE IT_EDIMSGT WHERE LANGUA = 'E'
  .
  LV_FILE = 'EDIMSGT.ACTT'.
  LS_TABLE = 'MESTYP'.
  DESCRIBE FIELD WA_EDIMSGT-MESTYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LANGUA' INTO LS_TABLE.
  DESCRIBE FIELD WA_EDIMSGT-LANGUA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DESCRP' INTO LS_TABLE.
  DESCRIBE FIELD WA_EDIMSGT-DESCRP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_EDIMSGT = lv_EDIMSGT + LINES( it_EDIMSGT ).
  IF LV_EDIMSGT GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_EDIMSGT
    USING LV_FILE
    LS_TABLE .
    FREE IT_EDIMSGT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.
*EDBAST Extraction
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'EDBAST'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  IDOCTYP
  LANGUA
  DESCRP
  FROM EDBAST
  INTO TABLE IT_EDBAST WHERE LANGUA = 'E'
  .
  LV_FILE = 'EDBAST.ACTT'.
  LS_TABLE = 'IDOCTYP'.
  DESCRIBE FIELD WA_EDBAST-IDOCTYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LANGUA' INTO LS_TABLE.
  DESCRIBE FIELD WA_EDBAST-LANGUA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DESCRP' INTO LS_TABLE.
  DESCRIBE FIELD WA_EDBAST-DESCRP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_EDBAST = lv_EDBAST + LINES( it_EDBAST ).
  IF LV_EDBAST GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_EDBAST
    USING LV_FILE
    LS_TABLE .
    FREE IT_EDBAST .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.

*T685 Extraction
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T685'.
IF ck_pop <> 'X' OR sy-subrc <> 0.

  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  KAPPL
  KSCHL
  KOZGF
  FROM T685
  CLIENT SPECIFIED WHERE MANDT = S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_T685
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_T685.
      ENDIF.
    ENDIF.

  ENDDO.
  .
  IF rb_fore IS NOT INITIAL AND IT_T685 IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_T685.
  ENDIF.
ENDIF.

*T682I Extraction
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'T682I'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
  SELECT
  KOZGF
  KOTABNR
  FROM T682I
  INTO TABLE IT_T682I
  .
  LV_FILE = 'T682I.ACTT'.
  LS_TABLE = 'KOZGF'.
  DESCRIBE FIELD WA_T682I-KOZGF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOTABNR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T682I-KOTABNR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T682I = lv_T682I + LINES( it_T682I ).
  IF LV_T682I GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T682I
    USING LV_FILE
    LS_TABLE .
    FREE IT_T682I .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDIF.
**Addition of GRAC Firefighter related tables 17R.
READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'GRACFFOWNER'.
IF ck_pop <> 'X' OR sy-subrc <> 0.
IF ISTABLE_GRACFFOWNER = 'Yes'.
    DATA: COLUMN_GRACFFOWNER TYPE STRING.
    DATA TABLE_GRACFFOWNER TYPE STRING.
    column_gracffowner = 'MANDT APP_TYPE FFOBJECT CONNECTOR OWNER UPDATED_BY UPDATED_ON'.

    TABLE_GRACFFOWNER = 'GRACFFOWNER'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_GRACFFOWNER)
   FROM (TABLE_GRACFFOWNER)
   WHERE mandt =  s_pclien
  .
DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_GRACFFOWNER
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_GRACFFOWNER.
      ENDIF.
    ENDIF.

  ENDDO.
  .
  IF rb_fore IS NOT INITIAL AND IT_GRACFFOWNER IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_GRACFFOWNER.
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'GRACFFUSER'.
IF ck_pop <> 'X' OR sy-subrc <> 0.

  IF ISTABLE_GRACFFUSER = 'Yes'.
    DATA: COLUMN_GRACFFUSER TYPE STRING.
    DATA TABLE_GRACFFUSER TYPE STRING.
    CONCATENATE   'MANDT APP_TYPE FFOBJECT CONNECTOR FF_USER OWNER LOGGED'
                  ' CRITICALITY VALID_FROM VALID_TO UPDATED_BY UPDATED_ON' INTO column_gracffuser.

    TABLE_GRACFFUSER = 'GRACFFUSER'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_GRACFFUSER)
   FROM (TABLE_GRACFFUSER)
   WHERE mandt =  s_pclien
  .
DO.

    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_GRACFFUSER
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_GRACFFUSER.
      ENDIF.
    ENDIF.

  ENDDO.
  .
  IF rb_fore IS NOT INITIAL AND IT_GRACFFUSER IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_GRACFFUSER.
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'GRACFFCTRL'.
IF ck_pop <> 'X' OR sy-subrc <> 0.

   IF ISTABLE_GRACFFCTRL = 'Yes'.
    DATA: COLUMN_GRACFFCTRL TYPE STRING.
    DATA TABLE_GRACFFCTRL TYPE STRING.
    CONCATENATE   'MANDT APP_TYPE FFOBJECT CONNECTOR CNTRL_ID DELIVERY_OPT'
                  ' PRIME_CNTRL UPDATED_BY UPDATED_ON' INTO column_gracffctrl.

    TABLE_GRACFFCTRL = 'GRACFFCTRL'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_GRACFFCTRL)
   FROM (TABLE_GRACFFCTRL)
   WHERE mandt =  s_pclien
  .
DO.
  "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_GRACFFCTRL
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_GRACFFCTRL.
      ENDIF.
    ENDIF.

  ENDDO.
  .
  IF rb_fore IS NOT INITIAL AND IT_GRACFFCTRL IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_GRACFFCTRL.
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'GRACCONFIGSET'.
IF ck_pop <> 'X' OR sy-subrc <> 0.

  IF ISTABLE_GRACCONFIGSET = 'Yes'.
    DATA: COLUMN_GRACCONFIGSET TYPE STRING.
    DATA TABLE_GRACCONFIGSET TYPE STRING.
    CONCATENATE   'MANDT PARAMID SEQUENCE'
                  ' PRIORITY PARAM_VALUE' INTO column_gracconfigset.

    TABLE_GRACCONFIGSET = 'GRACCONFIGSET'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_GRACCONFIGSET)
   FROM (TABLE_GRACCONFIGSET)
   WHERE mandt =  s_pclien
  .
DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_GRACCONFIGSET
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM SUB_DOWNLOAD_GRACCONFIGSET.
      ENDIF.
    ENDIF.

  ENDDO.
  .
  IF rb_fore IS NOT INITIAL AND IT_GRACCONFIGSET IS NOT INITIAL.
  PERFORM SUB_DOWNLOAD_GRACCONFIGSET.
  ENDIF.
ENDIF.
ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'GRACCONFIG'.
IF ck_pop <> 'X' OR sy-subrc <> 0.

  IF ISTABLE_GRACCONFIG = 'Yes'.
    DATA: COLUMN_GRACCONFIG TYPE STRING.
    DATA TABLE_GRACCONFIG TYPE STRING.
    COLUMN_GRACCONFIG = 'PARAMID PARAM_GROUP' .
    TABLE_GRACCONFIG = 'GRACCONFIG'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_GRACCONFIG)
   FROM (TABLE_GRACCONFIG)
  .
DO.
  "fetch data in chunks for every 'maxsize' number of records
        FETCH NEXT CURSOR s_cursor
        APPENDING TABLE it_gracconfig
        PACKAGE SIZE maxsize.
        IF sy-subrc <> 0.
          CLOSE CURSOR s_cursor.
          EXIT.
        ENDIF.

      ENDDO.
      .
      .
      lv_file = 'GRACCONFIG.ACTT'.
      ls_table = 'PARAMID'.
      DESCRIBE FIELD wa_GRACCONFIG-PARAMID
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'PARAM_GROUP' INTO ls_table.
      DESCRIBE FIELD wa_GRACCONFIG-PARAM_GROUP
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      lv_GRACCONFIG = LINES( it_GRACCONFIG ) .
      IF sy-subrc = 0.
        PERFORM conv_table_to_text TABLES it_GRACCONFIG
        USING lv_file
        ls_table .
        FREE it_GRACCONFIG .
        CLEAR lt_table .
        CLEAR ls_table .
      ELSE.
        APPEND ls_table TO lt_table .
        PERFORM download_gui TABLES lt_table USING lv_file .
        CLEAR lt_table .
        CLEAR ls_table .
      ENDIF.
    ENDIF.
  ENDIF.

READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'GRACCONFIGT'.
IF ck_pop <> 'X' OR sy-subrc <> 0.

  IF ISTABLE_GRACCONFIGT = 'Yes'.
    DATA: COLUMN_GRACCONFIGT TYPE STRING.
    DATA TABLE_GRACCONFIGT TYPE STRING.
    COLUMN_GRACCONFIGT = 'LANGU PARAMID DESCN' .
    TABLE_GRACCONFIGT = 'GRACCONFIGT'.
OPEN CURSOR WITH HOLD s_cursor FOR
   SELECT
       (COLUMN_GRACCONFIGT)
   FROM (TABLE_GRACCONFIGT)
   WHERE LANGU = 'E'
  .
DO.
  "fetch data in chunks for every 'maxsize' number of records
        FETCH NEXT CURSOR s_cursor
        APPENDING TABLE it_gracconfigt
        PACKAGE SIZE maxsize.
        IF sy-subrc <> 0.
          CLOSE CURSOR s_cursor.
          EXIT.
        ENDIF.

      ENDDO.
      .
      .
      lv_file = 'GRACCONFIGT.ACTT'.
      ls_table = 'LANGU'.
      DESCRIBE FIELD wa_GRACCONFIGT-LANGU
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'PARAMID' INTO ls_table.
      DESCRIBE FIELD wa_GRACCONFIGT-PARAMID
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      CONCATENATE ls_table '|^|' 'DESCN' INTO ls_table.
      DESCRIBE FIELD wa_GRACCONFIGT-DESCN
      TYPE lv_type LENGTH lv_len IN BYTE MODE.
      CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
      lv_GRACCONFIGT = LINES( it_GRACCONFIGT ) .
      IF sy-subrc = 0.
        PERFORM conv_table_to_text TABLES it_GRACCONFIGT
        USING lv_file
        ls_table .
        FREE it_GRACCONFIGT .
        CLEAR lt_table .
        CLEAR ls_table .
      ELSE.
        APPEND ls_table TO lt_table .
        PERFORM download_gui TABLES lt_table USING lv_file .
        CLEAR lt_table .
        CLEAR ls_table .
      ENDIF.
    ENDIF.
  ENDIF.

**** Release 16 - End for all Non ECC tables added with Skipping, Exclusion and Chunking********
data : tstop type i.
  GET RUN TIME FIELD tstop.
  GET TIME.
  LV_TIME2 = SY-UZEIT." + ( tstart - tstop ).
  LV_FILE = 'ACTT_config_fieldterminator.ACTT'.
  LS_TABLE = '|^|' .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
  CLEAR LT_TABLE .
  CLEAR LV_FILE.


lv_file = 'ACTT_config_userinput.ACTT'.
CONCATENATE 'VariableValue' '|^|'
'NameInput' '|^|'
'PullValuesFrom' '|^|'
'ValueUsed' '|^|'
'Mandatory' '|^|'
'NoInterval' INTO ls_table .
APPEND ls_table TO lt_table .
CONCATENATE 'OBJECT-TADIR' '|^|'
'SYST' '|^|'
'Object Type' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .
CONCATENATE 'pclient' '|^|'
s_pclien '|^|'
'Client' '|^|'
'T000-MANDT' '|^|'
'X' '|^|'
'X' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .

CONCATENATE 'Expert Mode' '|^|'
ck_pop '|^|'
'Expert Mode' '|^|'
'Expert Mode' '|^|'
'Expert Mode' '|^|'
'Expert Mode' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .

IF p_tables IS NOT INITIAL.
LOOP AT p_tables INTO wa_p_tables.
CONCATENATE 'Tables in Expert Mode' '|^|'
wa_p_tables '|^|'
'Tables in Expert Mode' '|^|'
'Tables in Expert Mode' '|^|'
'Tables in Expert Mode' '|^|'
'Tables in Expert Mode' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .
ENDLOOP.
ENDIF.

*****#ACTTSAP12.0 Release 12.0 Changes Begin*
****Add Start Date Value for change log*
CONCATENATE 'Change Log Start Date' '|^|'
s_start '|^|'
'' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .
***** #ACTTSAP12.0 Release 12.0 Changes End*
CONCATENATE 'Change Log End Date' '|^|'
s_end '|^|'
'' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .

CONCATENATE 'PGMID-TADIR' '|^|'
'HEAD' '|^|'
'Program ID in Requests and Tasks' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .
CONCATENATE 'plang' '|^|'
'EN' '|^|'
'Language' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .

CLEAR ls_table .
CONCATENATE 'T030R-KTOSL' '|^|'
  'WHERE KTOSL IN (''HRF'',''HRC'',''HRA'',''HRD'',''HRK'')' '|^|'
  'KTOSL' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'T093-BUHBKT' '|^|'
  '1' '|^|'
  'Post to G/L' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'T096-BPLAKT' '|^|'
  'X' '|^|'
  'Chart of Dep Active' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'T100C-MSGNR' '|^|'
  'WHERE MSGNR IN (''207'',''117'',''108'')' '|^|'
  'MSGNR' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'T100-MSGNR' '|^|'
  'WHERE MSGNR IN (''207'',''117'',''108'')' '|^|'
  'MSGNR' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'T160M-MSGNR' '|^|'
  'WHERE MSGNR IN (''207'',''117'',''108'')' '|^|'
  'MSGNR' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'TCDOB-TABNAME' '|^|'
  'WHERE TABNAME IN (''T095'', ''T095B'', ''ANLZ'')' '|^|'
  'TABNAME' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .


  CONCATENATE 'TR-SUBC' '|^|'
  'WHERE SUBC IN (''1'',''M'',''F'')''|^|'
    'Program Type TRDIR' '|^|'
    '' '|^|'
    '' '|^|'
    '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .

  CONCATENATE 'USRFLDSEL-BOROBJECT' '|^|'
'USER''|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'USOBHASH-OBJECT' '|^|''WHERE OBJECT IN (''IWSV'',''WDYA'')''|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'AGR_1251-DELETED' '|^|''WHERE DELETED <> ''X'' AND AGR_NAME <> '''' AND LOW <> '''''
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  CONCATENATE 'TBTCO-STATUS' '|^|'
  'A''|^|'
   '' '|^|'
   '' '|^|'
   '' '|^|'
   '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
CONCATENATE 'TR-SUBC' '|^|'
'WHERE SUBC IN (''1'',''M'',''F'')''|^|'
'Program Type TRDIR' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table.
CONCATENATE 'TSTCA-TCODE' '|^|'
'WHERE TCODE LIKE ''Z%'' OR TCODE LIKE ''Y%''' '|^|'
'TCODE' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table .
CONCATENATE 'TSTCT-TCODE' '|^|'
'WHERE TCODE LIKE ''Z%'' OR TCODE LIKE ''Y%''' '|^|'
'TCODE' '|^|'
'' '|^|'
'' '|^|'
'' INTO ls_table .
APPEND ls_table TO lt_table .
CLEAR ls_table.
PERFORM download_gui TABLES lt_table USING lv_file.
  CLEAR lt_table.
  CLEAR lv_file.

  LV_FILE = 'ACTT_config_tablerecordcount.ACTT'.
  CONCATENATE 'TableName ' '|^|' 'RecordCount' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.

  CONCATENATE 'AGR_1016' '|^|' LV_AGR_1016  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_1251' '|^|' LV_AGR_1251  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_1252' '|^|' LV_AGR_1252  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_AGRS' '|^|' LV_AGR_AGRS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_USERS' '|^|' LV_AGR_USERS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'CWBNTCUST' '|^|' LV_CWBNTCUST  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'CWBNTHEAD' '|^|' LV_CWBNTHEAD  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DEVACCESS' '|^|' LV_DEVACCESS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'PAHI' '|^|' LV_PAHI  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T000' '|^|' LV_T000  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  IF ISTABLE_T001 = 'Yes'.
   CONCATENATE 'T001' '|^|' lv_t001  INTO ls_table .
   APPEND ls_table TO lt_table .
   CLEAR ls_table.
  ENDIF.
  CONCATENATE 'TADIR' '|^|' LV_TADIR  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TDDAT' '|^|' LV_TDDAT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TRDIR' '|^|' LV_TRDIR  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTC' '|^|' LV_TSTC  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTCA' '|^|' LV_TSTCA  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTCP' '|^|' LV_TSTCP  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTCT' '|^|' LV_TSTCT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USORG' '|^|' LV_USORG  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR02' '|^|' LV_USR02  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.

*#ACTTSAP12.0 Begin of changes Consider SECURITY_POLICY Field*
  IF ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
    CONCATENATE 'USR02_CC' '|^|' LV_USR02_CC_1  INTO LS_TABLE .
  ELSE.
    CONCATENATE 'USR02_CC' '|^|' LV_USR02_CC  INTO LS_TABLE .
  ENDIF.
*#ACTTSAP12.0 End of changes Consider*
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR10' '|^|' LV_USR10  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR21' '|^|' LV_USR21  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USREFUS' '|^|' LV_USREFUS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.

IF ISTABLE_USRFLDGRP = 'Yes'.
  CONCATENATE 'USRFLDGRP' '|^|' lv_USRFLDGRP  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_ANLA = 'Yes'.
  CONCATENATE 'ANLA' '|^|' lv_ANLA  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_ANKA = 'Yes'.
  CONCATENATE 'ANKA' '|^|' lv_ANKA  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_ANKB = 'Yes'.
  CONCATENATE 'ANKB' '|^|' lv_ANKB  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_ANKT = 'Yes'.
  CONCATENATE 'ANKT' '|^|' lv_ANKT  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_ANLB = 'Yes'.
  CONCATENATE 'ANLB' '|^|' lv_ANLB  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_C001 = 'Yes'.
  CONCATENATE 'C001' '|^|' lv_C001  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_C002 = 'Yes'.
  CONCATENATE 'C002' '|^|' lv_C002  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_C003 = 'Yes'.
  CONCATENATE 'C003' '|^|' lv_C003  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_C004 = 'Yes'.
  CONCATENATE 'C004' '|^|' lv_C004  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_C005 = 'Yes'.
  CONCATENATE 'C005' '|^|' lv_C005  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_MARV = 'Yes'.
  CONCATENATE 'MARV' '|^|' lv_MARV  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_NRIV = 'Yes'.
  CONCATENATE 'NRIV' '|^|' lv_NRIV  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_SKA1 = 'Yes'.
  CONCATENATE 'SKA1' '|^|' lv_SKA1  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_SKAT = 'Yes'.
  CONCATENATE 'SKAT' '|^|' lv_SKAT  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_SKB1 = 'Yes'.
  CONCATENATE 'SKB1' '|^|' lv_SKB1  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T001B = 'Yes'.
  CONCATENATE 'T001B' '|^|' lv_T001B  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T001R = 'Yes'.
  CONCATENATE 'T001R' '|^|' lv_T001R  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T001W = 'Yes'.
  CONCATENATE 'T001W' '|^|' lv_T001W  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T003 = 'Yes'.
  CONCATENATE 'T003' '|^|' lv_T003  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T003T = 'Yes'.
  CONCATENATE 'T003T' '|^|' lv_T003T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T004 = 'Yes'.
  CONCATENATE 'T004' '|^|' lv_T004  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T004T = 'Yes'.
  CONCATENATE 'T004T' '|^|' lv_T004T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T009 = 'Yes'.
  CONCATENATE 'T009' '|^|' lv_T009  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T009B = 'Yes'.
  CONCATENATE 'T009B' '|^|' lv_T009B  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T009T = 'Yes'.
  CONCATENATE 'T009T' '|^|' lv_T009T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T030 = 'Yes'.
  CONCATENATE 'T030' '|^|' lv_T030  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T030B = 'Yes'.
  CONCATENATE 'T030B' '|^|' lv_T030B  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T030H = 'Yes'.
  CONCATENATE 'T030H' '|^|' lv_T030H  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T030R = 'Yes'.
  CONCATENATE 'T030R' '|^|' lv_T030R  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T030S = 'Yes'.
  CONCATENATE 'T030S' '|^|' lv_T030S  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T030W = 'Yes'.
  CONCATENATE 'T030W' '|^|' lv_T030W  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_KNKK = 'Yes'.
  CONCATENATE 'KNKK' '|^|' lv_KNKK  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T043G = 'Yes'.
  CONCATENATE 'T043G' '|^|' lv_T043G  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T043GT = 'Yes'.
  CONCATENATE 'T043GT' '|^|' lv_T043GT  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T043T = 'Yes'.
  CONCATENATE 'T043T' '|^|' lv_T043T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T055F = 'Yes'.
  CONCATENATE 'T055F' '|^|' lv_T055F  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T077D = 'Yes'.
  CONCATENATE 'T077D' '|^|' lv_T077D  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T077K = 'Yes'.
  CONCATENATE 'T077K' '|^|' lv_T077K  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T077X = 'Yes'.
  CONCATENATE 'T077X' '|^|' lv_T077X  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T077Y = 'Yes'.
  CONCATENATE 'T077Y' '|^|' lv_T077Y  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T082A = 'Yes'.
  CONCATENATE 'T082A' '|^|' lv_T082A  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T082B = 'Yes'.
  CONCATENATE 'T082B' '|^|' lv_T082B  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T082G = 'Yes'.
  CONCATENATE 'T082G' '|^|' lv_T082G  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T082H = 'Yes'.
  CONCATENATE 'T082H' '|^|' lv_T082H  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T082L = 'Yes'.
  CONCATENATE 'T082L' '|^|' lv_T082L  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T082M = 'Yes'.
  CONCATENATE 'T082M' '|^|' lv_T082M  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T082T = 'Yes'.
  CONCATENATE 'T082T' '|^|' lv_T082T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090 = 'Yes'.
  CONCATENATE 'T090' '|^|' lv_T090  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090NA = 'Yes'.
  CONCATENATE 'T090NA' '|^|' lv_T090NA  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090NAT = 'Yes'.
  CONCATENATE 'T090NAT' '|^|' lv_T090NAT  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090NAZ = 'Yes'.
  CONCATENATE 'T090NAZ' '|^|' lv_T090NAZ  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090NDT = 'Yes'.
  CONCATENATE 'T090NDT' '|^|' lv_T090NDT  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090NPT = 'Yes'.
  CONCATENATE 'T090NPT' '|^|' lv_T090NPT  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090NRT = 'Yes'.
  CONCATENATE 'T090NRT' '|^|' lv_T090NRT  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T090NST = 'Yes'.
  CONCATENATE 'T090NST' '|^|' lv_T090NST  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T091T = 'Yes'.
  CONCATENATE 'T091T' '|^|' lv_T091T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T093 = 'Yes'.
  CONCATENATE 'T093' '|^|' lv_T093  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T093C = 'Yes'.
  CONCATENATE 'T093C' '|^|' lv_T093C  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T093D = 'Yes'.
  CONCATENATE 'T093D' '|^|' lv_T093D  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T095 = 'Yes'.
  CONCATENATE 'T095' '|^|' lv_T095  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T095B = 'Yes'.
  CONCATENATE 'T095B' '|^|' lv_T095B  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T095T = 'Yes'.
  CONCATENATE 'T095T' '|^|' lv_T095T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T096 = 'Yes'.
  CONCATENATE 'T096' '|^|' lv_T096  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T096T = 'Yes'.
  CONCATENATE 'T096T' '|^|' lv_T096T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T100 = 'Yes'.
  CONCATENATE 'T100' '|^|' lv_T100  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T100C = 'Yes'.
  CONCATENATE 'T100C' '|^|' lv_T100C  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T100S = 'Yes'.
  CONCATENATE 'T100S' '|^|' lv_T100S  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T156 = 'Yes'.
  CONCATENATE 'T156' '|^|' lv_T156  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T156T = 'Yes'.
  CONCATENATE 'T156T' '|^|' lv_T156T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T156W = 'Yes'.
  CONCATENATE 'T156W' '|^|' lv_T156W  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
IF ISTABLE_T156X = 'Yes'.
  CONCATENATE 'T156X' '|^|' lv_T156X  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T159C = 'Yes'.
  CONCATENATE 'T159C' '|^|' lv_T159C  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T159L = 'Yes'.
  CONCATENATE 'T159L' '|^|' lv_T159L  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T160M = 'Yes'.
  CONCATENATE 'T160M' '|^|' lv_T160M INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T161 = 'Yes'.
  CONCATENATE 'T161' '|^|' lv_T161 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T161S = 'Yes'.
  CONCATENATE 'T161S' '|^|' lv_T161S INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T161T = 'Yes'.
  CONCATENATE 'T161T' '|^|' lv_T161T INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T162 = 'Yes'.
  CONCATENATE 'T162' '|^|' lv_T162 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T162K = 'Yes'.
  CONCATENATE 'T162K' '|^|' lv_T162K INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T162T = 'Yes'.
  CONCATENATE 'T162T' '|^|' lv_T162T INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T162X = 'Yes'.
  CONCATENATE 'T162X' '|^|' lv_T162X INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T162Y = 'Yes'.
  CONCATENATE 'T162Y' '|^|' lv_T162Y INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T163 = 'Yes'.
  CONCATENATE 'T163' '|^|' lv_T163 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T163A = 'Yes'.
  CONCATENATE 'T163A' '|^|' lv_T163A INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T163K = 'Yes'.
  CONCATENATE 'T163K' '|^|' lv_T163K INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T163I = 'Yes'.
  CONCATENATE 'T163I' '|^|' lv_T163I INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T163Y = 'Yes'.
  CONCATENATE 'T163Y' '|^|' lv_T163Y INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T169G = 'Yes'.
  CONCATENATE 'T169G' '|^|' lv_T169G INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T169P = 'Yes'.
  CONCATENATE 'T169P' '|^|' lv_T169P INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T16FB = 'Yes'.
  CONCATENATE 'T16FB' '|^|' lv_T16FB INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T16FC = 'Yes'.
  CONCATENATE 'T16FC' '|^|' lv_T16FC INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T16FE = 'Yes'.
  CONCATENATE 'T16FE' '|^|' lv_T16FE INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T16FG = 'Yes'.
  CONCATENATE 'T16FG' '|^|' lv_T16FG INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T16FK = 'Yes'.
  CONCATENATE 'T16FK' '|^|' lv_T16FK INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T16FS = 'Yes'.
  CONCATENATE 'T16FS' '|^|' lv_T16FS INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T16FV = 'Yes'.
  CONCATENATE 'T16FV' '|^|' lv_T16FV INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T683S = 'Yes'.
  CONCATENATE 'T683S' '|^|' lv_T683S INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T683V = 'Yes'.
  CONCATENATE 'T683V' '|^|' lv_T683V INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T685A = 'Yes'.
  CONCATENATE 'T685A' '|^|' lv_T685A INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T691F = 'Yes'.
  CONCATENATE 'T691F' '|^|' lv_T691F INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_T691G = 'Yes'.
  CONCATENATE 'T691G' '|^|' lv_T691G INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TBAER = 'Yes'.
  CONCATENATE 'TBAER' '|^|' lv_TBAER INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TBSL = 'Yes'.
  CONCATENATE 'TBSL' '|^|' lv_TBSL INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TBSLT = 'Yes'.
  CONCATENATE 'TBSLT' '|^|' lv_TBSLT INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TCDOB = 'Yes'.
  CONCATENATE 'TCDOB' '|^|' lv_TCDOB INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TCURF = 'Yes'.
  CONCATENATE 'TCURF' '|^|' lv_TCURF INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TKA01 = 'Yes'.
  CONCATENATE 'TKA01' '|^|' lv_TKA01 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TKA02 = 'Yes'.
  CONCATENATE 'TKA02' '|^|' lv_TKA02 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TMC4 = 'Yes'.
  CONCATENATE 'TMC4' '|^|' lv_TMC4 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVAK = 'Yes'.
  CONCATENATE 'TVAK' '|^|' lv_TVAK INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVAKT = 'Yes'.
  CONCATENATE 'TVAKT' '|^|' lv_TVAKT INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVAP = 'Yes'.
  CONCATENATE 'TVAP' '|^|' lv_TVAP INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVAPT = 'Yes'.
  CONCATENATE 'TVAPT' '|^|' lv_TVAPT INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVCPF = 'Yes'.
  CONCATENATE 'TVCPF' '|^|' lv_TVCPF INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVCPL = 'Yes'.
  CONCATENATE 'TVCPL' '|^|' lv_TVCPL INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVFK = 'Yes'.
  CONCATENATE 'TVFK' '|^|' lv_TVFK INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVFKT = 'Yes'.
  CONCATENATE 'TVFKT' '|^|' lv_TVFKT INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_TVLKT = 'Yes'.
  CONCATENATE 'TVLKT' '|^|' lv_TVLKT INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_LFA1 = 'Yes'.
  CONCATENATE 'LFA1' '|^|' lv_LFA1 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_LFB1 = 'Yes'.
  CONCATENATE 'LFB1' '|^|' lv_LFB1 INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_CVERS = 'Yes'.
  CONCATENATE 'CVERS' '|^|' lv_CVERS INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
IF ISTABLE_CVERS_REF = 'Yes'.
  CONCATENATE 'CVERS_REF' '|^|' lv_CVERS_REF INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF .
CONCATENATE 'PRDVERS' '|^|' lv_PRDVERS INTO ls_table.
APPEND ls_table TO lt_table .
CLEAR ls_table.
CONCATENATE 'TRDIRT' '|^|' lv_TRDIRT INTO ls_table.
APPEND ls_table TO lt_table .
CLEAR ls_table.
IF ISTABLE_T683T = 'Yes'.
  CONCATENATE 'T683T' '|^|' LV_T683T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  ENDIF .
IF ISTABLE_T687T = 'Yes'.
  CONCATENATE 'T687T' '|^|' LV_T687T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
ENDIF .
IF ISTABLE_TVKO = 'Yes'.
  CONCATENATE 'TVKO' '|^|' LV_TVKO  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
ENDIF .

IF ISTABLE_USRFLDSEL = 'Yes'.
  CONCATENATE 'USRFLDSEL' '|^|' lv_usrfldsel  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
ENDIF.
  CONCATENATE 'UST04' '|^|' LV_UST04  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'UST10C' '|^|' LV_UST10C  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'UST10S' '|^|' LV_UST10S  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'UST12' '|^|' LV_UST12  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USOBT_C' '|^|' LV_USOBT_C  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'adrp' '|^|' LV_ADRP  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.

*#ACTTSAP12.0 Release 12.0 Changes Begin*
  CONCATENATE 'CDHDR' '|^|' LV_CDHDR  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'CDPOS' '|^|' LV_CDPOS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.

  CONCATENATE 'DD02L' '|^|' lv_DD02L  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'TVDIR' '|^|' lv_TVDIR  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'OBJH' '|^|' lv_OBJH  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'DD02T' '|^|' lv_DD02T  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'DD03L' '|^|' lv_DD03l  INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'E070' '|^|' LV_E070  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'E07T' '|^|' LV_E07T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'SSM_CIDT' '|^|' LV_SSM_CIDT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'PAT03' '|^|' LV_PAT03  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'PRGN_CUST' '|^|' LV_PRGN_CUST  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'EDIDS' '|^|' LV_EDIDS INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE.
  CLEAR LS_TABLE.
  CONCATENATE 'TEDS2' '|^|' LV_TEDS2 INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE.
  CLEAR LS_TABLE.
  CONCATENATE 'EDIDC' '|^|' LV_EDIDC INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE.
  CLEAR LS_TABLE.
  CONCATENATE 'EDBAST' '|^|' LV_EDBAST INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE.
  CLEAR LS_TABLE.
  CONCATENATE 'EDIMSGT' '|^|' LV_EDIMSGT INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE.
  CLEAR LS_TABLE.
  CONCATENATE 'T685' '|^|' LV_T685 INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE.
  CLEAR LS_TABLE.
  CONCATENATE 'T682I' '|^|' LV_T682I INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE.
  CLEAR LS_TABLE.
  IF istable_GRACFFOWNER = 'Yes'.
    CONCATENATE 'GRACFFOWNER' '|^|' lv_GRACFFOWNER  INTO ls_table .
    APPEND ls_table TO lt_table .
    CLEAR ls_table.
  ENDIF.
  IF istable_GRACFFUSER = 'Yes'.
    CONCATENATE 'GRACFFUSER' '|^|' lv_GRACFFUSER  INTO ls_table .
    APPEND ls_table TO lt_table .
    CLEAR ls_table.
  ENDIF.
  IF istable_GRACCONFIGSET = 'Yes'.
    CONCATENATE 'GRACCONFIGSET' '|^|' lv_GRACCONFIGSET  INTO ls_table .
    APPEND ls_table TO lt_table .
    CLEAR ls_table.
  ENDIF.
  IF istable_GRACCONFIG = 'Yes'.
    CONCATENATE 'GRACCONFIG' '|^|' lv_GRACCONFIG  INTO ls_table .
    APPEND ls_table TO lt_table .
    CLEAR ls_table.
  ENDIF.
  IF istable_GRACCONFIGT = 'Yes'.
    CONCATENATE 'GRACCONFIGT' '|^|' lv_GRACCONFIGT  INTO ls_table .
    APPEND ls_table TO lt_table .
    CLEAR ls_table.
  ENDIF.
  IF istable_GRACFFCTRL = 'Yes'.
    CONCATENATE 'GRACFFCTRL' '|^|' lv_GRACFFCTRL  INTO ls_table .
    APPEND ls_table TO lt_table .
    CLEAR ls_table.
  ENDIF.

  IF ISTABLE_SEC_POLICY_RT = 'Yes'.
    CONCATENATE 'SEC_POLICY_RT' '|^|' LV_SEC_POLICY_RT  INTO LS_TABLE .
    APPEND LS_TABLE TO LT_TABLE .
    CLEAR LS_TABLE.
  ENDIF.

  IF ISTABLE_SEC_POLICY_CUSTT = 'Yes'.
    CONCATENATE 'SEC_POLICY_CUSTT' '|^|' LV_SEC_POLICY_CUSTT  INTO LS_TABLE .
    APPEND LS_TABLE TO LT_TABLE .
    CLEAR LS_TABLE.
  ENDIF.
  CONCATENATE 'TPALOG' '|^|' LV_TPALOG  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TVIMF' '|^|' LV_TVIMF  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USH02' '|^|' LV_USH02  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USH04' '|^|' LV_USH04  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR04' '|^|' LV_USR04  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TBTCO' '|^|' LV_TBTCO  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_TEXTS' '|^|' LV_AGR_TEXTS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'RSAUPROF' '|^|' LV_RSAUPROF  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'SAPWLSERV' '|^|' LV_SAPWLSERV  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DD09L' '|^|' LV_DD09L  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSL1D' '|^|' LV_TSL1D  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSL1T' '|^|' LV_TSL1T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.

  IF ISTABLE_USOBHASH = 'Yes'.
    CONCATENATE 'USOBHASH' '|^|' LV_USOBHASH  INTO LS_TABLE .
    APPEND LS_TABLE TO LT_TABLE .
    CLEAR LS_TABLE.
  ENDIF.

  CONCATENATE 'Start Time' '|^|' LV_TIME1 INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'End Time' '|^|' LV_TIME2 INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
  CLEAR LT_TABLE .
*  ** begin of changes -- SM20 Log extraction -- SV 02150202
** commenting the below code and pushing into a new sub-routine for re-usability
    PERFORM sub_download_acct_config.

  CLEAR LT_TABLE .
  CLEAR LV_FILE .


*  Begin of Code for Data Extraction of RSUSR100N report - Madhuri KL - 1/20/2018

  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'RSUSR100N'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
    PERFORM sub_rsusr100n.
  ENDIF.
***** End of Code for RSUSR100N.*****
* --------------------------------------------------------------------------------------- *

* Begin of Code for Data Extraction of SCU3 Logs - Madhuri KL - 3/1/2018

  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'RSVTPROT'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
    PERFORM sub_rsvtprot.
  ENDIF.
******** End of Code for RSVTPROT****

** begin of addition for SE06---- 31/01/2019

  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'SE06'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    PERFORM download_se06_new.
  ENDIF.
** end of addition for SE06------  31/01/2019


* End of Code for Data Extraction of SCU3 Logs - Madhuri KL - 3/1/2018

*&---------------------------------------------------------------------*
*&      Form  download_gui
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LT_TABLE   text
*      -->LV_FILE    text
*----------------------------------------------------------------------*



FORM download_gui  TABLES lt_table TYPE tt_text_table
USING lv_file TYPE string .

** Begin of change - sudha
  IF lv_file CS 'config'.
    PERFORM check_file USING lv_file.
  ENDIF.
**End of change - sudha

  CONCATENATE p_file lv_file INTO lv_file .
  IF rb_fore = 'X' .
    CALL FUNCTION 'GUI_DOWNLOAD '
      EXPORTING
        filename                = lv_file
        filetype                = 'ASC'
        append                  = 'X'    "Added by SUDHA for resolving memory dump
        write_field_separator   = ' '
        codepage                = '4110'
        write_bom               = 'X'
      TABLES
        data_tab                = lt_table
      EXCEPTIONS
        file_write_error        = 1
        no_batch                = 2
        gui_refuse_filetransfer = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    lv_dataset = lv_file .
*    OPEN DATASET lv_dataset FOR OUTPUT IN TEXT MODE ENCODING UTF-8 . "Commented by SUDHA for resolving memory dump
    OPEN DATASET lv_dataset FOR APPENDING IN TEXT MODE ENCODING UTF-8 . "Added by SUDHA for resolving memory dump
    LOOP AT lt_table INTO ls_table .
      TRANSFER ls_table TO lv_dataset .
    ENDLOOP.
    CLOSE DATASET lv_dataset .
  ENDIF.
ENDFORM .                    "download_gui

*&---------------------------------------------------------------------*
*&      Form  CONV_TABLE_TO_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->IT_TABLE1  text
*      -->LV_FILE    text
*      -->LS_TABLE   text
*----------------------------------------------------------------------*
FORM conv_table_to_text TABLES it_table1 TYPE STANDARD TABLE
USING lv_file TYPE string
ls_table   TYPE string.
  DATA: lv_text_line TYPE string.
*  DATA: lv_text_line(255) TYPE c.
  FIELD-SYMBOLS: <ls_item_stru> TYPE ANY.
  FIELD-SYMBOLS: <lv_field_value> TYPE ANY.
  DATA: lv_field_value TYPE string.
*  DATA: lv_field_value TYPE char255.
  DATA: lv_separator TYPE char3.
  DATA: lv_fieldcheck TYPE c.
  DATA: gt_text_table TYPE tt_text_table.
  DATA: lv_lines(20) TYPE c.
  DATA: lv_file1 TYPE string.
  FIELD-SYMBOLS: <ls_item> TYPE ANY.

** Begin of change - sudha
  FIELD-SYMBOLS: <lt_table> TYPE INDEX TABLE.
  DATA: ref_tab TYPE REF TO data.
** End of change - sudha
*  FIELD-SYMBOLS: <gt_tab_items> TYPE INDEX TABLE.
*  ASSIGN it_table1[] TO  <gt_tab_items>.
  lv_separator = '|^|'.
  DATA: lv_tabix TYPE sy-tabix. "Added for resolving memory dump
**to check only when header is passed
  IF ls_table IS NOT INITIAL..
  INSERT ls_table INTO gt_text_table INDEX 1 .
** Begin of change - sudha
  PERFORM check_file USING lv_file.
ENDIF.

  LOOP AT it_table1 ASSIGNING <ls_item>.
** End of change - Sudha
    lv_file1 = lv_file.
    lv_tabix = sy-tabix. "Added for resolving memory dump
    CLEAR lv_text_line.
    CLEAR lv_fieldcheck.
    ASSIGN <ls_item> TO <ls_item_stru>.
    DO.
      ASSIGN COMPONENT sy-index OF STRUCTURE
      <ls_item_stru> TO <lv_field_value>.
      IF sy-subrc <> 0.
        EXIT.
      ENDIF.
      lv_field_value = <lv_field_value>.
      IF lv_text_line IS INITIAL AND lv_fieldcheck IS INITIAL .
        lv_text_line = lv_field_value .
        lv_fieldcheck = '1'.
      ELSE.
        CONCATENATE lv_text_line lv_field_value INTO
        lv_text_line SEPARATED BY lv_separator.
      ENDIF.
    ENDDO.
    APPEND lv_text_line TO gt_text_table.

    lv_lines = LINES( gt_text_table ).

    IF lv_lines > 100000.
      PERFORM download_gui TABLES gt_text_table USING lv_file1.
      CLEAR : gt_text_table, lv_file1.
    ENDIF.
  ENDLOOP.
  table_count = table_count + 1.
  IF gt_text_table IS NOT INITIAL.

    PERFORM download_gui TABLES gt_text_table USING lv_file.
  ENDIF.
** begin of change - sudha
  CLEAR: gt_text_table , lv_file1 , lv_file.
  FREE: gt_text_table.
** end of change - sudha
ENDFORM .                    "conv_table_to_text


* Old Report Code Begin*

*REPORT  zbcc_gcc_defaultsapr3_password.
*TABLES : usr02.

*&---------------------------------------------------------------------*
*& Selection Screen Declarations
*&---------------------------------------------------------------------*
*SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME.
*PARAMETERS:p_client TYPE sy-mandt DEFAULT sy-mandt.
*SELECTION-SCREEN END OF BLOCK b1.
*&---------------------------------------------------------------------*
*& Start of selection Declarations
*&---------------------------------------------------------------------*
*START-OF-SELECTION.

*&---------------------------------------------------------------------*
*&      Form  get_data_1906
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA_1906 .
  CLEAR SAPSTAR_VALUE_1906.                                     " note 578891
  CALL 'C_SAPGPARAM' ID 'NAME' FIELD 'login/no_automatic_user_sapstar'
                     ID 'VALUE' FIELD SAPSTAR_VALUE_1906.

  SELECT MANDT
         FROM
         T000
         INTO TABLE  T_T000_1906.
  IF SY-SUBRC EQ 0.
    SORT T_T000_1906 BY CLIENT.
  ENDIF.
*Begin of changes by gentelbh on 07/04.
  SELECT MANDT
         BNAME
         BCODE
         CODVN
         PASSCODE
         FROM USR02
         CLIENT SPECIFIED
         INTO TABLE T_USR02.

  IF T_USR02 IS NOT INITIAL.
* IF SY-SUBRC EQ 0.
    SORT T_USR02 BY BNAME MANDT.
  ENDIF.

*End of changes by gentelbh on 07/04.

  LOOP AT T_T000_1906 INTO W_T000_1906.
*check SAP*.
    CLEAR T_USR02_1906.

**** begin of change by madhuri - 2/29/2016

    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                       BNAME = 'SAP*'
                       MANDT = W_T000_1906-CLIENT
                       BINARY SEARCH.

    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 2.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 11.

        WHEN 'A'.
          IF  <FS_USR02>-BCODE = CODEAS1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSEIF  <FS_USR02>-BCODE = CODEAS2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'B'.
          IF  <FS_USR02>-BCODE = CODEBS1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSEIF  <FS_USR02>-BCODE = CODEBS2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE =  LC_SAPD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE =  LC_SAPE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE =  CODEBS1_1906 AND <FS_USR02>-PASSCODE = LC_SAPI .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE =  CODEBS1_1906 AND <FS_USR02>-PASSCODE = LC_SAPI .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
      ENDCASE.
    ENDIF.

**   Check DDIC
    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                       BNAME = 'DDIC'
                       MANDT = W_T000_1906-CLIENT
                       BINARY SEARCH.

    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 5.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODEAD1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSEIF <FS_USR02>-BCODE = CODEAD2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODEBD1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSEIF <FS_USR02>-BCODE = CODEBD2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_DDICD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_DDICE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODEBD2_1906 AND <FS_USR02>-PASSCODE = LC_DDICF.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODEBD2_1906 AND <FS_USR02>-PASSCODE = LC_DDICF.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
      ENDCASE.
    ENDIF.

**   Check SAPCPIC

    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                      BNAME = 'SAPCPIC'
                      MANDT = W_T000_1906-CLIENT
                      BINARY SEARCH .
*
    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 5.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODEACP_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODEBCP_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_SAPCPICD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_SAPCPICE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODEBCP_1906 AND <FS_USR02>-PASSCODE = LC_SAPCPICF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSEIF <FS_USR02>-BCODE = CODEBCP_1906 AND <FS_USR02>-PASSCODE = LC_SAPCPICF2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSEIF <FS_USR02>-PASSCODE = LC_SAPCPICF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODEBCP_1906 AND <FS_USR02>-PASSCODE = LC_SAPCPICF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
      ENDCASE.
    ENDIF.

**   Check EARLYWATCH
    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                         BNAME = 'EARLYWATCH'
                         MANDT = W_T000_1906-CLIENT
                         BINARY SEARCH .
    IF SY-SUBRC <> 0.
      IF W_T000_1906-CLIENT = '066'.
        PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 5.
      ENDIF.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODEAEW_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODEBEW_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_EARLYD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_EARLYE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODEBEW_1906 AND <FS_USR02>-PASSCODE = LC_EARLYF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSEIF <FS_USR02>-BCODE = CODEBEW_1906 AND <FS_USR02>-PASSCODE = LC_EARLYF2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 10.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSEIF <FS_USR02>-PASSCODE =  LC_EARLYF1 .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODEBEW_1906 AND <FS_USR02>-PASSCODE = LC_EARLYF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.

      ENDCASE.
    ENDIF.

**    Check TMSADM

    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                       BNAME = 'TMSADM'
                       MANDT = W_T000_1906-CLIENT
                       BINARY SEARCH.

    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 5.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODETMS1A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS1B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODETMS1A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS1B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSEIF <FS_USR02>-BCODE = CODETMS2A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'C' .
          IF <FS_USR02>-BCODE = CODETMS1B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_TMSD1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = LC_TMSD2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_TMSE1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODETMS1B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODETMS1B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
      ENDCASE.
    ENDIF.
**** end of change by madhuri - 2/29/2016

  ENDLOOP.
ENDFORM.                    " get_data_1906
*&-------------------


" get_data_1906
*&-------------------
*&---------------------------------------------------------------------*
*&      Form  write_state
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T000_MANDT  text
*      -->P_0181   text
*      -->P_3      text
*----------------------------------------------------------------------*
FORM WRITE_STATE  USING    MANDT
                           USER
                           STATE_ID.
  MOVE MANDT TO W_OUTPUT_1906-CLIENT.
  MOVE USER TO W_OUTPUT_1906-USER.
  CASE STATE_ID.
    WHEN 1.
      MOVE 'Exists; Password not trivial.' TO W_OUTPUT_1906-PWSTATUS.
*      MOVE 'X' TO W_OUTPUT_1906-FLAG.
    WHEN 2.
      IF SAPSTAR_VALUE_1906 = '1'.                              " note 578891
        MOVE 'Does not exit. Logon not possible. See SAP Note 2383' TO W_OUTPUT_1906-PWSTATUS.
      ELSE.
        MOVE 'Does not exist.Logon possible with p/w PASS.See Note 2383' TO W_OUTPUT_1906-PWSTATUS.
      ENDIF.
    WHEN 3.
      MOVE 'Password 06071992 well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 4.
      MOVE 'Password 19920706 well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 5.
      MOVE 'Does not exist.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 6.
      MOVE 'Password ADMIN well known. See SAP Note 29276' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 7.
      MOVE 'Password SUPPORT well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 8 .
      MOVE 'Password PASSWORD well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 9 .
      MOVE 'Password $1Pawd2& well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 10 .
      MOVE 'Salted hash, check RSUSR003 in SAP.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 11 .
      MOVE 'Exists. Password-based logon is not possible.' TO W_OUTPUT_1906-PWSTATUS.
  ENDCASE.

  APPEND W_OUTPUT_1906 TO T_OUTPUT_1906.
  CLEAR W_OUTPUT_1906 .
ENDFORM.                    "WRITE_STATE
*&---------------------------------------------------------------------*
*&      Form  display_data_1906
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
" display_data_1906

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_DATA_1906
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM DISPLAY_DATA_1906 .
*  LOOP AT T_OUTPUT_1906 INTO W_OUTPUT_1906.
**    IF W_OUTPUT_1906-FLAG = 'X'.
**      CONTINUE.
**    ELSE.
*      REPLACE '"' WITH SPACE INTO W_OUTPUT_1906-PWSTATUS.
*
*      CONCATENATE  W_OUTPUT_1906-CLIENT '|^|'  INTO W_OUTPUT_1906-CLIENT.
*      CONCATENATE  W_OUTPUT_1906-USER '|^|' INTO W_OUTPUT_1906-USER.
*      CONCATENATE '"' W_OUTPUT_1906-PWSTATUS '"' INTO W_OUTPUT_1906-PWSTATUS.
*
*      CONCATENATE W_OUTPUT_1906-CLIENT
*                  W_OUTPUT_1906-USER
*                  W_OUTPUT_1906-PWSTATUS
*                  INTO W_STR_1906-STR . "SEPARATED BY ','.
*      APPEND W_STR_1906 TO T_STR_1906.
*      CLEAR W_STR_1906.
*      CLEAR W_OUTPUT_1906.
**    ENDIF.
*  ENDLOOP.
**** HEADER LINE FOR OLD REPORT***
*  W_STR_1906-STR = 'CLIENT [C(00006)]|^|BNAME [C(00024)]|^|PWSTATUS [C(00064)]'.
*  INSERT W_STR_1906 INTO T_STR_1906 INDEX 1 .
***
***  CALL FUNCTION 'GUI_DOWNLOAD'
***    EXPORTING
***      FILENAME                = P_1906
***      FILETYPE                = 'DAT'
***    TABLES
***      DATA_TAB                = T_STR_1906
***    EXCEPTIONS
***      FILE_WRITE_ERROR        = 1
***      NO_BATCH                = 2
***      GUI_REFUSE_FILETRANSFER = 3
***      INVALID_TYPE            = 4
***      NO_AUTHORITY            = 5
***      UNKNOWN_ERROR           = 6
***      HEADER_NOT_ALLOWED      = 7
***      SEPARATOR_NOT_ALLOWED   = 8
***      FILESIZE_NOT_ALLOWED    = 9
***      HEADER_TOO_LONG         = 10
***      DP_ERROR_CREATE         = 11
***      DP_ERROR_SEND           = 12
***      DP_ERROR_WRITE          = 13
***      UNKNOWN_DP_ERROR        = 14
***      ACCESS_DENIED           = 15
***      DP_OUT_OF_MEMORY        = 16
***      DISK_FULL               = 17
***      DP_TIMEOUT              = 18
***      FILE_NOT_FOUND          = 19
***      DATAPROVIDER_EXCEPTION  = 20
***      CONTROL_FLUSH_ERROR     = 21
***      OTHERS                  = 22.
***  IF SY-SUBRC <> 0.
**** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
****         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
***  ENDIF.

  LV_FILE = 'BCC_GCC_Default_SAPR3_Password.ACTT'.
  LS_TABLE = 'CLIENT [C(00006)]|^|BNAME [C(00024)]|^|PWSTATUS [C(00064)]' .
*  IF SY-SUBRC = 0.
  PERFORM CONV_TABLE_TO_TEXT TABLES T_OUTPUT_1906
  USING LV_FILE
  LS_TABLE .
  FREE T_OUTPUT_1906 .
  CLEAR LT_TABLE .
  CLEAR LS_TABLE .
*  ELSE.
*    APPEND LS_TABLE TO LT_TABLE .
*    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
*    CLEAR LT_TABLE .
*    CLEAR LS_TABLE .
*  ENDIF.

ENDFORM.                    "DISPLAY_DATA_1906

*&---------------------------------------------------------------------*
*&      Form  CHECK_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_FILE  text
*----------------------------------------------------------------------*
form CHECK_FILE  using pv_file.
**Check if file already exists
  DATA: lv_result TYPE C,
        lv_rc     TYPE I,
        lv_cfile TYPE string,
        lv_delete TYPE C,
        lv_bgcfile TYPE rlgrap-filename.

  CONCATENATE p_file pv_file INTO lv_cfile.

  IF rb_fore = 'X'.
    CALL METHOD cl_gui_frontend_services=>file_exist
    EXPORTING
      file                 = lv_cfile
      RECEIVING
      result               = lv_result
    EXCEPTIONS
      cntl_error           = 1
      error_no_gui         = 2
      wrong_parameter      = 3
      not_supported_by_gui = 4
      OTHERS               = 5.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF lv_result = abap_true.
      CALL METHOD cl_gui_frontend_services=>file_delete
      EXPORTING
        filename             = lv_cfile
      CHANGING
        rc                   = lv_rc
      EXCEPTIONS
        file_delete_failed   = 1
        cntl_error           = 2
        error_no_gui         = 3
        file_not_found       = 4
        access_denied        = 5
        unknown_error        = 6
        not_supported_by_gui = 7
        wrong_parameter      = 8
        OTHERS               = 9.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.

  ELSE.
    lv_bgcfile = lv_cfile.
    CLEAR lv_delete.
    OPEN DATASET lv_bgcfile FOR INPUT IN TEXT MODE ENCODING UTF-8 .
    IF sy-subrc = 0.
      lv_delete = abap_true.
    ENDIF.
    CLOSE DATASET lv_bgcfile.

    IF lv_delete = abap_true.
      DELETE DATASET lv_bgcfile.
    ENDIF.
  ENDIF.

endform.                    " CHECK_FILE

* Begin of Code for Data Extraction of RSUSR100N report - Madhuri KL - 1/20/2018
FORM fill_seltab
    USING selname TYPE rsparams-selname
          kind    TYPE rsparams-kind
          sign   TYPE rsparams-sign
          option   TYPE rsparams-option
          low   TYPE rsparams-low
          high   TYPE rsparams-high  .

  DATA ls_seltab TYPE rsparams .

  ls_seltab-selname = selname .
  ls_seltab-kind    = kind .
  ls_seltab-sign    = sign .
  ls_seltab-option  = option .
  ls_seltab-high    = high .
  ls_seltab-low     = low .
  APPEND ls_seltab TO gt_seltab .
  CLEAR ls_seltab .

ENDFORM.                    "fill_seltab

* End of Code for Data Extraction of RSUSR100N report - Madhuri KL - 1/20/2018

*&---------------------------------------------------------------------*
*&      Form  DOWNLOAD_SE06----- 31/01/2019
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM download_se06_new .

  TYPES: BEGIN OF t_output,
           time   TYPE datum,
           user   TYPE string,
           detail TYPE string,
         END OF t_output.

  DATA: lt_lines          TYPE STANDARD TABLE OF trlog,
        ls_lines          TYPE trlog,

        lt_lines1         TYPE STANDARD TABLE OF trlog,

        lv_tstamp         TYPE sy-datum,
        lv_timestamp_flag TYPE c,
        lv_stop_index     TYPE i,
        lv_start_index    TYPE i,
        lv_date           TYPE sy-datum,

        lt_output         TYPE STANDARD TABLE OF t_output,
        ls_output         TYPE t_output,

        lv_str1           TYPE string,
        lv_str2           TYPE string,
        lv_str3           TYPE string,
        lv_str4           TYPE string.


  FIELD-SYMBOLS: <fs_line> LIKE trlog.
  PERFORM check_file USING 'SE06.ACTT'.
  IF rb_fore IS INITIAL.  "11/19/2019
    PERFORM sub_download_se06.
  ENDIF.
  OPEN CURSOR WITH HOLD s_cursor FOR SELECT
  *
  FROM ddprs
  WHERE protname = 'TRLOGSYSTEM'.
  DO.
    FETCH NEXT CURSOR s_cursor
        APPENDING TABLE it_ddprs
        PACKAGE SIZE maxsize.
    IF sy-subrc <> 0.
      CLOSE CURSOR s_cursor.
      EXIT.
    ELSE.
      IF rb_fore IS INITIAL.
        PERFORM sub_download_se06.
      ENDIF.
    ENDIF.
  ENDDO.

  IF rb_fore IS NOT INITIAL.
    PERFORM sub_download_se06.
  ENDIF.



ENDFORM.                    " DOWNLOAD_SE06----- 31/01/2019
*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_AGR121
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_download_agr1251 .

  STATICS : lv_no_head TYPE c.

  lv_file = 'AGR_1251.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

    ls_table = 'DELETED'.
    DESCRIBE FIELD wa_agr_1251-deleted
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'MODIFIED' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-modified
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'HIGH' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-high
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'LOW' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-low
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'FIELD' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-field
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'OBJECT' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-object
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'AUTH' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-auth
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'COUNTER' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-counter
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'AGR_NAME' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-agr_name
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'MANDT' INTO ls_table.
    DESCRIBE FIELD wa_agr_1251-mandt
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.

  ENDIF.

  lv_agr_1251 = lv_agr_1251 + LINES( it_agr_1251 ) .
  IF lv_agr_1251 GT 0.
    PERFORM conv_table_to_text TABLES it_agr_1251
    USING lv_file
    ls_table .
    FREE it_agr_1251 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
*ENDIF.



ENDFORM.                    " SUB_DOWNLOAD_AGR121
*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_UST12
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_UST12 .

  STATICS : lv_no_head TYPE c.

  lv_file = 'UST12.ACTT'.

  if lv_no_head IS INITIAL.

    LV_NO_HEAD = 'X'.

    ls_table = 'BIS'.
    DESCRIBE FIELD WA_UST12-BIS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'VON' into ls_table.
    DESCRIBE FIELD WA_UST12-VON
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'FIELD' into ls_table.
    DESCRIBE FIELD WA_UST12-FIELD
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'AKTPS' into ls_table.
    DESCRIBE FIELD WA_UST12-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'AUTH' into ls_table.
    DESCRIBE FIELD WA_UST12-AUTH
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'OBJCT' into ls_table.
    DESCRIBE FIELD WA_UST12-OBJCT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'mandt' into ls_table.
    DESCRIBE FIELD WA_UST12-mandt
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  ENDIF.
    lv_UST12 = lv_UST12 + LINES( it_UST12 ) .
  IF lv_UST12 GT 0.
    perform conv_table_to_text tables it_UST12
    using lv_file
    ls_table .
    FREE it_UST12 .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    append ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.

ENDFORM.                       " Sub Download UST12
*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_USOBT_C
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_USOBT_C .

  STATICS : lv_no_head TYPE c.

  lv_file = 'USOBT_C.ACTT'.

  if lv_no_head IS INITIAL.

    LV_NO_HEAD = 'X'.

    ls_table = 'NAME'.
    DESCRIBE FIELD WA_USOBT_C-NAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'TYPE' into ls_table.
    DESCRIBE FIELD WA_USOBT_C-TYPE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'OBJECT' into ls_table.
    DESCRIBE FIELD WA_USOBT_C-OBJECT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'FIELD' into ls_table.
    DESCRIBE FIELD WA_USOBT_C-FIELD
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'LOW' into ls_table.
    DESCRIBE FIELD WA_USOBT_C-LOW
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE ls_table '|^|' 'HIGH' into ls_table.
    DESCRIBE FIELD WA_USOBT_C-HIGH
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  ENDIF.
    lv_USOBT_C = lv_USOBT_C + LINES( it_USOBT_C ) .
  IF lv_USOBT_C GT 0.
    perform conv_table_to_text tables it_USOBT_C
    using lv_file
    ls_table .
    FREE it_USOBT_C .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    append ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.

ENDFORM.                       " Sub Download USOBT_C
*&---------------------------------------------------------------------*
*& Form SUB_CDHDR_CDPOS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM sub_cdhdr_cdpos.
  DATA: lt_cdhdr TYPE STANDARD TABLE OF ts_cdhdr .
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
mandant
objectclas
objectid
changenr
username
udate
utime
tcode
planchngnr
act_chngno
was_plannd
change_ind
langu
version
FROM cdhdr  CLIENT SPECIFIED
* INTO TABLE IT_CDHDR
WHERE mandant =  s_pclien AND objectclas = 'PFCG' AND udate >= s_start AND udate <= s_end
.
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR s_cursor
    INTO TABLE it_cdhdr
    PACKAGE SIZE maxsize.
    IF sy-subrc <> 0.
      CLOSE CURSOR s_cursor.
      EXIT.
    ELSE.
      PERFORM sub_fetch_cdpos.
      IF rb_fore IS NOT INITIAL.
        APPEND LINES OF it_cdhdr TO lt_cdhdr[].
      ENDIF.
    ENDIF.
  ENDDO.
*** End of change by SUDHA

*ENDIF.

  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'CDHDR'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  ENDIF.

  IF rb_fore IS NOT INITIAL.
    it_cdhdr[] = lt_cdhdr[]. REFRESH lt_cdhdr.
    PERFORM sub_download_cdhdr USING ' '.
    PERFORM sub_download_cdpos USING ' '.
  ENDIF.

ENDFORM.                    "sub_cdhdr_cdpos
*&---------------------------------------------------------------------*
*& Form SUB_FETCH_CDPOS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM sub_fetch_cdpos.

  STATICS : lv_no_head TYPE c.

  IF rb_fore IS INITIAL.
    PERFORM sub_download_cdhdr USING lv_no_head.
  ENDIF.

  IF it_cdhdr IS NOT INITIAL.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD s_cursor1 FOR
    SELECT
    mandant
    objectclas
    objectid
    changenr
    tabname
    tabkey
    fname
    chngind
    text_case
    unit_old
    unit_new
    cuky_old
    cuky_new
    value_new
    value_old
    FROM cdpos  CLIENT SPECIFIED
* INTO TABLE IT_CDPOS
    FOR ALL ENTRIES IN it_cdhdr
    WHERE changenr = it_cdhdr-changenr
    AND tabname IN ('AGR_DEFINE', 'CD1251', 'AGR_USERS')
    AND objectclas = 'PFCG'
    AND mandant =  s_pclien
    .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor1
      APPENDING TABLE it_cdpos
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor1.
        EXIT.
      ELSE.
        IF rb_fore IS INITIAL.
          PERFORM sub_download_cdpos USING lv_no_head.
        ENDIF.
        lv_no_head = 'X'.
      ENDIF.
    ENDDO.
  ENDIF.
*** End of change by SUDHA
  IF rb_fore IS INITIAL.
    FREE : it_cdhdr.
  ENDIF.

ENDFORM.                    "sub_fetch_cdpos
*&---------------------------------------------------------------------*
*& Form SUB_DOWNLOAD_CDPOS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*      -->P_LV_NO_HEAD  text
*&---------------------------------------------------------------------*
FORM sub_download_cdpos  USING    pv_no_head.


  lv_file = 'CDPOS.ACTT'.
  IF pv_no_head IS INITIAL.
    ls_table = 'MANDANT'.
    DESCRIBE FIELD wa_cdpos-mandant
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'OBJECTCLAS' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-objectclas
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'OBJECTID' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-objectid
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CHANGENR' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-changenr
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'TABNAME' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-tabname
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'TABKEY' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-tabkey
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'FNAME' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-fname
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CHNGIND' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-chngind
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'TEXT_CASE' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-text_case
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UNIT_OLD' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-unit_old
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UNIT_NEW' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-unit_new
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CUKY_OLD' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-cuky_old
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CUKY_NEW' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-cuky_new
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'VALUE_NEW' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-value_new
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'VALUE_OLD' INTO ls_table.
    DESCRIBE FIELD wa_cdpos-value_old
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  ENDIF.

  lv_cdpos = lv_cdpos + LINES( it_cdpos ) .
  IF lv_cdpos GT 0.
    PERFORM conv_table_to_text TABLES it_cdpos
    USING lv_file
     ls_table .
*    FREE it_cdhdr.
    FREE it_cdpos.
    CLEAR lt_table.
    CLEAR ls_table.
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table.
    CLEAR ls_table.
  ENDIF.


ENDFORM.                    "sub_download_cdpos
*&---------------------------------------------------------------------*
*& Form SUB_DOWNLOAD_CDHDR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*      -->P_LV_NO_HEAD  text
*&---------------------------------------------------------------------*
FORM sub_download_cdhdr  USING    pv_no_head.

  lv_file = 'CDHDR.ACTT'.

  IF pv_no_head IS INITIAL.
    ls_table = 'MANDANT'.
    DESCRIBE FIELD wa_cdhdr-mandant
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'OBJECTCLAS' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-objectclas
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'OBJECTID' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-objectid
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CHANGENR' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-changenr
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'USERNAME' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-username
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UDATE' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-udate
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UTIME' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-utime
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'TCODE' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-tcode
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'PLANCHNGNR' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-planchngnr
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'ACT_CHNGNO' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-act_chngno
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'WAS_PLANND' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-was_plannd
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CHANGE_IND' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-change_ind
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'LANGU' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-langu
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'VERSION' INTO ls_table.
    DESCRIBE FIELD wa_cdhdr-version
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.

  ENDIF.

  lv_cdhdr = lv_cdhdr + LINES( it_cdhdr ) .
  IF lv_cdhdr GT 0.
    PERFORM conv_table_to_text TABLES it_cdhdr
    USING lv_file
     ls_table .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.

ENDFORM.                    "sub_download_cdhdr
*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_USH04
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_download_ush04 .

*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD s_cursor FOR
SELECT
mandt
bname
max( modda ) AS modda
FROM ush04  CLIENT SPECIFIED
* INTO TABLE IT_USH04_TMP
WHERE mandt =  s_pclien AND modda < s_start
GROUP BY mandt bname.
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR s_cursor
    APPENDING TABLE it_ush04_tmp
    PACKAGE SIZE maxsize.
    IF sy-subrc <> 0.
      CLOSE CURSOR s_cursor.
      EXIT.
    ENDIF.
  ENDDO.
*** End of change by SUDHA

  IF it_ush04_tmp IS NOT INITIAL.
* OPTION 1
    SELECT
          mandt
          bname
          modda
          modti
          modbe
          nrpro
          profs
          FROM ush04  CLIENT SPECIFIED
          INTO TABLE it_ush04_tmp1
          FOR ALL ENTRIES IN it_ush04_tmp
          WHERE mandt = it_ush04_tmp-mandt AND bname = it_ush04_tmp-bname AND modda = it_ush04_tmp-modda.

    SORT it_ush04_tmp1 BY mandt bname modda DESCENDING modti DESCENDING.
    DELETE ADJACENT DUPLICATES FROM it_ush04_tmp1 COMPARING mandt bname modda.
    APPEND LINES OF it_ush04_tmp1 TO it_ush04.
    REFRESH it_ush04_tmp1.
  ENDIF.

  FREE it_ush04_tmp.
  FREE it_ush04_tmp1.

ENDFORM.                    " SUB_DOWNLOAD_USH04
*&---------------------------------------------------------------------*
*& Form SUB_TRDIR_TRDIRT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM SUB_TRDIR_TRDIRT.
  DATA: LT_TRDIR TYPE STANDARD TABLE OF TS_TRDIR .
 OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  NAME
  SECU
  SUBC
  CNAM
  CDAT
  UNAM
  UDAT
  FROM TRDIR
* INTO TABLE IT_TRDIR
  WHERE ( SUBC IN ('1','M','F') )
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_TRDIR
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ELSE.
      PERFORM SUB_FETCH_TRDIRT.
      IF rb_fore IS NOT INITIAL.
        APPEND LINES OF IT_TRDIR TO LT_TRDIR[]. REFRESH : it_trdir[].
      ENDIF.
    ENDIF.

  ENDDO.
  READ TABLE p_tables WITH KEY sign = 'I' option = 'EQ' low = 'TRDIR'.
  IF ck_pop <> 'X' OR sy-subrc <> 0.
  ENDIF.

  IF rb_fore IS NOT INITIAL.
    IT_TRDIR[] = LT_TRDIR[]. REFRESH LT_TRDIR.
    PERFORM SUB_DOWNLOAD_TRDIR USING ' '.
    PERFORM SUB_DOWNLOAD_TRDIRT USING ' '.
  ENDIF.

ENDFORM.                    "sub_trdir_trdirt
*&---------------------------------------------------------------------*
*& Form SUB_FETCH_CDPOS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*

FORM SUB_FETCH_TRDIRT.

  STATICS : lv_no_head TYPE c.

  IF rb_fore IS INITIAL.
    PERFORM SUB_DOWNLOAD_TRDIR USING lv_no_head.
  ENDIF.

  IF IT_TRDIR IS NOT INITIAL.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD s_cursor1 FOR
     SELECT
        NAME
        SPRSL
        TEXT
     FROM TRDIRT
     FOR ALL ENTRIES IN IT_TRDIR
    WHERE NAME = IT_TRDIR-NAME AND SPRSL = 'EN'.
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR s_cursor1
      APPENDING TABLE IT_TRDIRT
      PACKAGE SIZE maxsize.
      IF sy-subrc <> 0.
        CLOSE CURSOR s_cursor1.
        EXIT.
      ELSE.
        IF rb_fore IS INITIAL.
          PERFORM SUB_DOWNLOAD_TRDIRT USING lv_no_head.
        ENDIF.
        lv_no_head = 'X'.
      ENDIF.
    ENDDO.
  ENDIF.
*** End of change by SUDHA
  IF rb_fore IS INITIAL.
    FREE : IT_TRDIR.
  ENDIF.

ENDFORM.                    "sub_fetch_TRDIRT
*&---------------------------------------------------------------------*
*& Form SUB_DOWNLOAD_TRDIRT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*      -->P_LV_NO_HEAD  text
*&---------------------------------------------------------------------*
FORM SUB_DOWNLOAD_TRDIRT  USING    pv_no_head.

  STATICS : lv_no_head TYPE c.
  SORT it_trdirt.
  DELETE ADJACENT DUPLICATES FROM it_trdirt COMPARING ALL FIELDS.

    LV_FILE = 'TRDIRT.ACTT'.
   if pv_no_head IS INITIAL.
      ls_table = 'NAME'.
      DESCRIBE FIELD WA_TRDIRT-NAME
      TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
      CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
      CONCATENATE ls_table '|^|' 'SPRSL' into ls_table.
      DESCRIBE FIELD WA_TRDIRT-SPRSL
      TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
      CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
      CONCATENATE ls_table '|^|' 'TEXT' into ls_table.
      DESCRIBE FIELD WA_TRDIRT-TEXT
      TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
      CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
   ENDIF.
lv_trdirt = lv_trdirt + LINES( it_trdirt ) .
  IF lv_trdirt GT 0.
perform conv_table_to_text tables it_TRDIRT
using lv_file
 ls_table .
FREE IT_TRDIRT .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDFORM.            "Sub_Download_TRDIRT
*&---------------------------------------------------------------------*
*& Form SUB_DOWNLOAD_TRDIR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*      -->P_LV_NO_HEAD  text
*&---------------------------------------------------------------------*
FORM SUB_DOWNLOAD_TRDIR  USING    pv_no_head.
  lv_file = 'TRDIR.ACTT'.
  IF pv_no_head IS INITIAL.
      LS_TABLE = 'NAME'.
  DESCRIBE FIELD WA_TRDIR-NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SECU' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-SECU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBC' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-SUBC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CNAM' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-CNAM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CDAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-CDAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UNAM' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-UNAM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UDAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-UDAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  ENDIF.
  lv_TRDIR = lv_TRDIR + LINES( it_TRDIR ) .
  IF lv_TRDIR GT 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TRDIR
    USING LV_FILE
    LS_TABLE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDFORM.                          "SUB_DOWNLOAD_TRDIR
*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_ANLA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_ANLA .
  STATICS : lv_no_head TYPE c.
lv_file = 'ANLA.ACTT'.
if lv_no_head IS INITIAL.

    LV_NO_HEAD = 'X'.
  ls_table = 'MANDT'.
DESCRIBE FIELD WA_ANLA-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUKRS' into ls_table.
DESCRIBE FIELD WA_ANLA-BUKRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ANLN1' into ls_table.
DESCRIBE FIELD WA_ANLA-ANLN1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ANLN2' into ls_table.
DESCRIBE FIELD WA_ANLA-ANLN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ANLKL' into ls_table.
DESCRIBE FIELD WA_ANLA-ANLKL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERNAM' into ls_table.
DESCRIBE FIELD WA_ANLA-ERNAM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ERDAT' into ls_table.
DESCRIBE FIELD WA_ANLA-ERDAT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AENAM' into ls_table.
DESCRIBE FIELD WA_ANLA-AENAM
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AEDAT' into ls_table.
DESCRIBE FIELD WA_ANLA-AEDAT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'KTOGR' into ls_table.
DESCRIBE FIELD WA_ANLA-KTOGR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ZUGDT' into ls_table.
DESCRIBE FIELD WA_ANLA-ZUGDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AKTIV' into ls_table.
DESCRIBE FIELD WA_ANLA-AKTIV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ABGDT' into ls_table.
DESCRIBE FIELD WA_ANLA-ABGDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'DEAKT' into ls_table.
DESCRIBE FIELD WA_ANLA-DEAKT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXT50' into ls_table.
DESCRIBE FIELD WA_ANLA-TXT50
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'TXA50' into ls_table.
DESCRIBE FIELD WA_ANLA-TXA50
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
ENDIF.
lv_ANLA = lv_ANLA + LINES( it_ANLA ) .
  IF lv_ANLA GT 0.
perform conv_table_to_text tables it_ANLA
using lv_file
 ls_table .
FREE IT_ANLA.
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDFORM.                     " Sub_Download_ANLA

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_ANLB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_ANLB .
  STATICS : lv_no_head TYPE c.
lv_file = 'ANLB.ACTT'.
if lv_no_head IS INITIAL.

    LV_NO_HEAD = 'X'.
    ls_table = 'MANDT'.
DESCRIBE FIELD WA_ANLB-MANDT
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'BUKRS' into ls_table.
DESCRIBE FIELD WA_ANLB-BUKRS
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ANLN1' into ls_table.
DESCRIBE FIELD WA_ANLB-ANLN1
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'ANLN2' into ls_table.
DESCRIBE FIELD WA_ANLB-ANLN2
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFABE' into ls_table.
DESCRIBE FIELD WA_ANLB-AFABE
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XLOEV' into ls_table.
DESCRIBE FIELD WA_ANLB-XLOEV
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'XSPEB' into ls_table.
DESCRIBE FIELD WA_ANLB-XSPEB
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'AFASL' into ls_table.
DESCRIBE FIELD WA_ANLB-AFASL
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NDJAR' into ls_table.
DESCRIBE FIELD WA_ANLB-NDJAR
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
CONCATENATE ls_table '|^|' 'NDPER' into ls_table.
DESCRIBE FIELD WA_ANLB-NDPER
TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
ENDIF.
lv_ANLB = lv_ANLB + LINES( it_ANLB ) .
  IF lv_ANLB GT 0.
perform conv_table_to_text tables it_ANLB
using lv_file
 ls_table .
FREE it_anlb .
CLEAR lt_table .
CLEAR ls_table .
ELSE.
append ls_table TO lt_table .
PERFORM download_gui TABLES lt_table USING lv_file .
CLEAR lt_table .
CLEAR ls_table .
ENDIF.
ENDFORM.             "Sub_Download_ANLB

*&---------------------------------------------------------------------*
*&      Form  SUB_PRF_CHI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_PRF_CHI .

  DATA : lv_start_date TYPE sydatum,
         lv_end_date   TYPE sydatum,
         lv_no_days TYPE i,
         lv_index   TYPE i,
         lv_num TYPE i,
         lv_head TYPE c.
  DATA : lt_list_asci      TYPE TABLE OF ty_asci WITH HEADER LINE.
        TYPES : BEGIN OF ty_100n,
                userid     TYPE string,
                date       TYPE string,
                time       TYPE string,
                changedby  TYPE string,
                action     TYPE string,
                oldcon     TYPE string,
                oldtext    TYPE string,
                newcon     TYPE string,
                newtext    TYPE string,
                tcode      TYPE string,
                dummy2     TYPE string,
              END OF ty_100n.
      DATA : ls_100n TYPE ty_100n.

  PERFORM check_file USING 'PRF_CHI.ACTT'.

  lv_no_days = sy-datum - s_start.
  lv_num = lv_no_days / maxdays.
  lv_num = lv_num + 1.

  lv_start_date = s_start.

  DO lv_num TIMES.
    REFRESH : gt_seltab.CLEAR gs_seltab.
    REFRESH : LIST_ASCI, LIST_TAB.
    CLEAR : LIST_ASCI, LIST_TAB.
    lv_index = lv_index + 1.
    gs_seltab-low = lv_start_date.

    PERFORM fill_seltab USING 'FDATE'   'P' 'I' 'EQ' gs_seltab-low ''.

    lv_end_date = lv_start_date + maxdays.
    gs_seltab-low = lv_end_date.
    PERFORM fill_seltab USING 'TDATE'   'P' 'I' 'EQ' gs_seltab-low ''.

    lv_start_date = lv_end_date + 1.


    PERFORM fill_seltab USING 'PROF'   'P' 'I' 'EQ' 'X' ''.



    FREE MEMORY ID '%_LIST'.

    SUBMIT RSUSR100N
          WITH SELECTION-TABLE gt_seltab
          AND RETURN EXPORTING LIST TO MEMORY.

    CALL FUNCTION 'LIST_FROM_MEMORY'
      TABLES
        listobject = list_tab
      EXCEPTIONS
        not_found  = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
    ENDIF.

    CALL FUNCTION 'LIST_TO_ASCI'
      TABLES
        listasci           = list_asci
        listobject         = list_tab
      EXCEPTIONS
        empty_list         = 1
        list_index_invalid = 2
        OTHERS             = 3.
    IF sy-subrc <> 0.
    ENDIF.


    DESCRIBE TABLE list_asci LINES lv_lines.
    IF lv_lines GT 0.
*   Begin of Code for Data Extraction of PRF_CHI logs language issue - PABHARAT
      READ TABLE list_asci INDEX 3 .
      IF sy-subrc = 0 .
        IF       ( list_asci-line CS sy-sysid AND
              list_asci-line CS sy-mandt AND
              list_asci-line CS sy-uname ) or ( list_asci-line CS sy-sysid AND
              list_asci-line CS sy-mandt ) or ( list_asci-line CS sy-sysid ).

          lv_identifier = 'X'.
        ENDIF.

      ENDIF.
*  End of Code for Data Extraction of PRF_CHI logs language issue- PABHARAT

      DELETE list_asci INDEX lv_lines  .  "Delete last line contains blank line and no data.
*    lv_lines = lv_lines - 1 .
*    DELETE list_asci INDEX lv_lines  .  "Delete last line contains horizontal line and no data.
      DELETE list_asci INDEX 4 .          "Delete first 4 lines, which contain the header and horizontal lines.
      DELETE list_asci INDEX 3 .          "Delete first 4 lines, which contain the header and horizontal lines.
      DELETE list_asci INDEX 2 .          "Delete first 4 lines, which contain the header and horizontal lines.
      DELETE list_asci INDEX 1 .          "Delete first 4 lines, which contain the header and horizontal lines.

      READ TABLE list_asci INDEX 1 .

      IF lv_identifier = 'X' .

        IF lv_lines GT 9 .
          DO 9 TIMES.
            DELETE list_asci INDEX 1 .
          ENDDO.
ENDIF.
*
      ENDIF.
      CLEAR lv_identifier .

    ENDIF.
    IF list_asci[] IS NOT INITIAL.
    APPEND LINES OF list_asci TO lt_list_asci.
    ENDIF.
    REFRESH: list_asci.CLEAR list_asci.
    DESCRIBE TABLE lt_list_asci LINES lv_lines.
    IF lv_lines GT maxsize OR lv_index EQ lv_num.
      CLEAR ls_table.
      IF lv_head IS INITIAL.

        CONCATENATE ls_table 'UserId [C(00030)]|^|Date [D(00016)]|^|Time [T(00012)]|^|' INTO ls_table .
        CONCATENATE ls_table 'ChangedBy [C(00024)]|^|Action [C(00100)]|^|OldContentsOfChangedField' INTO ls_table.
*        CONCATENATE ls_table '[C(00150)]|^|OldText [C(00150)]|^|NewContentsOfChangedField' INTO ls_table SEPARATED BY space.
*        CONCATENATE ls_table '[C(00150)]|^|NewText [C(00150)]|^|TCode [C(00030)]' INTO ls_table SEPARATED BY space.
        CONCATENATE ls_table '[C(00150)]|^|NewContentsOfChangedField' INTO ls_table SEPARATED BY space.
        CONCATENATE ls_table '[C(00150)]|^|TCode [C(00030)]' INTO ls_table SEPARATED BY space.

        APPEND ls_table TO lt_table .
        CLEAR ls_table. lv_head = 'X'.
      ENDIF.

* Build the data with the needed delimiter .
      IF lv_lines GT 0 .
        LOOP AT lt_list_asci INTO list_asci.
          IF list_asci-line CO '- '.
            CONTINUE .
          ENDIF.
          IF list_asci-line cs 'List does not contain any data'.
            CONTINUE.
          ENDIF.
          IF list_asci-line cs 'no Data'.
            CONTINUE.
          ENDIF.
          DATA : LV_CN TYPE I.
          FIND ALL OCCURRENCES OF '|' IN list_asci-line
                                 MATCH COUNT LV_CN.
          IF LV_CN EQ 2.
            CONTINUE.
          ENDIF.
          SHIFT list_asci LEFT .
*    CONDENSE list_asci .
          CLEAR lv_lines .
          lv_lines  = STRLEN( list_asci-line ) - 1.
          CLEAR list_asci-line+lv_lines(1) .
  clear ls_100n.
          SPLIT list_asci-line AT '|' INTO ls_100n-userid
                                           ls_100n-date
                                           ls_100n-time
                                           ls_100n-changedby
                                           ls_100n-action
                                           ls_100n-oldcon
                                           ls_100n-oldtext
                                           ls_100n-newcon
                                           ls_100n-newtext
                                           ls_100n-tcode
                                           ls_100n-dummy2.

          CONCATENATE ls_100n-userid
                                           ls_100n-date
                                           ls_100n-time
                                           ls_100n-changedby
                                           ls_100n-action
                                           ls_100n-oldcon
                                           ls_100n-newcon
                                           ls_100n-tcode
                                           INTO ls_table SEPARATED BY '|^|'.
          APPEND ls_table TO lt_table .
          CLEAR ls_table .
        ENDLOOP.
      ENDIF.

      lv_file = 'PRF_CHI.ACTT'.
      PERFORM download_gui TABLES lt_table USING lv_file .
      CLEAR lt_table .
      REFRESH lt_table .
      CLEAR: lv_lines, lv_file .
      REFRESH : lt_list_asci,list_asci, list_tab, gt_seltab .
    ENDIF.
  ENDDO.
ENDFORM.                    " SUB_PRF_CHI
*&---------------------------------------------------------------------*
*&      Form  SUB_RSUSR100N
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_rsusr100n .
  DATA : lv_start_date TYPE sydatum,
         lv_end_date   TYPE sydatum,
         lv_no_days TYPE i,
         lv_index   TYPE i,
         lv_num TYPE i,
         lv_head TYPE c.
  DATA : lt_list_asci      TYPE TABLE OF ty_asci WITH HEADER LINE.
*   begin of changes by srini -- 03/21
      TYPES : BEGIN OF ty_100n,
                userid     TYPE string,
                date       TYPE string,
                time       TYPE string,
                changedby  TYPE string,
                action     TYPE string,
                oldcon     TYPE string,
                oldtext    TYPE string,
                newcon     TYPE string,
                newtext    TYPE string,
                tcode      TYPE string,
                dummy2     TYPE string,
              END OF ty_100n.
      DATA : ls_100n TYPE ty_100n.
* end of changes by Srini -- 03/21

  PERFORM check_file USING 'RSUSR100N.ACTT'.

  lv_no_days = sy-datum - s_start.
  lv_num = lv_no_days / maxdays.
  lv_num = lv_num + 1.

  lv_start_date = s_start.

  DO lv_num TIMES.
    REFRESH : gt_seltab.CLEAR gs_seltab.
    REFRESH : LIST_ASCI, LIST_TAB.
    CLEAR : LIST_ASCI, LIST_TAB.
    lv_index = lv_index + 1.
    gs_seltab-low = lv_start_date.

    PERFORM fill_seltab USING 'FDATE'   'P' 'I' 'EQ' gs_seltab-low ''.

    lv_end_date = lv_start_date + maxdays.
    gs_seltab-low = lv_end_date.
    PERFORM fill_seltab USING 'TDATE'   'P' 'I' 'EQ' gs_seltab-low ''.

    lv_start_date = lv_end_date + 1.

    PERFORM fill_seltab USING 'TYPE'    'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'ALOCK_S' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'ALOCK_D' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'FLOCK_S' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'FLOCK_D' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'TVAL'    'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'USER_CRT'   'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'USER_DEL'   'P' 'I' 'EQ' 'X' ''.



    FREE MEMORY ID '%_LIST'.

    SUBMIT rsusr100n
          WITH SELECTION-TABLE gt_seltab
          AND RETURN EXPORTING LIST TO MEMORY.

    CALL FUNCTION 'LIST_FROM_MEMORY'
      TABLES
        listobject = list_tab
      EXCEPTIONS
        not_found  = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
    ENDIF.

    CALL FUNCTION 'LIST_TO_ASCI'
      TABLES
        listasci           = list_asci
        listobject         = list_tab
      EXCEPTIONS
        empty_list         = 1
        list_index_invalid = 2
        OTHERS             = 3.
    IF sy-subrc <> 0.
    ENDIF.


    DESCRIBE TABLE list_asci LINES lv_lines.
    IF lv_lines GT 0.
*   Begin of Code for Data Extraction of RSUSR100N logs language issue- Madhuri KL - 6/14/2018
      READ TABLE list_asci INDEX 3 .
      IF sy-subrc = 0 .
        IF       ( list_asci-line CS sy-sysid AND
              list_asci-line CS sy-mandt AND
              list_asci-line CS sy-uname ) or ( list_asci-line CS sy-sysid AND
              list_asci-line CS sy-mandt ) or ( list_asci-line CS sy-sysid ).

          lv_identifier = 'X'.
        ENDIF.

      ENDIF.
*  End of Code for Data Extraction of RSUSR100N logs language issue- Madhuri KL - 6/14/2018

      DELETE list_asci INDEX lv_lines  .  "Delete last line contains blank line and no data.
*    lv_lines = lv_lines - 1 .
*    DELETE list_asci INDEX lv_lines  .  "Delete last line contains horizontal line and no data.
      DELETE list_asci INDEX 4 .          "Delete first 4 lines, which contain the header and horizontal lines.
      DELETE list_asci INDEX 3 .          "Delete first 4 lines, which contain the header and horizontal lines.
      DELETE list_asci INDEX 2 .          "Delete first 4 lines, which contain the header and horizontal lines.
      DELETE list_asci INDEX 1 .          "Delete first 4 lines, which contain the header and horizontal lines.

      READ TABLE list_asci INDEX 1 .
*  Begin of Code for Data Extraction of RSUSR100N logs language issue- Madhuri KL - 6/14/2018
      IF lv_identifier = 'X' .
*  End of Code for Data Extraction of RSUSR100N logs language issue- Madhuri KL - 6/14/2018
        IF lv_lines GT 16 .
          DO 16 TIMES.
            DELETE list_asci INDEX 1 .
          ENDDO.
        ENDIF.
*  Begin of Code for Data Extraction of SCU3 logs language issue- Madhuri KL - 6/14/2018
      ENDIF.
      CLEAR lv_identifier .
*  End of Code for Data Extraction of SCU3 logs language issue- Madhuri KL - 6/14/2018
    ENDIF.
    IF list_asci[] IS NOT INITIAL.
    APPEND LINES OF list_asci TO lt_list_asci.
    ENDIF.
    REFRESH: list_asci.CLEAR list_asci.
    DESCRIBE TABLE lt_list_asci LINES lv_lines.
    IF lv_lines GT maxsize OR lv_index EQ lv_num.
      CLEAR ls_table.
      IF lv_head IS INITIAL.
* Build Header Line per requirement
        CONCATENATE ls_table 'UserId [C(00030)]|^|Date [D(00016)]|^|Time [T(00012)]|^|' INTO ls_table .
        CONCATENATE ls_table 'ChangedBy [C(00024)]|^|Action [C(00100)]|^|OldContentsOfChangedField' INTO ls_table.

* BEGIN OF CHANGES BY SRINI -- 03/21
*        CONCATENATE ls_table '[C(00150)]|^|OldText [C(00150)]|^|NewContentsOfChangedField' INTO ls_table SEPARATED BY space.
*        CONCATENATE ls_table '[C(00150)]|^|NewText [C(00150)]|^|TCode [C(00030)]' INTO ls_table SEPARATED BY space.

        CONCATENATE ls_table '[C(00150)]|^|NewContentsOfChangedField' INTO ls_table SEPARATED BY space.
        CONCATENATE ls_table '[C(00150)]|^|TCode [C(00030)]' INTO ls_table SEPARATED BY space.
* END OF CHANGES BY SRINI -- 03/21
        APPEND ls_table TO lt_table .
        CLEAR ls_table. lv_head = 'X'.
      ENDIF.
* Build the data with the needed delimiter .
      IF lv_lines GT 0 .
        LOOP AT lt_list_asci INTO list_asci.
          IF list_asci-line CO '- '.
            CONTINUE .
          ENDIF.
          IF list_asci-line cs 'List does not contain any data'.
            CONTINUE.
          ENDIF.
          IF list_asci-line cs 'no Data'.
            CONTINUE.
          ENDIF.
          DATA : LV_CN TYPE I.
          FIND ALL OCCURRENCES OF '|' IN list_asci-line
                                 MATCH COUNT LV_CN.
          IF LV_CN EQ 2.
            CONTINUE.
          ENDIF.
          SHIFT list_asci LEFT .
*    CONDENSE list_asci .
          CLEAR lv_lines .
          lv_lines  = STRLEN( list_asci-line ) - 1.
          CLEAR list_asci-line+lv_lines(1) .
clear ls_100n.
          SPLIT list_asci-line AT '|' INTO ls_100n-userid
                                           ls_100n-date
                                           ls_100n-time
                                           ls_100n-changedby
                                           ls_100n-action
                                           ls_100n-oldcon
                                           ls_100n-oldtext
                                           ls_100n-newcon
                                           ls_100n-newtext
                                           ls_100n-tcode
                                           ls_100n-dummy2.

          CONCATENATE ls_100n-userid
                                           ls_100n-date
                                           ls_100n-time
                                           ls_100n-changedby
                                           ls_100n-action
                                           ls_100n-oldcon
                                           ls_100n-newcon
                                           ls_100n-tcode
                                           INTO ls_table SEPARATED BY '|^|'.
*
*          REPLACE ALL OCCURRENCES OF '|' IN list_asci WITH '|^|' .
*          ls_table = list_asci-line .
*          ls_table = list_asci-line .
          APPEND ls_table TO lt_table .
          CLEAR ls_table .
        ENDLOOP.
      ENDIF.

      lv_file = 'RSUSR100N.ACTT'.
      PERFORM download_gui TABLES lt_table USING lv_file .
      CLEAR lt_table .
      REFRESH lt_table .
      CLEAR: lv_lines, lv_file .
      REFRESH : lt_list_asci,list_asci, list_tab, gt_seltab .
    ENDIF.
  ENDDO.
ENDFORM.                    " SUB_RSUSR100N
*&---------------------------------------------------------------------*
*&      Form  SUB_RSVTPROT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_rsvtprot .

  DATA : lv_start_date TYPE sydatum,
         lv_end_date   TYPE sydatum,
         lv_no_days TYPE i,
         lv_num TYPE i,
         lv_index TYPE i,
         lv_head_a TYPE c,lv_head_b TYPE c,lv_head_c TYPE C ,lv_head_d TYPE c.
  DATA : lt_list_asci      TYPE TABLE OF ty_asci WITH HEADER LINE.

  PERFORM check_file USING 'T000_LOGS.ACTT'.
  PERFORM check_file USING 'PAHI_LOGS.ACTT'.
  PERFORM check_file USING 'DEVACCESS_LOGS.ACTT'.
  PERFORM check_file USING 'T001B_LOGS.ACTT'.
** sv
** read the cvers table for EA_APPL
  DATA : lv_unit TYPE dlvunit.                              "sv 2020
  DATA : lv_cv TYPE c.                                      "sv 2020
  SELECT SINGLE component INTO lv_unit
         FROM cvers WHERE component = 'EA-APPL'
         AND release LE '603'.
  IF sy-subrc IS NOT INITIAL.                               "sv 2020
    lv_cv = 'X'.                                            "sv 2020
  ENDIF.                                                    "sv 2020
** sv

  FREE MEMORY ID '%_LIST'.

  LOOP AT s_tbname.
****** Begin of code To Check and download the log of a table only when it is enabled for logging******
  select single tabname into lv_file_temp from  dd09l where tabname = s_tbname-low and  Protokoll = 'X' .
  if sy-subrc = 0 .
******* End of code to check and download the log of a table only when it is enabled for logging*******

    CLEAR : lv_no_days,lv_num,lv_start_date,lv_end_date.
    lv_no_days = sy-datum - s_start.
    lv_num = lv_no_days / maxdays.
    lv_num = lv_num + 1.

    lv_start_date = s_start.
    CLEAR lv_index.
    DO lv_num TIMES.
      lv_index = lv_index + 1.
      lv_end_date = lv_start_date + maxdays.


      SUBMIT rsvtprot AND RETURN
           EXPORTING LIST TO MEMORY  WITH cusobj   EQ s_tbname-low "Table Name
                                     WITH dbeg     EQ lv_start_date "s_start      "from date
*                                 WITH tbeg     EQ s_time-low  " start time = default 00:00:00
                                     WITH dend     EQ lv_end_date  " End date = default current date
*                                 WITH tend     EQ s_time-high  " End time = default current system time
                                     WITH objfirst EQ ' '
                                     WITH tabfirst EQ 'X'
                                     WITH alv_grid EQ 'X'.
      REFRESH : list_asci, list_tab .

      CALL FUNCTION 'LIST_FROM_MEMORY'
        TABLES
          listobject = list_tab
        EXCEPTIONS
          not_found  = 1
          OTHERS     = 2.

      CALL FUNCTION 'LIST_TO_ASCI'
        TABLES
          listasci           = list_asci
          listobject         = list_tab
        EXCEPTIONS
          empty_list         = 1
          list_index_invalid = 2
          OTHERS             = 3.

      DESCRIBE TABLE list_asci LINES lv_lines.
      IF lv_lines GT 0 .
        DELETE list_asci INDEX lv_lines.
        lv_lines = lv_lines - 1 .
        DELETE list_asci INDEX lv_lines.

        DELETE list_asci INDEX 4 .
        DELETE list_asci INDEX 3 .
        DELETE list_asci INDEX 2 .
        DELETE list_asci INDEX 1 .
      ENDIF.

      APPEND LINES OF list_asci TO lt_list_asci.
      DESCRIBE TABLE lt_list_asci LINES lv_lines.
      REFRESH : list_asci. CLEAR list_asci.
      IF lv_lines GT maxsize OR lv_index = lv_num.
*        IF lv_head IS INITIAL.
        CASE s_tbname-low.
          WHEN 'T000'.
            IF lv_head_a IS INITIAL.
              CONCATENATE list_asci-line '|DateOfChange [D(00016)]|ChangedBy [C(00015)]|TimeOfChange [T(00012)]|Tcode [C(00010)]|' INTO list_asci-line .
              CONCATENATE list_asci-line 'Program [C(00030)]|TypeOfChange [C(00010)]|Client [C(00010)]|Name [C(00030)]|' INTO list_asci-line .
              CONCATENATE list_asci-line 'City [C(00030)]|Crcy [C(00030)]|CharacterFieldLength [C(00015)]|Role [C(00005)]|' INTO list_asci-line .
              CONCATENATE list_asci-line 'CrossSys [C(00005)]|NoCrsCli [C(00005)]|CopyLock [C(00005)]|NoCascade [C(00030)]|' INTO list_asci-line .
              CONCATENATE list_asci-line 'LockMethod [C(00010)]|SBCSets [C(00030)]|CATT [C(00005)]|TempLock [C(00010)]|' INTO list_asci-line.
              CONCATENATE list_asci-line 'Author [C(00030)]|ChangedDate [D(00016)]|LogicalSystem [C(00025)]|' INTO list_asci-line.
              lv_head_a = 'X'.
            ENDIF.

            lv_file = 'T000_LOGS.ACTT' .

          WHEN 'PAHI'.
            IF lv_head_b IS INITIAL.
              CONCATENATE list_asci-line '|DateOfChange [D(00016)]|ChangedBy [C(00015)]|TimeOfChange [T(00012)]|Tcode [C(00010)]|Program [C(00150)]|' INTO list_asci-line .
              CONCATENATE list_asci-line  'Type [C(00010)]|ParameterType [C(00010)]|Hostname [C(00150)]|SysID [C(00005)]|' INTO list_asci-line .
              CONCATENATE list_asci-line  'CurrentDate [D(00016)]|Parameter [C(00150)]|State [C(00055)]|ParamaterValue [C(00140)]|' INTO list_asci-line .
              lv_head_b = 'X'.
            ENDIF.
            lv_file = 'PAHI_LOGS.ACTT' .

          WHEN 'DEVACCESS'.
            IF lv_head_c IS INITIAL.
              CONCATENATE list_asci-line '|DateOfChange [D(00016)]|ChangedBy [C(00015)]|TimeOfChange [T(00012)]|Tcode [C(00010)]|' INTO list_asci-line .
              CONCATENATE list_asci-line  'Program [C(00030)]|TypeOfChange [C(00010)]|UserId [C(00030)]|Char20 [C(00015)]|' INTO list_asci-line .
              lv_head_c = 'X'.
            ENDIF.
            lv_file = 'DEVACCESS_LOGS.ACTT' .

          WHEN 'T001B'.
            IF lv_head_d IS INITIAL.
             CONCATENATE list_asci-line '|DateOfChange [D(00016)]|ChangedBy [C(00015)]|TimeOfChange [T(00012)]|Tcode [C(00010)]|Program [C(00150)]|' INTO list_asci-line .
             CONCATENATE list_asci-line  'TypeOfChange [C(00010)]|RecordType [C(00004)]|PostingPeriodVariant [C(00010)]|AccountType [C(00004)]|ToAccount [C(00050)]|' INTO list_asci-line .
             CONCATENATE list_asci-line  'FromAccount [C(00050)]|FiscalYearforFirstPeriodAllowedinInterval1 [C(00005)]|FirstPostingPeriodAllowedinInterval1 [C(00005)]|' INTO list_asci-line .
             CONCATENATE list_asci-line  'FiscalYearforLastPeriodAllowedPeriod1 [C(00005)]|LastPostingPeriodAllowedinInterval1 [C(00005)]|' INTO list_asci-line .
             CONCATENATE list_asci-line  'FiscalYearforFirstPeriodAllowedPeriod2 [C(00005)]|FirstPostingPeriodAllowedinInterval2 [C(00005)]|' INTO list_asci-line.
             CONCATENATE list_asci-line  'FiscalYearforLastPeriodAllowedPeriod2 [C(00005)]|LastPostingPeriodAllowedinInterval2 [C(00005)]|' INTO list_asci-line.
             CONCATENATE list_asci-line  'AuthorizationGroup [C(00010)]|' INTO list_asci-line.
             IF lv_cv IS NOT INITIAL.                    "sv 2020
                  CONCATENATE list_asci-line  'FiscalYearofFirstPeriodPermittedInterval3 [C(00005)]|' INTO list_asci-line.
                  CONCATENATE list_asci-line  'FirstPostingPeriodPermittedInterval3 [C(00005)]|FiscalYearofLastPeriodPermittedInterval3 [C(00005)]|' INTO list_asci-line.
                  CONCATENATE list_asci-line  'LastPostingPeriodAllowedinInterval3 [C(00005)]|' INTO list_asci-line.
                ENDIF.
              lv_head_c = 'X'.
            ENDIF.
        lv_file = 'T001B_LOGS.ACTT' .

        ENDCASE.
        IF list_asci IS NOT INITIAL .
          INSERT list_asci INTO lt_list_asci INDEX 1.
        ENDIF.
*        ENDIF.

        LOOP AT lt_list_asci INTO list_asci.
          SHIFT list_asci LEFT .
          CLEAR lv_lines .
          lv_lines  = STRLEN( list_asci-line ) - 1.
          CLEAR list_asci-line+lv_lines(1) .
          REPLACE ALL OCCURRENCES OF '|' IN list_asci WITH '|^|' .
          ls_table = list_asci-line.
          APPEND ls_table TO lt_table.
          CLEAR ls_table.
        ENDLOOP.

        PERFORM download_gui TABLES lt_table USING lv_file .
        CLEAR lt_table .
        REFRESH lt_table .
        CLEAR: lv_lines, lv_file .
        REFRESH : list_asci,lt_list_asci, list_tab, gt_seltab .
      ENDIF.

      lv_start_date = lv_end_date + 1.
    ENDDO.
ENDIF.
  ENDLOOP.

ENDFORM.                    " SUB_RSVTPROT
*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_SE06
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_download_se06 .
  STATICS : lv_head TYPE c.
  TYPES: BEGIN OF t_output,
           time   TYPE datum,
            dt_time TYPE char6,
           user   TYPE string,
           detail TYPE string,
         END OF t_output.

  DATA: lt_lines          TYPE STANDARD TABLE OF trlog,
        ls_lines          TYPE trlog,
        lt_lines1         TYPE STANDARD TABLE OF trlog,
        lv_tstamp         TYPE sy-datum,
        lv_timestamp_flag TYPE c,
        lv_stop_index     TYPE i,
        lv_start_index    TYPE i,
        lv_date           TYPE sy-datum,

        lt_output         TYPE STANDARD TABLE OF t_output,
        ls_output         TYPE t_output,

        lv_str1           TYPE string,
        lv_str2           TYPE string,
        lv_str3           TYPE string,
        lv_str4           TYPE string.

  FIELD-SYMBOLS: <fs_line> LIKE trlog.

  DATA: ls_cont       LIKE trlogr,     "transfer container
        ls_line       LIKE trlog,
        lt_ddprs      LIKE ddprs        OCCURS 0.
  FIELD-SYMBOLS: <ls_ddprs> LIKE ddprs.

  LOOP AT it_ddprs ASSIGNING <ls_ddprs>.
    ls_cont = <ls_ddprs>-line.

    PERFORM convert_line(saplslog)   USING  ls_cont
                                            sy-langu
                                    CHANGING ls_line.
    APPEND ls_line TO lt_lines.
  ENDLOOP.

  lt_lines1[] = lt_lines[].
  lv_tstamp = s_start.
  LOOP AT lt_lines INTO ls_lines WHERE number = '174'.

    lv_stop_index = sy-tabix - 1.
    SPLIT ls_lines-line AT ':' INTO lv_str1 lv_str2.
    SPLIT lv_str2 AT '(' INTO lv_str2 lv_str3.
    CONDENSE lv_str2.
    ls_output-time = lv_str2+0(8).  "timestamp
    ls_output-dt_time = lv_str2+11(6).
    lv_date = lv_str2+0(8).
    IF lv_date < lv_tstamp.
      lv_start_index = lv_stop_index + 2.
      CONTINUE.
    ENDIF.
    SPLIT lv_str3 AT ')' INTO lv_str3 lv_str4.
    CONDENSE lv_str3.
    ls_output-user = lv_str3. "changed by user - full string
    LOOP AT lt_lines1 INTO ls_lines FROM lv_start_index TO lv_stop_index.
      ls_output-detail = ls_lines-line.
      APPEND ls_output TO lt_output.
    ENDLOOP.

    IF sy-subrc IS INITIAL.
      lv_start_index = lv_stop_index + 2.
    ENDIF.
  ENDLOOP.

  CLEAR ls_table.

  lv_file = 'SE06.ACTT'.
  IF lv_head IS INITIAL.
    CONCATENATE 'Date' ' [D(00016)]|^|'
                'Time' ' [D(00016)]|^|'
                'Changed_By' ' [C(00075)]|^|'
                'Detail' ' [C(99999)]' INTO ls_table.
    lv_head = 'X'.
  ENDIF.
  lv_agr_1016 = lv_agr_1016 + LINES( lt_output ) .
  IF lv_agr_1016 GT 0.
    PERFORM conv_table_to_text TABLES lt_output
    USING lv_file
    ls_table .
    FREE lt_output.
    CLEAR lt_table.
    CLEAR ls_table.
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table.
    CLEAR ls_table.
  ENDIF.
  REFRESH :it_ddprs,lt_output.
ENDFORM.
                    " SUB_DOWNLOAD_SE06

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_EDIDS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_EDIDS.
STATICS : lv_no_head TYPE c.

  lv_file = 'EDIDS.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

    ls_table = 'MANDT'.
    DESCRIBE FIELD wa_EDIDS-MANDT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'DOCNUM' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-DOCNUM
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'LOGDAT' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-LOGDAT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'LOGTIM' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-LOGTIM
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'COUNTR' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-COUNTR
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CREDAT' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-CREDAT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CRETIM' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-CRETIM
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'STATUS' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-STATUS
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UNAME' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-UNAME
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'REPID' INTO ls_table.
    DESCRIBE FIELD wa_EDIDS-REPID
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
ENDIF.
  lv_EDIDS = lv_EDIDS + LINES( it_EDIDS ) .
  IF lv_EDIDS GT 0.
    PERFORM conv_table_to_text TABLES it_EDIDS
    USING lv_file
    ls_table .
    FREE it_EDIDS .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_EDIDC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_EDIDC.
STATICS : lv_no_head TYPE c.

  lv_file = 'EDIDC.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

ls_table = 'MANDT'.
    DESCRIBE FIELD wa_EDIDC-MANDT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'DOCNUM' INTO ls_table.
    DESCRIBE FIELD wa_EDIDC-DOCNUM
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'MESTYP' INTO ls_table.
    DESCRIBE FIELD wa_EDIDC-MESTYP
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'IDOCTP' INTO ls_table.
    DESCRIBE FIELD wa_EDIDC-IDOCTP
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  ENDIF.
  lv_EDIDC = lv_EDIDC + LINES( it_EDIDC ) .
  IF lv_EDIDC GT 0.
    PERFORM conv_table_to_text TABLES it_EDIDC
    USING lv_file
    ls_table .
    FREE it_EDIDC .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_T685
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_T685.
STATICS : lv_no_head TYPE c.

  lv_file = 'T685.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T685-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KAPPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T685-KAPPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KSCHL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T685-KSCHL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOZGF' INTO LS_TABLE.
  DESCRIBE FIELD WA_T685-KOZGF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T685 = lv_T685 + LINES( it_T685 ).
  ENDIF.
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T685
    USING LV_FILE
    LS_TABLE .
    FREE IT_T685 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_GRACFFOWNER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_GRACFFOWNER.
STATICS : lv_no_head TYPE c.

  lv_file = 'GRACFFOWNER.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

    ls_table = 'MANDT'.
    DESCRIBE FIELD wa_GRACFFOWNER-MANDT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'APP_TYPE' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFOWNER-APP_TYPE
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'FFOBJECT' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFOWNER-FFOBJECT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CONNECTOR' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFOWNER-CONNECTOR
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'OWNER' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFOWNER-OWNER
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UPDATED_BY' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFOWNER-UPDATED_BY
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UPDATED_ON' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFOWNER-UPDATED_ON
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_GRACFFOWNER = lv_GRACFFOWNER + LINES( it_GRACFFOWNER ) .
  ENDIF.
  IF lv_GRACFFOWNER GT 0.
    PERFORM conv_table_to_text TABLES it_GRACFFOWNER
    USING lv_file
    ls_table .
    FREE it_GRACFFOWNER .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_GRACFFUSER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_GRACFFUSER.
STATICS : lv_no_head TYPE c.

  lv_file = 'GRACFFUSER.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

    ls_table = 'MANDT'.
    DESCRIBE FIELD wa_GRACFFUSER-MANDT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'APP_TYPE' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-APP_TYPE
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'FFOBJECT' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-FFOBJECT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CONNECTOR' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-CONNECTOR
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'FF_USER' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-FF_USER
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'OWNER' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-OWNER
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'LOGGED' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-LOGGED
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CRITICALITY' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-CRITICALITY
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'VALID_FROM' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-VALID_FROM
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'VALID_TO' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-VALID_TO
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UPDATED_BY' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-UPDATED_BY
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UPDATED_ON' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFUSER-UPDATED_ON
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  lv_GRACFFUSER = lv_GRACFFUSER + LINES( it_GRACFFUSER ) .
  ENDIF.
  IF lv_GRACFFUSER GT 0.
    PERFORM conv_table_to_text TABLES it_GRACFFUSER
    USING lv_file
    ls_table .
    FREE it_GRACFFUSER .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_GRACFFCTRL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_GRACFFCTRL.
STATICS : lv_no_head TYPE c.

  lv_file = 'GRACFFCTRL.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

    ls_table = 'MANDT'.
    DESCRIBE FIELD wa_GRACFFCTRL-MANDT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'APP_TYPE' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-APP_TYPE
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'FFOBJECT' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-FFOBJECT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CONNECTOR' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-CONNECTOR
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'CNTRL_ID' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-CNTRL_ID
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'DELIVERY_OPT' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-DELIVERY_OPT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'PRIME_CNTRL' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-PRIME_CNTRL
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UPDATED_BY' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-UPDATED_BY
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'UPDATED_ON' INTO ls_table.
    DESCRIBE FIELD wa_GRACFFCTRL-UPDATED_ON
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
  ENDIF.
  lv_GRACFFCTRL = lv_GRACFFCTRL + LINES( it_GRACFFCTRL ) .
  IF lv_GRACFFCTRL GT 0.
    PERFORM conv_table_to_text TABLES it_GRACFFCTRL
    USING lv_file
    ls_table .
    FREE it_GRACFFCTRL .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_GRACCONFIGSET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM SUB_DOWNLOAD_GRACCONFIGSET.
STATICS : lv_no_head TYPE c.

  lv_file = 'GRACCONFIGSET.ACTT'.
  IF lv_no_head IS INITIAL.

    lv_no_head = 'X'.

    ls_table = 'MANDT'.
    DESCRIBE FIELD wa_GRACCONFIGSET-MANDT
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'PARAMID' INTO ls_table.
    DESCRIBE FIELD wa_GRACCONFIGSET-PARAMID
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'SEQUENCE' INTO ls_table.
    DESCRIBE FIELD wa_GRACCONFIGSET-SEQUENCE
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'PRIORITY' INTO ls_table.
    DESCRIBE FIELD wa_GRACCONFIGSET-PRIORITY
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    CONCATENATE ls_table '|^|' 'PARAM_VALUE' INTO ls_table.
    DESCRIBE FIELD wa_GRACCONFIGSET-PARAM_VALUE
    TYPE lv_type LENGTH lv_len IN BYTE MODE.
    CONCATENATE ls_table ' [' lv_type '(' lv_len ')]' INTO ls_table.
    lv_GRACCONFIGSET = lv_GRACCONFIGSET + LINES( it_GRACCONFIGSET ) .
    ENDIF.
  IF lv_GRACCONFIGSET GT 0.
    PERFORM conv_table_to_text TABLES it_GRACCONFIGSET
    USING lv_file
    ls_table .
    FREE it_GRACCONFIGSET .
    CLEAR lt_table .
    CLEAR ls_table .
  ELSE.
    APPEND ls_table TO lt_table .
    PERFORM download_gui TABLES lt_table USING lv_file .
    CLEAR lt_table .
    CLEAR ls_table .
  ENDIF.
ENDFORM.

*** SV 02102020 -- SM21 EXTRACTION LOGIC
*&---------------------------------------------------------------------*
*&      Form  EXTRACT_SM20
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM extract_sm20 .

  DATA : lv_start_date TYPE sydatum,
         lv_end_date   TYPE sydatum,
         lv_no_days TYPE i,
         lv_index   TYPE i,
         lv_num TYPE i,
         lv_head TYPE c.
  DATA : lt_list_asci      TYPE TABLE OF ty_asci WITH HEADER LINE.

  PERFORM check_file USING 'SM20.ACTT'.

  lv_no_days = s_end - s_start.
  lv_num = lv_no_days / maxdays.
  lv_num = lv_num + 1.

  lv_start_date = s_start.

  DO lv_num TIMES.
    REFRESH : gt_seltab.CLEAR gs_seltab.
    REFRESH : list_asci, list_tab.
    CLEAR : list_asci, list_tab.
    lv_index = lv_index + 1.
    gs_seltab-low = lv_start_date.

    PERFORM fill_seltab USING 'STRTDATE'   'P' 'I' 'EQ' gs_seltab-low ''.
    PERFORM fill_seltab USING 'STRTTIME'   'P' 'I' 'EQ' '000000' ''.  "SV 20200302

* begin of change -- sv 20200224
    lv_end_date = lv_start_date + maxdays.
    IF lv_end_date GT s_end.
      lv_end_date = s_end.
    ENDIF.
    IF lv_end_date LT lv_start_date.
      lv_end_date = lv_start_date.
    ENDIF.
* end of change -- sv 20200224
    gs_seltab-low = lv_end_date.
    PERFORM fill_seltab USING 'ENDDATE'   'P' 'I' 'EQ' gs_seltab-low ''.
    PERFORM fill_seltab USING 'ENDTIME'   'P' 'I' 'EQ' '235959' ''. "SV 20200302
    lv_start_date = lv_end_date + 1.


    gs_seltab-low = s_pclien.
    PERFORM fill_seltab USING 'CLIENT' 'S' 'I' 'EQ'  gs_seltab-low ''.
    PERFORM fill_seltab USING 'SERVER' 'S' 'I' 'CP'  '*' ''.
    PERFORM fill_seltab USING 'LOGON' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'RFCSTART' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'TASTART' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'REPSTART' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'MISC' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'SYSTEM' 'P' 'I' 'EQ' 'X' ''.
    PERFORM fill_seltab USING 'MEDIUM' 'P' 'I' 'EQ' '' ''.
    PERFORM fill_seltab USING 'HIGH' 'P' 'I' 'EQ' '' ''.
    PERFORM fill_seltab USING 'LOW' 'P' 'I' 'EQ' 'X' ''.

    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AU1' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AU3' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'BUY' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'BUZ' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AUX' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AUW' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AUE' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AUF' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AUI' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AUJ' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AUL' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'AU7' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'BU3' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'CUK' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'CUL' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'CUM' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'CUN' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'CUO' ''.
    PERFORM fill_seltab USING 'EVENTS' 'P' 'I' 'EQ' 'CUP' ''.



    FREE MEMORY ID '%_LIST'.

    SUBMIT rsau_select_events
          WITH SELECTION-TABLE gt_seltab
          AND RETURN EXPORTING LIST TO MEMORY.

    CALL FUNCTION 'LIST_FROM_MEMORY'
      TABLES
        listobject = list_tab
      EXCEPTIONS
        not_found  = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
    ENDIF.

    CALL FUNCTION 'LIST_TO_ASCI'
      TABLES
        listasci           = list_asci
        listobject         = list_tab
      EXCEPTIONS
        empty_list         = 1
        list_index_invalid = 2
        OTHERS             = 3.
    IF sy-subrc <> 0.
    ENDIF.

* begin of change -- sv 20200224
**    DESCRIBE TABLE list_asci LINES lv_lines.
**    IF lv_lines GT 0.
**      DELETE list_asci INDEX lv_lines  .  "Delete last line contains blank line and no data.
**      IF lv_lines GT 21 .
**        DO 21 TIMES.
**          DELETE list_asci INDEX 1 .
**        ENDDO.
**      ENDIF.
**      CLEAR lv_identifier.
**    ENDIF.
* begin of change -- sv 20200224

    IF list_asci[] IS NOT INITIAL.
      APPEND LINES OF list_asci TO lt_list_asci.
    ENDIF.
    REFRESH: list_asci.CLEAR list_asci.
    DESCRIBE TABLE lt_list_asci LINES lv_lines.
    IF lv_lines GT maxsize OR lv_index EQ lv_num.
      CLEAR ls_table.
      IF lv_head IS INITIAL.
* Build Header Line per requirement
        CONCATENATE ls_table 'Date [C(00016)]|^|Time [T(00012)]|^|Client [C(00007)]|^|' INTO ls_table .
        CONCATENATE ls_table 'UserId [C(00030)]|^|Tcode [C(00030)]|^|Program' INTO ls_table .
        CONCATENATE ls_table '[C(00080)]|^|AuditLogMessageText [C(00150)]'  INTO ls_table SEPARATED BY space.

        APPEND ls_table TO lt_table .
        CLEAR ls_table. lv_head = 'X'.
      ENDIF.

* Build the data with the needed delimiter .
      IF lv_lines GT 0 .
        LOOP AT lt_list_asci INTO list_asci.
          IF list_asci-line CO '- '.
            CONTINUE .
          ENDIF.
          IF list_asci-line CS 'List does not contain any data'.
            CONTINUE.
          ENDIF.
          IF list_asci-line CS 'no Data'.
            CONTINUE.
          ENDIF.
          DATA : lv_cn TYPE i.
          FIND ALL OCCURRENCES OF '|' IN list_asci-line
                                 MATCH COUNT lv_cn.
          IF lv_cn EQ 2.
            CONTINUE.
          ENDIF.
* begin of change -- sv 20200224
          IF lv_cn IS INITIAL.
            CONTINUE.
          ENDIF.
* begin of change -- sv 20200224

          DATA : algdate TYPE string,
                             algtime TYPE string,
                             algclient TYPE string,
                             alguser TYPE string,
                             algterm TYPE string,
                             algtcode TYPE string,
                             algrepna TYPE string,
                             algarea TYPE string,
                             algsubid TYPE string,
                             txsubclsid TYPE string,
                             txseverity TYPE string,
                             algshortsev TYPE string,
                             algtext TYPE string,
                             rest TYPE string,rest1 TYPE string.


          SPLIT list_asci AT '|' INTO rest algdate
                             algtime
                             algclient
                             alguser
                             algterm
                             algtcode
                             algrepna
                             algtext rest1.

          IF STRLEN( algdate ) EQ 10.
            CONCATENATE algdate
                               algtime
                               algclient
                               alguser
                               algtcode
                               algrepna
                               algtext INTO ls_table SEPARATED BY '|^|' .
            APPEND ls_table TO lt_table .
          ENDIF.
          CLEAR ls_table .
        ENDLOOP.
      ENDIF.

      lv_file = 'SM20.ACTT'.
      PERFORM download_gui TABLES lt_table USING lv_file .
      CLEAR lt_table .
      REFRESH lt_table .
      CLEAR: lv_lines, lv_file .
      REFRESH : lt_list_asci,list_asci, list_tab, gt_seltab .
    ENDIF.
  ENDDO.

ENDFORM.                    " EXTRACT_SM20

*** SV 02012020 -- SM21 EXTRACTION LOGIC
*&---------------------------------------------------------------------*
*&      Form  SUB_DOWNLOAD_ACCT_CONFIG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_download_acct_config.

  CLEAR lv_file.
    lv_file = 'ACTT_config_settings.ACTT'.
  CONCATENATE 'SettingName VARCHAR(100)'
  '|^|' 'SettingValue NVARCHAR(1000)' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Extract Date' '|^|' sy-datum INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'SAP System ID' '|^|' sy-sysid INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'SAP Server Name' '|^|' sy-host INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Database Version' '|^|' 'SAP' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Client Selected By User' '|^|' s_pclien INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Extract Script Version' '|^|' '17.0' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Extract Version' '|^|' 'Both' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  DATA lv_stext TYPE text40 .
  SELECT SINGLE stext FROM cvers_txt INTO lv_stext WHERE langu = sy-langu.
  CONCATENATE 'SAP ERP Version' '|^|' lv_stext INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Number tables extracted' '|^|' table_count INTO ls_table.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Output path' '|^|' p_file INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Processing' '|^|' INTO ls_table .
  IF rb_fore = 'X' .
    CONCATENATE ls_table 'Foreground' INTO ls_table .
  ELSE.
    CONCATENATE ls_table 'Background' INTO ls_table .
  ENDIF.
  APPEND ls_table TO lt_table .
  CLEAR ls_table.
  CONCATENATE 'Exclude Profiles' '|^|' INTO ls_table .
  IF ck_prof = 'X' .
    CONCATENATE ls_table 'Yes' INTO ls_table .
  ELSE.
    CONCATENATE ls_table 'No' INTO ls_table .
  ENDIF.
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
    DATA : lv_exist TYPE c.
    PERFORM check_file_exists USING 'SM20.ACTT'
                            CHANGING lv_exist.
  IF lv_exist IS NOT INITIAL
            OR ck_sm2 IS NOT INITIAL.
    CONCATENATE 'SM20' '|^|'
    'X' '|^|'
    'SM20' '|^|'
    '' '|^|'
    '' '|^|'
    '' INTO ls_table .
      APPEND ls_table TO lt_table .
  CLEAR ls_table .
      CONCATENATE 'SM20 Change Log Start Date' '|^|'
 s_start '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
*#ACTTSAP12.0 Release 12.0 Changes End*
  CONCATENATE 'SM20 Change Log End Date' '|^|'
 s_end '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  ELSE.
    CONCATENATE 'SM20' '|^|'
    ' ' '|^|'
    'SM20' '|^|'
    '' '|^|'
    '' '|^|'
    '' INTO ls_table .
      APPEND ls_table TO lt_table .
  CLEAR ls_table .
    CONCATENATE 'SM20 Change Log Start Date' '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
*#ACTTSAP12.0 Release 12.0 Changes End*
  CONCATENATE 'SM20 Change Log End Date' '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO ls_table .
  APPEND ls_table TO lt_table .
  CLEAR ls_table .
  ENDIF.
  PERFORM download_gui TABLES lt_table USING lv_file.

ENDFORM.                    " SUB_DOWNLOAD_ACCT_CONFIG

*&---------------------------------------------------------------------*
*&      Form  check_file_exists
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PV_FILE    text
*      <--PV_EXIST   text
*----------------------------------------------------------------------*
FORM check_file_exists  USING pv_file
                        CHANGING pv_exist.
**Check if file already exists
  DATA: lv_result TYPE c,
        lv_rc     TYPE i,
        lv_cfile TYPE string,
        lv_delete TYPE c,
        lv_bgcfile TYPE rlgrap-filename.

  CONCATENATE p_file pv_file INTO lv_cfile.

  IF rb_fore = 'X'.
    CALL METHOD cl_gui_frontend_services=>file_exist
      EXPORTING
        file                 = lv_cfile
      RECEIVING
        result               = lv_result
      EXCEPTIONS
        cntl_error           = 1
        error_no_gui         = 2
        wrong_parameter      = 3
        not_supported_by_gui = 4
        OTHERS               = 5.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF lv_result = abap_true.
      pv_exist = 'X'.
    ENDIF.

  ELSE.
    lv_bgcfile = lv_cfile.
    CLEAR lv_delete.
    OPEN DATASET lv_bgcfile FOR INPUT IN TEXT MODE ENCODING UTF-8 .
    IF sy-subrc = 0.
      lv_delete = abap_true.
    ENDIF.
    CLOSE DATASET lv_bgcfile.

    IF lv_delete = abap_true.
      pv_exist = 'X'.
    ENDIF.
  ENDIF.

ENDFORM.                    " CHECK_FILE

*** SV 02012020 -- SM21 EXTRACTION LOGIC
