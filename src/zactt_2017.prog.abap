*//====================================================================
*//Notice:
*//
*//The purpose of this "read only" script is to download data that can be analyzed as part of our audit.
*//We expect that you will follow your company’s regular change management policies and procedures prior to running the script.
*//To the extent permitted by law, regulation and our professional standards, this script is provided "as is," without any warranty,
*//and the Deloitte Network and its contractors will not be liable for any damages relating to this script or its use.
*//As used herein, "we" and "our" refers to the Deloitte Network entity that provided the script to you, and the "Deloitte Network"
*//refers to Deloitte Touche Tohmatsu Limited ("DTTL"), the member firms of DTTL, and each of their affiliates and related entities.
*//
*//© 2017.  For more information, contact Deloitte Touche Tohmatsu Limited.  All rights reserved.
*//
*//====================================================================
REPORT Z_20170414_152450 .
DATA : LV_TIME1 TYPE SY-UZEIT.
DATA : LV_TIME2 TYPE SY-UZEIT.
DATA : LV_TYPE TYPE C.
DATA : LV_LEN TYPE NUMC5.
DATA : TABLE_COUNT TYPE NUMC5.
TABLE_COUNT = 0.
TYPES: BEGIN OF TS_AGR_1016,
MANDT TYPE AGR_1016-MANDT,
AGR_NAME TYPE AGR_1016-AGR_NAME,
PROFILE TYPE AGR_1016-PROFILE,
GENERATED TYPE AGR_1016-GENERATED,
PSTATE TYPE AGR_1016-PSTATE,
END OF TS_AGR_1016.
DATA: IT_AGR_1016 TYPE STANDARD TABLE OF TS_AGR_1016 .
DATA: WA_AGR_1016 TYPE TS_AGR_1016 .
DATA:  LV_AGR_1016 TYPE STRING.
TYPES: BEGIN OF TS_AGR_1251,
MANDT TYPE AGR_1251-MANDT,
AGR_NAME TYPE AGR_1251-AGR_NAME,
COUNTER TYPE AGR_1251-COUNTER,
AUTH TYPE AGR_1251-AUTH,
OBJECT TYPE AGR_1251-OBJECT,
FIELD TYPE AGR_1251-FIELD,
LOW TYPE AGR_1251-LOW,
HIGH TYPE AGR_1251-HIGH,
MODIFIED TYPE AGR_1251-MODIFIED,
DELETED TYPE AGR_1251-DELETED,
END OF TS_AGR_1251.
DATA: IT_AGR_1251 TYPE STANDARD TABLE OF TS_AGR_1251 .
DATA: WA_AGR_1251 TYPE TS_AGR_1251 .
DATA:  LV_AGR_1251 TYPE STRING.
TYPES: BEGIN OF TS_AGR_1252,
HIGH TYPE AGR_1252-HIGH,
LOW TYPE AGR_1252-LOW,
VARBL TYPE AGR_1252-VARBL,
COUNTER TYPE AGR_1252-COUNTER,
AGR_NAME TYPE AGR_1252-AGR_NAME,
MANDT TYPE AGR_1252-MANDT,
END OF TS_AGR_1252.
DATA: IT_AGR_1252 TYPE STANDARD TABLE OF TS_AGR_1252 .
DATA: WA_AGR_1252 TYPE TS_AGR_1252 .
DATA:  LV_AGR_1252 TYPE STRING.
TYPES: BEGIN OF TS_AGR_AGRS,
MANDT TYPE AGR_AGRS-MANDT,
AGR_NAME TYPE AGR_AGRS-AGR_NAME,
CHILD_AGR TYPE AGR_AGRS-CHILD_AGR,
ATTRIBUTES TYPE AGR_AGRS-ATTRIBUTES,
END OF TS_AGR_AGRS.
DATA: IT_AGR_AGRS TYPE STANDARD TABLE OF TS_AGR_AGRS .
DATA: WA_AGR_AGRS TYPE TS_AGR_AGRS .
DATA:  LV_AGR_AGRS TYPE STRING.
TYPES: BEGIN OF TS_AGR_USERS,
MANDT TYPE AGR_USERS-MANDT,
AGR_NAME TYPE AGR_USERS-AGR_NAME,
UNAME TYPE AGR_USERS-UNAME,
FROM_DAT TYPE AGR_USERS-FROM_DAT,
TO_DAT TYPE AGR_USERS-TO_DAT,
EXCLUDE TYPE AGR_USERS-EXCLUDE,
ORG_FLAG TYPE AGR_USERS-ORG_FLAG,
COL_FLAG TYPE AGR_USERS-COL_FLAG,
END OF TS_AGR_USERS.
DATA: IT_AGR_USERS TYPE STANDARD TABLE OF TS_AGR_USERS .
DATA: WA_AGR_USERS TYPE TS_AGR_USERS .
DATA:  LV_AGR_USERS TYPE STRING.
TYPES: BEGIN OF TS_ANKA,
XUNTV TYPE ANKA-XUNTV,
XSPEA TYPE ANKA-XSPEA,
NUMKR TYPE ANKA-NUMKR,
MANDT TYPE ANKA-MANDT,
KTOGR TYPE ANKA-KTOGR,
FELEI TYPE ANKA-FELEI,
ANLKL TYPE ANKA-ANLKL,
ANEQK TYPE ANKA-ANEQK,
END OF TS_ANKA.
DATA: IT_ANKA TYPE STANDARD TABLE OF TS_ANKA .
DATA: WA_ANKA TYPE TS_ANKA .
DATA:  LV_ANKA TYPE STRING.
TYPES: BEGIN OF TS_ANKT,
ANLKL TYPE ANKT-ANLKL,
MANDT TYPE ANKT-MANDT,
SPRAS TYPE ANKT-SPRAS,
TXK50 TYPE ANKT-TXK50,
END OF TS_ANKT.
DATA: IT_ANKT TYPE STANDARD TABLE OF TS_ANKT .
DATA: WA_ANKT TYPE TS_ANKT .
DATA:  LV_ANKT TYPE STRING.
TYPES: BEGIN OF TS_CWBNTCUST,
CWBUSER TYPE CWBNTCUST-CWBUSER,
PRSTATUS TYPE CWBNTCUST-PRSTATUS,
NTSTATUS TYPE CWBNTCUST-NTSTATUS,
NUMM TYPE CWBNTCUST-NUMM,
END OF TS_CWBNTCUST.
DATA: IT_CWBNTCUST TYPE STANDARD TABLE OF TS_CWBNTCUST .
DATA: WA_CWBNTCUST TYPE TS_CWBNTCUST .
DATA:  LV_CWBNTCUST TYPE STRING.
TYPES: BEGIN OF TS_CWBNTHEAD,
NUMM TYPE CWBNTHEAD-NUMM,
INCOMPLETE TYPE CWBNTHEAD-INCOMPLETE,
END OF TS_CWBNTHEAD.
DATA: IT_CWBNTHEAD TYPE STANDARD TABLE OF TS_CWBNTHEAD .
DATA: WA_CWBNTHEAD TYPE TS_CWBNTHEAD .
DATA:  LV_CWBNTHEAD TYPE STRING.
TYPES: BEGIN OF TS_DD03L,
FIELDNAME TYPE DD03L-FIELDNAME,
ROLLNAME TYPE DD03L-ROLLNAME,
TABNAME TYPE DD03L-TABNAME,
END OF TS_DD03L.
DATA: IT_DD03L TYPE STANDARD TABLE OF TS_DD03L .
DATA: WA_DD03L TYPE TS_DD03L .
DATA:  LV_DD03L TYPE STRING.
TYPES: BEGIN OF TS_DD04L,
LOGFLAG TYPE DD04L-LOGFLAG,
ROLLNAME TYPE DD04L-ROLLNAME,
END OF TS_DD04L.
DATA: IT_DD04L TYPE STANDARD TABLE OF TS_DD04L .
DATA: WA_DD04L TYPE TS_DD04L .
DATA:  LV_DD04L TYPE STRING.
TYPES: BEGIN OF TS_DD04T,
SCRTEXT_S TYPE DD04T-SCRTEXT_S,
DDLANGUAGE TYPE DD04T-DDLANGUAGE,
ROLLNAME TYPE DD04T-ROLLNAME,
END OF TS_DD04T.
DATA: IT_DD04T TYPE STANDARD TABLE OF TS_DD04T .
DATA: WA_DD04T TYPE TS_DD04T .
DATA:  LV_DD04T TYPE STRING.
TYPES: BEGIN OF TS_DD09L,
TABNAME TYPE DD09L-TABNAME,
PROTOKOLL TYPE DD09L-PROTOKOLL,
AS4LOCAL TYPE DD09L-AS4LOCAL,
END OF TS_DD09L.
DATA: IT_DD09L TYPE STANDARD TABLE OF TS_DD09L .
DATA: WA_DD09L TYPE TS_DD09L .
DATA:  LV_DD09L TYPE STRING.
TYPES: BEGIN OF TS_DEVACCESS,
ACCESSKEY TYPE DEVACCESS-ACCESSKEY,
UNAME TYPE DEVACCESS-UNAME,
END OF TS_DEVACCESS.
DATA: IT_DEVACCESS TYPE STANDARD TABLE OF TS_DEVACCESS .
DATA: WA_DEVACCESS TYPE TS_DEVACCESS .
DATA:  LV_DEVACCESS TYPE STRING.
TYPES: BEGIN OF TS_MARV,
XRUEV TYPE MARV-XRUEV,
XRUEM TYPE MARV-XRUEM,
MANDT TYPE MARV-MANDT,
LFMON TYPE MARV-LFMON,
LFGJA TYPE MARV-LFGJA,
BUKRS TYPE MARV-BUKRS,
END OF TS_MARV.
DATA: IT_MARV TYPE STANDARD TABLE OF TS_MARV .
DATA: WA_MARV TYPE TS_MARV .
DATA:  LV_MARV TYPE STRING.
TYPES: BEGIN OF TS_NRIV,
CLIENT TYPE NRIV-CLIENT,
TOYEAR TYPE NRIV-TOYEAR,
TONUMBER TYPE NRIV-TONUMBER,
SUBOBJECT TYPE NRIV-SUBOBJECT,
OBJECT TYPE NRIV-OBJECT,
NRRANGENR TYPE NRIV-NRRANGENR,
NRLEVEL TYPE NRIV-NRLEVEL,
FROMNUMBER TYPE NRIV-FROMNUMBER,
EXTERNIND TYPE NRIV-EXTERNIND,
END OF TS_NRIV.
DATA: IT_NRIV TYPE STANDARD TABLE OF TS_NRIV .
DATA: WA_NRIV TYPE TS_NRIV .
DATA:  LV_NRIV TYPE STRING.
TYPES: BEGIN OF TS_PAHI,
SYSTEMID TYPE PAHI-SYSTEMID,
PARVALUE TYPE PAHI-PARVALUE,
PARTYPE TYPE PAHI-PARTYPE,
PARSTATE TYPE PAHI-PARSTATE,
PARNAME TYPE PAHI-PARNAME,
PARDATE TYPE PAHI-PARDATE,
HOSTNAME TYPE PAHI-HOSTNAME,
END OF TS_PAHI.
DATA: IT_PAHI TYPE STANDARD TABLE OF TS_PAHI .
DATA: WA_PAHI TYPE TS_PAHI .
DATA:  LV_PAHI TYPE STRING.
TYPES: BEGIN OF TS_SKAT,
KTOPL TYPE SKAT-KTOPL,
MANDT TYPE SKAT-MANDT,
SAKNR TYPE SKAT-SAKNR,
SPRAS TYPE SKAT-SPRAS,
TXT50 TYPE SKAT-TXT50,
END OF TS_SKAT.
DATA: IT_SKAT TYPE STANDARD TABLE OF TS_SKAT .
DATA: WA_SKAT TYPE TS_SKAT .
DATA:  LV_SKAT TYPE STRING.
TYPES: BEGIN OF TS_T000,
CCCATEGORY TYPE T000-CCCATEGORY,
CCCOPYLOCK TYPE T000-CCCOPYLOCK,
CCCORACTIV TYPE T000-CCCORACTIV,
CCNOCLIIND TYPE T000-CCNOCLIIND,
MANDT TYPE T000-MANDT,
MTEXT TYPE T000-MTEXT,
CHANGEDATE TYPE T000-CHANGEDATE,
END OF TS_T000.
DATA: IT_T000 TYPE STANDARD TABLE OF TS_T000 .
DATA: WA_T000 TYPE TS_T000 .
DATA:  LV_T000 TYPE STRING.
TYPES: BEGIN OF TS_T001,
XPROD TYPE T001-XPROD,
XNEGP TYPE T001-XNEGP,
XGSBE TYPE T001-XGSBE,
WAERS TYPE T001-WAERS,
WAABW TYPE T001-WAABW,
PERIV TYPE T001-PERIV,
ORT01 TYPE T001-ORT01,
OPVAR TYPE T001-OPVAR,
MANDT TYPE T001-MANDT,
LAND1 TYPE T001-LAND1,
KTOPL TYPE T001-KTOPL,
KKBER TYPE T001-KKBER,
BUTXT TYPE T001-BUTXT,
BUKRS TYPE T001-BUKRS,
END OF TS_T001.
DATA: IT_T001 TYPE STANDARD TABLE OF TS_T001 .
DATA: WA_T001 TYPE TS_T001 .
DATA:  LV_T001 TYPE STRING.
TYPES: BEGIN OF TS_T001B,
VKONT TYPE T001B-VKONT,
TOYE2 TYPE T001B-TOYE2,
TOYE1 TYPE T001B-TOYE1,
TOPE2 TYPE T001B-TOPE2,
TOPE1 TYPE T001B-TOPE1,
RRCTY TYPE T001B-RRCTY,
MKOAR TYPE T001B-MKOAR,
MANDT TYPE T001B-MANDT,
FRYE2 TYPE T001B-FRYE2,
FRYE1 TYPE T001B-FRYE1,
FRPE2 TYPE T001B-FRPE2,
FRPE1 TYPE T001B-FRPE1,
BUKRS TYPE T001B-BUKRS,
BKONT TYPE T001B-BKONT,
END OF TS_T001B.
DATA: IT_T001B TYPE STANDARD TABLE OF TS_T001B .
DATA: WA_T001B TYPE TS_T001B .
DATA:  LV_T001B TYPE STRING.
TYPES: BEGIN OF TS_T001R,
BUKRS TYPE T001R-BUKRS,
MANDT TYPE T001R-MANDT,
REINH TYPE T001R-REINH,
WAERS TYPE T001R-WAERS,
END OF TS_T001R.
DATA: IT_T001R TYPE STANDARD TABLE OF TS_T001R .
DATA: WA_T001R TYPE TS_T001R .
DATA:  LV_T001R TYPE STRING.
TYPES: BEGIN OF TS_T001W,
WERKS TYPE T001W-WERKS,
NAME1 TYPE T001W-NAME1,
MANDT TYPE T001W-MANDT,
END OF TS_T001W.
DATA: IT_T001W TYPE STANDARD TABLE OF TS_T001W .
DATA: WA_T001W TYPE TS_T001W .
DATA:  LV_T001W TYPE STRING.
TYPES: BEGIN OF TS_T003,
BLART TYPE T003-BLART,
BRGRU TYPE T003-BRGRU,
KOARS TYPE T003-KOARS,
MANDT TYPE T003-MANDT,
NUMKR TYPE T003-NUMKR,
STBLA TYPE T003-STBLA,
XMREF TYPE T003-XMREF,
XMTXT TYPE T003-XMTXT,
END OF TS_T003.
DATA: IT_T003 TYPE STANDARD TABLE OF TS_T003 .
DATA: WA_T003 TYPE TS_T003 .
DATA:  LV_T003 TYPE STRING.
TYPES: BEGIN OF TS_T003T,
SPRAS TYPE T003T-SPRAS,
MANDT TYPE T003T-MANDT,
LTEXT TYPE T003T-LTEXT,
BLART TYPE T003T-BLART,
END OF TS_T003T.
DATA: IT_T003T TYPE STANDARD TABLE OF TS_T003T .
DATA: WA_T003T TYPE TS_T003T .
DATA:  LV_T003T TYPE STRING.
TYPES: BEGIN OF TS_T004,
KTOPL TYPE T004-KTOPL,
MANDT TYPE T004-MANDT,
END OF TS_T004.
DATA: IT_T004 TYPE STANDARD TABLE OF TS_T004 .
DATA: WA_T004 TYPE TS_T004 .
DATA:  LV_T004 TYPE STRING.
TYPES: BEGIN OF TS_T004T,
KTOPL TYPE T004T-KTOPL,
KTPLT TYPE T004T-KTPLT,
MANDT TYPE T004T-MANDT,
SPRAS TYPE T004T-SPRAS,
END OF TS_T004T.
DATA: IT_T004T TYPE STANDARD TABLE OF TS_T004T .
DATA: WA_T004T TYPE TS_T004T .
DATA:  LV_T004T TYPE STRING.
TYPES: BEGIN OF TS_T009,
XKALE TYPE T009-XKALE,
XJABH TYPE T009-XJABH,
PERIV TYPE T009-PERIV,
MANDT TYPE T009-MANDT,
ANZSP TYPE T009-ANZSP,
ANZBP TYPE T009-ANZBP,
END OF TS_T009.
DATA: IT_T009 TYPE STANDARD TABLE OF TS_T009 .
DATA: WA_T009 TYPE TS_T009 .
DATA:  LV_T009 TYPE STRING.
TYPES: BEGIN OF TS_T009T,
LTEXT TYPE T009T-LTEXT,
MANDT TYPE T009T-MANDT,
PERIV TYPE T009T-PERIV,
SPRAS TYPE T009T-SPRAS,
END OF TS_T009T.
DATA: IT_T009T TYPE STANDARD TABLE OF TS_T009T .
DATA: WA_T009T TYPE TS_T009T .
DATA:  LV_T009T TYPE STRING.
TYPES: BEGIN OF TS_T030,
MANDT TYPE T030-MANDT,
KTOSL TYPE T030-KTOSL,
KTOPL TYPE T030-KTOPL,
KONTS TYPE T030-KONTS,
KONTH TYPE T030-KONTH,
KOMOK TYPE T030-KOMOK,
BWMOD TYPE T030-BWMOD,
BKLAS TYPE T030-BKLAS,
END OF TS_T030.
DATA: IT_T030 TYPE STANDARD TABLE OF TS_T030 .
DATA: WA_T030 TYPE TS_T030 .
DATA:  LV_T030 TYPE STRING.
TYPES: BEGIN OF TS_T030B,
BSCHH TYPE T030B-BSCHH,
BSCHS TYPE T030B-BSCHS,
KTOSL TYPE T030B-KTOSL,
MANDT TYPE T030B-MANDT,
UMSKZ TYPE T030B-UMSKZ,
END OF TS_T030B.
DATA: IT_T030B TYPE STANDARD TABLE OF TS_T030B .
DATA: WA_T030B TYPE TS_T030B .
DATA:  LV_T030B TYPE STRING.
TYPES: BEGIN OF TS_T030H,
WAERS TYPE T030H-WAERS,
MANDT TYPE T030H-MANDT,
LSTRV TYPE T030H-LSTRV,
LSTRA TYPE T030H-LSTRA,
LSREA TYPE T030H-LSREA,
LSBEW TYPE T030H-LSBEW,
LKORR TYPE T030H-LKORR,
LHTRV TYPE T030H-LHTRV,
LHTRA TYPE T030H-LHTRA,
LHREA TYPE T030H-LHREA,
LHBEW TYPE T030H-LHBEW,
KTOPL TYPE T030H-KTOPL,
HKONT TYPE T030H-HKONT,
CURTP TYPE T030H-CURTP,
END OF TS_T030H.
DATA: IT_T030H TYPE STANDARD TABLE OF TS_T030H .
DATA: WA_T030H TYPE TS_T030H .
DATA:  LV_T030H TYPE STRING.
TYPES: BEGIN OF TS_T030R,
XKOMO TYPE T030R-XKOMO,
XDIKO TYPE T030R-XDIKO,
XBWMO TYPE T030R-XBWMO,
XBKLA TYPE T030R-XBKLA,
MANDT TYPE T030R-MANDT,
KTOSL TYPE T030R-KTOSL,
KTOPL TYPE T030R-KTOPL,
END OF TS_T030R.
DATA: IT_T030R TYPE STANDARD TABLE OF TS_T030R .
DATA: WA_T030R TYPE TS_T030R .
DATA:  LV_T030R TYPE STRING.
TYPES: BEGIN OF TS_T030W,
KTEXT TYPE T030W-KTEXT,
KTOSL TYPE T030W-KTOSL,
KTXT2 TYPE T030W-KTXT2,
KTXT3 TYPE T030W-KTXT3,
LTEXT TYPE T030W-LTEXT,
SPRAS TYPE T030W-SPRAS,
END OF TS_T030W.
DATA: IT_T030W TYPE STANDARD TABLE OF TS_T030W .
DATA: WA_T030W TYPE TS_T030W .
DATA:  LV_T030W TYPE STRING.
TYPES: BEGIN OF TS_T043G,
ZTERM TYPE T043G-ZTERM,
XSKAN TYPE T043G-XSKAN,
XKONR TYPE T043G-XKONR,
VRZDE TYPE T043G-VRZDE,
TOLER TYPE T043G-TOLER,
TOGRU TYPE T043G-TOGRU,
SKTRE TYPE T043G-SKTRE,
SKNTS TYPE T043G-SKNTS,
SKNTH TYPE T043G-SKNTH,
PROZS TYPE T043G-PROZS,
PROZH TYPE T043G-PROZH,
PRAVS TYPE T043G-PRAVS,
PRAVH TYPE T043G-PRAVH,
PRADS TYPE T043G-PRADS,
PRADH TYPE T043G-PRADH,
MSLRP TYPE T043G-MSLRP,
MANDT TYPE T043G-MANDT,
BUKRS TYPE T043G-BUKRS,
BETRS TYPE T043G-BETRS,
BETRH TYPE T043G-BETRH,
BEAVS TYPE T043G-BEAVS,
BEAVH TYPE T043G-BEAVH,
BEADS TYPE T043G-BEADS,
BEADH TYPE T043G-BEADH,
END OF TS_T043G.
DATA: IT_T043G TYPE STANDARD TABLE OF TS_T043G .
DATA: WA_T043G TYPE TS_T043G .
DATA:  LV_T043G TYPE STRING.
TYPES: BEGIN OF TS_T043GT,
TXT30 TYPE T043GT-TXT30,
TOGRU TYPE T043GT-TOGRU,
SPRAS TYPE T043GT-SPRAS,
MANDT TYPE T043GT-MANDT,
BUKRS TYPE T043GT-BUKRS,
END OF TS_T043GT.
DATA: IT_T043GT TYPE STANDARD TABLE OF TS_T043GT .
DATA: WA_T043GT TYPE TS_T043GT .
DATA:  LV_T043GT TYPE STRING.
TYPES: BEGIN OF TS_T043T,
BETRH TYPE T043T-BETRH,
BETRS TYPE T043T-BETRS,
BUKRS TYPE T043T-BUKRS,
MANDT TYPE T043T-MANDT,
MAXBT TYPE T043T-MAXBT,
MAXEB TYPE T043T-MAXEB,
MAXSK TYPE T043T-MAXSK,
PROZH TYPE T043T-PROZH,
PROZS TYPE T043T-PROZS,
RFPRO TYPE T043T-RFPRO,
SKNTH TYPE T043T-SKNTH,
SKNTS TYPE T043T-SKNTS,
END OF TS_T043T.
DATA: IT_T043T TYPE STANDARD TABLE OF TS_T043T .
DATA: WA_T043T TYPE TS_T043T .
DATA:  LV_T043T TYPE STRING.
TYPES: BEGIN OF TS_T055F,
MANDT TYPE T055F-MANDT,
KOART TYPE T055F-KOART,
FELDN TYPE T055F-FELDN,
END OF TS_T055F.
DATA: IT_T055F TYPE STANDARD TABLE OF TS_T055F .
DATA: WA_T055F TYPE TS_T055F .
DATA:  LV_T055F TYPE STRING.
TYPES: BEGIN OF TS_T077D,
MANDT TYPE T077D-MANDT,
KTOKD TYPE T077D-KTOKD,
FAUSA TYPE T077D-FAUSA,
FAUSF TYPE T077D-FAUSF,
FAUSV TYPE T077D-FAUSV,
FAUS1 TYPE T077D-FAUS1,
FAUSW TYPE T077D-FAUSW,
FAUSG TYPE T077D-FAUSG,
FAUS2 TYPE T077D-FAUS2,
FAUSU TYPE T077D-FAUSU,
END OF TS_T077D.
DATA: IT_T077D TYPE STANDARD TABLE OF TS_T077D .
DATA: WA_T077D TYPE TS_T077D .
DATA:  LV_T077D TYPE STRING.
TYPES: BEGIN OF TS_T077K,
MANDT TYPE T077K-MANDT,
KTOKK TYPE T077K-KTOKK,
FAUSU TYPE T077K-FAUSU,
FAUSX TYPE T077K-FAUSX,
FAUSN TYPE T077K-FAUSN,
FAUSG TYPE T077K-FAUSG,
FAUST TYPE T077K-FAUST,
FAUSW TYPE T077K-FAUSW,
FAUSA TYPE T077K-FAUSA,
FAUSM TYPE T077K-FAUSM,
FAUSF TYPE T077K-FAUSF,
FAUS2 TYPE T077K-FAUS2,
FAUS1 TYPE T077K-FAUS1,
END OF TS_T077K.
DATA: IT_T077K TYPE STANDARD TABLE OF TS_T077K .
DATA: WA_T077K TYPE TS_T077K .
DATA:  LV_T077K TYPE STRING.
TYPES: BEGIN OF TS_T077X,
MANDT TYPE T077X-MANDT,
SPRAS TYPE T077X-SPRAS,
KTOKD TYPE T077X-KTOKD,
TXT30 TYPE T077X-TXT30,
END OF TS_T077X.
DATA: IT_T077X TYPE STANDARD TABLE OF TS_T077X .
DATA: WA_T077X TYPE TS_T077X .
DATA:  LV_T077X TYPE STRING.
TYPES: BEGIN OF TS_T077Y,
TXT30 TYPE T077Y-TXT30,
SPRAS TYPE T077Y-SPRAS,
MANDT TYPE T077Y-MANDT,
KTOKK TYPE T077Y-KTOKK,
END OF TS_T077Y.
DATA: IT_T077Y TYPE STANDARD TABLE OF TS_T077Y .
DATA: WA_T077Y TYPE TS_T077Y .
DATA:  LV_T077Y TYPE STRING.
TYPES: BEGIN OF TS_T082A,
FEGTB TYPE T082A-FEGTB,
FELEI TYPE T082A-FELEI,
MANDT TYPE T082A-MANDT,
END OF TS_T082A.
DATA: IT_T082A TYPE STANDARD TABLE OF TS_T082A .
DATA: WA_T082A TYPE TS_T082A .
DATA:  LV_T082A TYPE STRING.
TYPES: BEGIN OF TS_T082B,
FEGLG TYPE T082B-FEGLG,
FEGRU TYPE T082B-FEGRU,
FEGTB TYPE T082B-FEGTB,
END OF TS_T082B.
DATA: IT_T082B TYPE STANDARD TABLE OF TS_T082B .
DATA: WA_T082B TYPE TS_T082B .
DATA:  LV_T082B TYPE STRING.
TYPES: BEGIN OF TS_T082G,
MANDT TYPE T082G-MANDT,
INGEG TYPE T082G-INGEG,
FNEIN TYPE T082G-FNEIN,
FMUSS TYPE T082G-FMUSS,
FKANN TYPE T082G-FKANN,
FELEI TYPE T082G-FELEI,
FEGTB TYPE T082G-FEGTB,
FEGRU TYPE T082G-FEGRU,
END OF TS_T082G.
DATA: IT_T082G TYPE STANDARD TABLE OF TS_T082G .
DATA: WA_T082G TYPE TS_T082G .
DATA:  LV_T082G TYPE STRING.
TYPES: BEGIN OF TS_T082H,
FEGTB TYPE T082H-FEGTB,
FELEI TYPE T082H-FELEI,
MANDT TYPE T082H-MANDT,
SPRAS TYPE T082H-SPRAS,
TXT30 TYPE T082H-TXT30,
END OF TS_T082H.
DATA: IT_T082H TYPE STANDARD TABLE OF TS_T082H .
DATA: WA_T082H TYPE TS_T082H .
DATA:  LV_T082H TYPE STRING.
TYPES: BEGIN OF TS_T082L,
FEGTB TYPE T082L-FEGTB,
FEGLG TYPE T082L-FEGLG,
XVALID TYPE T082L-XVALID,
END OF TS_T082L.
DATA: IT_T082L TYPE STANDARD TABLE OF TS_T082L .
DATA: WA_T082L TYPE TS_T082L .
DATA:  LV_T082L TYPE STRING.
TYPES: BEGIN OF TS_T082M,
FEGBEZ TYPE T082M-FEGBEZ,
FEGLG TYPE T082M-FEGLG,
FEGTB TYPE T082M-FEGTB,
SPRAS TYPE T082M-SPRAS,
END OF TS_T082M.
DATA: IT_T082M TYPE STANDARD TABLE OF TS_T082M .
DATA: WA_T082M TYPE TS_T082M .
DATA:  LV_T082M TYPE STRING.
TYPES: BEGIN OF TS_T082T,
TXT20 TYPE T082T-TXT20,
SPRAS TYPE T082T-SPRAS,
FEGTB TYPE T082T-FEGTB,
FEGRU TYPE T082T-FEGRU,
END OF TS_T082T.
DATA: IT_T082T TYPE STANDARD TABLE OF TS_T082T .
DATA: WA_T082T TYPE TS_T082T .
DATA:  LV_T082T TYPE STRING.
TYPES: BEGIN OF TS_T090NA,
AFAPL TYPE T090NA-AFAPL,
AFASL TYPE T090NA-AFASL,
ANHWSL TYPE T090NA-ANHWSL,
MANDT TYPE T090NA-MANDT,
END OF TS_T090NA.
DATA: IT_T090NA TYPE STANDARD TABLE OF TS_T090NA .
DATA: WA_T090NA TYPE TS_T090NA .
DATA:  LV_T090NA TYPE STRING.
TYPES: BEGIN OF TS_T090NAT,
AFAPL TYPE T090NAT-AFAPL,
AFASL TYPE T090NAT-AFASL,
AFATXT TYPE T090NAT-AFATXT,
MANDT TYPE T090NAT-MANDT,
SPRAS TYPE T090NAT-SPRAS,
END OF TS_T090NAT.
DATA: IT_T090NAT TYPE STANDARD TABLE OF TS_T090NAT .
DATA: WA_T090NAT TYPE TS_T090NAT .
DATA:  LV_T090NAT TYPE STRING.
TYPES: BEGIN OF TS_T090NAZ,
AFAPL TYPE T090NAZ-AFAPL,
AFARSL TYPE T090NAZ-AFARSL,
AFASL TYPE T090NAZ-AFASL,
AFATYP TYPE T090NAZ-AFATYP,
MANDT TYPE T090NAZ-MANDT,
METDEG TYPE T090NAZ-METDEG,
METPER TYPE T090NAZ-METPER,
METSTU TYPE T090NAZ-METSTU,
END OF TS_T090NAZ.
DATA: IT_T090NAZ TYPE STANDARD TABLE OF TS_T090NAZ .
DATA: WA_T090NAZ TYPE TS_T090NAZ .
DATA:  LV_T090NAZ TYPE STRING.
TYPES: BEGIN OF TS_T090NDT,
SPRAS TYPE T090NDT-SPRAS,
METDEG TYPE T090NDT-METDEG,
MANDT TYPE T090NDT-MANDT,
DEGTXT TYPE T090NDT-DEGTXT,
AFAPL TYPE T090NDT-AFAPL,
END OF TS_T090NDT.
DATA: IT_T090NDT TYPE STANDARD TABLE OF TS_T090NDT .
DATA: WA_T090NDT TYPE TS_T090NDT .
DATA:  LV_T090NDT TYPE STRING.
TYPES: BEGIN OF TS_T090NPT,
AFAPL TYPE T090NPT-AFAPL,
MANDT TYPE T090NPT-MANDT,
METPER TYPE T090NPT-METPER,
PERTXT TYPE T090NPT-PERTXT,
SPRAS TYPE T090NPT-SPRAS,
END OF TS_T090NPT.
DATA: IT_T090NPT TYPE STANDARD TABLE OF TS_T090NPT .
DATA: WA_T090NPT TYPE TS_T090NPT .
DATA:  LV_T090NPT TYPE STRING.
TYPES: BEGIN OF TS_T090NRT,
AFARSL TYPE T090NRT-AFARSL,
MANDT TYPE T090NRT-MANDT,
RSLTXT TYPE T090NRT-RSLTXT,
SPRAS TYPE T090NRT-SPRAS,
END OF TS_T090NRT.
DATA: IT_T090NRT TYPE STANDARD TABLE OF TS_T090NRT .
DATA: WA_T090NRT TYPE TS_T090NRT .
DATA:  LV_T090NRT TYPE STRING.
TYPES: BEGIN OF TS_T090NST,
AFAPL TYPE T090NST-AFAPL,
MANDT TYPE T090NST-MANDT,
METSTU TYPE T090NST-METSTU,
SPRAS TYPE T090NST-SPRAS,
STUTXT TYPE T090NST-STUTXT,
END OF TS_T090NST.
DATA: IT_T090NST TYPE STANDARD TABLE OF TS_T090NST .
DATA: WA_T090NST TYPE TS_T090NST .
DATA:  LV_T090NST TYPE STRING.
TYPES: BEGIN OF TS_T091T,
SPRAS TYPE T091T-SPRAS,
MANDT TYPE T091T-MANDT,
ANHWSL TYPE T091T-ANHWSL,
ANHTXT TYPE T091T-ANHTXT,
END OF TS_T091T.
DATA: IT_T091T TYPE STANDARD TABLE OF TS_T091T .
DATA: WA_T091T TYPE TS_T091T .
DATA:  LV_T091T TYPE STRING.
TYPES: BEGIN OF TS_T093,
AFABER TYPE T093-AFABER,
AFAPL TYPE T093-AFAPL,
BUHBKT TYPE T093-BUHBKT,
MANDT TYPE T093-MANDT,
END OF TS_T093.
DATA: IT_T093 TYPE STANDARD TABLE OF TS_T093 .
DATA: WA_T093 TYPE TS_T093 .
DATA:  LV_T093 TYPE STRING.
TYPES: BEGIN OF TS_T093C,
AFAPL TYPE T093C-AFAPL,
BUKRS TYPE T093C-BUKRS,
MANDT TYPE T093C-MANDT,
VRMAFB TYPE T093C-VRMAFB,
END OF TS_T093C.
DATA: IT_T093C TYPE STANDARD TABLE OF TS_T093C .
DATA: WA_T093C TYPE TS_T093C .
DATA:  LV_T093C TYPE STRING.
TYPES: BEGIN OF TS_T093D,
AFABER TYPE T093D-AFABER,
AFBRHY TYPE T093D-AFBRHY,
AUFBUC TYPE T093D-AUFBUC,
BUKRS TYPE T093D-BUKRS,
MANDT TYPE T093D-MANDT,
ZINBUC TYPE T093D-ZINBUC,
END OF TS_T093D.
DATA: IT_T093D TYPE STANDARD TABLE OF TS_T093D .
DATA: WA_T093D TYPE TS_T093D .
DATA:  LV_T093D TYPE STRING.
TYPES: BEGIN OF TS_T093T,
SPRAS TYPE T093T-SPRAS,
MANDT TYPE T093T-MANDT,
AFBTXT TYPE T093T-AFBTXT,
AFBKTX TYPE T093T-AFBKTX,
AFAPL TYPE T093T-AFAPL,
AFABER TYPE T093T-AFABER,
END OF TS_T093T.
DATA: IT_T093T TYPE STANDARD TABLE OF TS_T093T .
DATA: WA_T093T TYPE TS_T093T .
DATA:  LV_T093T TYPE STRING.
TYPES: BEGIN OF TS_T095,
MANDT TYPE T095-MANDT,
KTVZU TYPE T095-KTVZU,
KTVBAB TYPE T095-KTVBAB,
KTREST TYPE T095-KTREST,
KTOPL TYPE T095-KTOPL,
KTOGR TYPE T095-KTOGR,
KTMIND TYPE T095-KTMIND,
KTMEHR TYPE T095-KTMEHR,
KTERLW TYPE T095-KTERLW,
KTENAK TYPE T095-KTENAK,
KTANZG TYPE T095-KTANZG,
KTANZA TYPE T095-KTANZA,
KTANSW TYPE T095-KTANSW,
KTANSG TYPE T095-KTANSG,
AFABE TYPE T095-AFABE,
END OF TS_T095.
DATA: IT_T095 TYPE STANDARD TABLE OF TS_T095 .
DATA: WA_T095 TYPE TS_T095 .
DATA:  LV_T095 TYPE STRING.
TYPES: BEGIN OF TS_T095B,
MANDT TYPE T095B-MANDT,
KTSZUS TYPE T095B-KTSZUS,
KTSAFU TYPE T095B-KTSAFU,
KTSAFG TYPE T095B-KTSAFG,
KTSAFB TYPE T095B-KTSAFB,
KTOPL TYPE T095B-KTOPL,
KTOGR TYPE T095B-KTOGR,
KTNZUS TYPE T095B-KTNZUS,
KTNAFU TYPE T095B-KTNAFU,
KTNAFG TYPE T095B-KTNAFG,
KTNAFB TYPE T095B-KTNAFB,
AFABE TYPE T095B-AFABE,
END OF TS_T095B.
DATA: IT_T095B TYPE STANDARD TABLE OF TS_T095B .
DATA: WA_T095B TYPE TS_T095B .
DATA:  LV_T095B TYPE STRING.
TYPES: BEGIN OF TS_T095T,
KTGRTX TYPE T095T-KTGRTX,
KTOGR TYPE T095T-KTOGR,
MANDT TYPE T095T-MANDT,
SPRAS TYPE T095T-SPRAS,
END OF TS_T095T.
DATA: IT_T095T TYPE STANDARD TABLE OF TS_T095T .
DATA: WA_T095T TYPE TS_T095T .
DATA:  LV_T095T TYPE STRING.
TYPES: BEGIN OF TS_T096,
AFAPL TYPE T096-AFAPL,
BPLAKT TYPE T096-BPLAKT,
MANDT TYPE T096-MANDT,
END OF TS_T096.
DATA: IT_T096 TYPE STANDARD TABLE OF TS_T096 .
DATA: WA_T096 TYPE TS_T096 .
DATA:  LV_T096 TYPE STRING.
TYPES: BEGIN OF TS_T096T,
AFAPL TYPE T096T-AFAPL,
KTEXT TYPE T096T-KTEXT,
MANDT TYPE T096T-MANDT,
SPRAS TYPE T096T-SPRAS,
END OF TS_T096T.
DATA: IT_T096T TYPE STANDARD TABLE OF TS_T096T .
DATA: WA_T096T TYPE TS_T096T .
DATA:  LV_T096T TYPE STRING.
TYPES: BEGIN OF TS_T100,
TEXT TYPE T100-TEXT,
SPRSL TYPE T100-SPRSL,
MSGNR TYPE T100-MSGNR,
ARBGB TYPE T100-ARBGB,
END OF TS_T100.
DATA: IT_T100 TYPE STANDARD TABLE OF TS_T100 .
DATA: WA_T100 TYPE TS_T100 .
DATA:  LV_T100 TYPE STRING.
TYPES: BEGIN OF TS_T156,
BWART TYPE T156-BWART,
KZKON TYPE T156-KZKON,
MANDT TYPE T156-MANDT,
END OF TS_T156.
DATA: IT_T156 TYPE STANDARD TABLE OF TS_T156 .
DATA: WA_T156 TYPE TS_T156 .
DATA:  LV_T156 TYPE STRING.
TYPES: BEGIN OF TS_T156T,
SPRAS TYPE T156T-SPRAS,
SOBKZ TYPE T156T-SOBKZ,
MANDT TYPE T156T-MANDT,
BWART TYPE T156T-BWART,
BTEXT TYPE T156T-BTEXT,
END OF TS_T156T.
DATA: IT_T156T TYPE STANDARD TABLE OF TS_T156T .
DATA: WA_T156T TYPE TS_T156T .
DATA:  LV_T156T TYPE STRING.
TYPES: BEGIN OF TS_T156W,
VORSL TYPE T156W-VORSL,
BUSTW TYPE T156W-BUSTW,
END OF TS_T156W.
DATA: IT_T156W TYPE STANDARD TABLE OF TS_T156W .
DATA: WA_T156W TYPE TS_T156W .
DATA:  LV_T156W TYPE STRING.
TYPES: BEGIN OF TS_T156X,
MANDT TYPE T156X-MANDT,
KOMOK TYPE T156X-KOMOK,
BWART TYPE T156X-BWART,
BUSTW TYPE T156X-BUSTW,
END OF TS_T156X.
DATA: IT_T156X TYPE STANDARD TABLE OF TS_T156X .
DATA: WA_T156X TYPE TS_T156X .
DATA:  LV_T156X TYPE STRING.
TYPES: BEGIN OF TS_T159L,
XLAUT TYPE T159L-XLAUT,
WERKS TYPE T159L-WERKS,
MANDT TYPE T159L-MANDT,
END OF TS_T159L.
DATA: IT_T159L TYPE STANDARD TABLE OF TS_T159L .
DATA: WA_T159L TYPE TS_T159L .
DATA:  LV_T159L TYPE STRING.
TYPES: BEGIN OF TS_T160M,
ARBGB TYPE T160M-ARBGB,
MANDT TYPE T160M-MANDT,
MSGNR TYPE T160M-MSGNR,
MSGTP TYPE T160M-MSGTP,
MSGTYWS TYPE T160M-MSGTYWS,
MSGVS TYPE T160M-MSGVS,
END OF TS_T160M.
DATA: IT_T160M TYPE STANDARD TABLE OF TS_T160M .
DATA: WA_T160M TYPE TS_T160M .
DATA:  LV_T160M TYPE STRING.
TYPES: BEGIN OF TS_T161,
MANDT TYPE T161-MANDT,
BREFN TYPE T161-BREFN,
BSART TYPE T161-BSART,
BSTYP TYPE T161-BSTYP,
END OF TS_T161.
DATA: IT_T161 TYPE STANDARD TABLE OF TS_T161 .
DATA: WA_T161 TYPE TS_T161 .
DATA:  LV_T161 TYPE STRING.
TYPES: BEGIN OF TS_T161T,
SPRAS TYPE T161T-SPRAS,
MANDT TYPE T161T-MANDT,
BSTYP TYPE T161T-BSTYP,
BSART TYPE T161T-BSART,
BATXT TYPE T161T-BATXT,
END OF TS_T161T.
DATA: IT_T161T TYPE STANDARD TABLE OF TS_T161T .
DATA: WA_T161T TYPE TS_T161T .
DATA:  LV_T161T TYPE STRING.
TYPES: BEGIN OF TS_T162,
MANDT TYPE T162-MANDT,
FLREF TYPE T162-FLREF,
FAUS3 TYPE T162-FAUS3,
FAUS2 TYPE T162-FAUS2,
FAUS1 TYPE T162-FAUS1,
BSTYP TYPE T162-BSTYP,
END OF TS_T162.
DATA: IT_T162 TYPE STANDARD TABLE OF TS_T162 .
DATA: WA_T162 TYPE TS_T162 .
DATA:  LV_T162 TYPE STRING.
TYPES: BEGIN OF TS_T162K,
FAUS1 TYPE T162K-FAUS1,
FAUS2 TYPE T162K-FAUS2,
KNTTP TYPE T162K-KNTTP,
MANDT TYPE T162K-MANDT,
END OF TS_T162K.
DATA: IT_T162K TYPE STANDARD TABLE OF TS_T162K .
DATA: WA_T162K TYPE TS_T162K .
DATA:  LV_T162K TYPE STRING.
TYPES: BEGIN OF TS_T162T,
FLREF TYPE T162T-FLREF,
FLRTX TYPE T162T-FLRTX,
MANDT TYPE T162T-MANDT,
SPRAS TYPE T162T-SPRAS,
END OF TS_T162T.
DATA: IT_T162T TYPE STANDARD TABLE OF TS_T162T .
DATA: WA_T162T TYPE TS_T162T .
DATA:  LV_T162T TYPE STRING.
TYPES: BEGIN OF TS_T162X,
FAUAN TYPE T162X-FAUAN,
FAUKT TYPE T162X-FAUKT,
FAULP TYPE T162X-FAULP,
FAUBA TYPE T162X-FAUBA,
MANDT TYPE T162X-MANDT,
SPRAS TYPE T162X-SPRAS,
FAUBS TYPE T162X-FAUBS,
FAUTX TYPE T162X-FAUTX,
FAUTB TYPE T162X-FAUTB,
FAUNR TYPE T162X-FAUNR,
FAUGR TYPE T162X-FAUGR,
END OF TS_T162X.
DATA: IT_T162X TYPE STANDARD TABLE OF TS_T162X .
DATA: WA_T162X TYPE TS_T162X .
DATA:  LV_T162X TYPE STRING.
TYPES: BEGIN OF TS_T162Y,
FAUGR TYPE T162Y-FAUGR,
FAUGT TYPE T162Y-FAUGT,
MANDT TYPE T162Y-MANDT,
SPRAS TYPE T162Y-SPRAS,
END OF TS_T162Y.
DATA: IT_T162Y TYPE STANDARD TABLE OF TS_T162Y .
DATA: WA_T162Y TYPE TS_T162Y .
DATA:  LV_T162Y TYPE STRING.
TYPES: BEGIN OF TS_T163K,
KNTTP TYPE T163K-KNTTP,
MANDT TYPE T163K-MANDT,
REPOS TYPE T163K-REPOS,
WEPOS TYPE T163K-WEPOS,
END OF TS_T163K.
DATA: IT_T163K TYPE STANDARD TABLE OF TS_T163K .
DATA: WA_T163K TYPE TS_T163K .
DATA:  LV_T163K TYPE STRING.
TYPES: BEGIN OF TS_T169G,
XW2NE TYPE T169G-XW2NE,
XW2JA TYPE T169G-XW2JA,
XW1NE TYPE T169G-XW1NE,
XW1JA TYPE T169G-XW1JA,
XP2NE TYPE T169G-XP2NE,
XP2JA TYPE T169G-XP2JA,
XP1NE TYPE T169G-XP1NE,
XP1JA TYPE T169G-XP1JA,
WERT2 TYPE T169G-WERT2,
WERT1 TYPE T169G-WERT1,
TOLSL TYPE T169G-TOLSL,
PROZ2 TYPE T169G-PROZ2,
PROZ1 TYPE T169G-PROZ1,
MANDT TYPE T169G-MANDT,
BUKRS TYPE T169G-BUKRS,
END OF TS_T169G.
DATA: IT_T169G TYPE STANDARD TABLE OF TS_T169G .
DATA: WA_T169G TYPE TS_T169G .
DATA:  LV_T169G TYPE STRING.
TYPES: BEGIN OF TS_T169P,
XXBLNR TYPE T169P-XXBLNR,
XBUKRS TYPE T169P-XBUKRS,
XBLDAT TYPE T169P-XBLDAT,
MANDT TYPE T169P-MANDT,
BUKRS TYPE T169P-BUKRS,
END OF TS_T169P.
DATA: IT_T169P TYPE STANDARD TABLE OF TS_T169P .
DATA: WA_T169P TYPE TS_T169P .
DATA:  LV_T169P TYPE STRING.
TYPES: BEGIN OF TS_T691F,
PDTOL TYPE T691F-PDTOL,
STREA TYPE T691F-STREA,
STSET TYPE T691F-STSET,
STVAW TYPE T691F-STVAW,
STVLW TYPE T691F-STVLW,
WSWIN TYPE T691F-WSWIN,
PDMAX TYPE T691F-PDMAX,
OITOL TYPE T691F-OITOL,
MAVAL TYPE T691F-MAVAL,
MANDT TYPE T691F-MANDT,
KKBER TYPE T691F-KKBER,
DUNNG TYPE T691F-DUNNG,
CTLPC TYPE T691F-CTLPC,
CRPRC TYPE T691F-CRPRC,
CRMGR TYPE T691F-CRMGR,
CMPAH TYPE T691F-CMPAH,
CMPAG TYPE T691F-CMPAG,
CMPAF TYPE T691F-CMPAF,
CMPAE TYPE T691F-CMPAE,
CMPAD TYPE T691F-CMPAD,
CMPAC TYPE T691F-CMPAC,
CMPAB TYPE T691F-CMPAB,
CMPAA TYPE T691F-CMPAA,
CECKI TYPE T691F-CECKI,
END OF TS_T691F.
DATA: IT_T691F TYPE STANDARD TABLE OF TS_T691F .
DATA: WA_T691F TYPE TS_T691F .
DATA:  LV_T691F TYPE STRING.
TYPES: BEGIN OF TS_T691G,
SPRAS TYPE T691G-SPRAS,
MANDT TYPE T691G-MANDT,
CRMGR TYPE T691G-CRMGR,
CTLPC TYPE T691G-CTLPC,
KKBER TYPE T691G-KKBER,
PRBEZ TYPE T691G-PRBEZ,
END OF TS_T691G.
DATA: IT_T691G TYPE STANDARD TABLE OF TS_T691G .
DATA: WA_T691G TYPE TS_T691G .
DATA:  LV_T691G TYPE STRING.
TYPES: BEGIN OF TS_TADIR,
PGMID TYPE TADIR-PGMID,
OBJECT TYPE TADIR-OBJECT,
OBJ_NAME TYPE TADIR-OBJ_NAME,
EDTFLAG TYPE TADIR-EDTFLAG,
END OF TS_TADIR.
DATA: IT_TADIR TYPE STANDARD TABLE OF TS_TADIR .
DATA: WA_TADIR TYPE TS_TADIR .
DATA:  LV_TADIR TYPE STRING.
TYPES: BEGIN OF TS_TBAER,
BUKRS TYPE TBAER-BUKRS,
FNAME TYPE TBAER-FNAME,
KOART TYPE TBAER-KOART,
UMSKS TYPE TBAER-UMSKS,
XAEND TYPE TBAER-XAEND,
XAUSZ TYPE TBAER-XAUSZ,
XBUPE TYPE TBAER-XBUPE,
MANDT TYPE TBAER-MANDT,
END OF TS_TBAER.
DATA: IT_TBAER TYPE STANDARD TABLE OF TS_TBAER .
DATA: WA_TBAER TYPE TS_TBAER .
DATA:  LV_TBAER TYPE STRING.
TYPES: BEGIN OF TS_TBSL,
XZAHL TYPE TBSL-XZAHL,
XUMSW TYPE TBSL-XUMSW,
XSONU TYPE TBSL-XSONU,
STBSL TYPE TBSL-STBSL,
SHKZG TYPE TBSL-SHKZG,
MANDT TYPE TBSL-MANDT,
KOART TYPE TBSL-KOART,
BSCHL TYPE TBSL-BSCHL,
END OF TS_TBSL.
DATA: IT_TBSL TYPE STANDARD TABLE OF TS_TBSL .
DATA: WA_TBSL TYPE TS_TBSL .
DATA:  LV_TBSL TYPE STRING.
TYPES: BEGIN OF TS_TBSLT,
BSCHL TYPE TBSLT-BSCHL,
LTEXT TYPE TBSLT-LTEXT,
MANDT TYPE TBSLT-MANDT,
SPRAS TYPE TBSLT-SPRAS,
UMSKZ TYPE TBSLT-UMSKZ,
END OF TS_TBSLT.
DATA: IT_TBSLT TYPE STANDARD TABLE OF TS_TBSLT .
DATA: WA_TBSLT TYPE TS_TBSLT .
DATA:  LV_TBSLT TYPE STRING.
TYPES: BEGIN OF TS_TCDOB,
DOCUDEL TYPE TCDOB-DOCUDEL,
MULTCASE TYPE TCDOB-MULTCASE,
OBJECT TYPE TCDOB-OBJECT,
OLDTABNAME TYPE TCDOB-OLDTABNAME,
REFNAME TYPE TCDOB-REFNAME,
TABNAME TYPE TCDOB-TABNAME,
END OF TS_TCDOB.
DATA: IT_TCDOB TYPE STANDARD TABLE OF TS_TCDOB .
DATA: WA_TCDOB TYPE TS_TCDOB .
DATA:  LV_TCDOB TYPE STRING.
TYPES: BEGIN OF TS_TCURF,
FFACT TYPE TCURF-FFACT,
GDATU TYPE TCURF-GDATU,
KURST TYPE TCURF-KURST,
MANDT TYPE TCURF-MANDT,
TCURR TYPE TCURF-TCURR,
TFACT TYPE TCURF-TFACT,
FCURR TYPE TCURF-FCURR,
END OF TS_TCURF.
DATA: IT_TCURF TYPE STANDARD TABLE OF TS_TCURF .
DATA: WA_TCURF TYPE TS_TCURF .
DATA:  LV_TCURF TYPE STRING.
TYPES: BEGIN OF TS_TDDAT,
TABNAME TYPE TDDAT-TABNAME,
CCLASS TYPE TDDAT-CCLASS,
END OF TS_TDDAT.
DATA: IT_TDDAT TYPE STANDARD TABLE OF TS_TDDAT .
DATA: WA_TDDAT TYPE TS_TDDAT .
DATA:  LV_TDDAT TYPE STRING.
TYPES: BEGIN OF TS_TKA01,
KTOPL TYPE TKA01-KTOPL,
BEZEI TYPE TKA01-BEZEI,
KOKRS TYPE TKA01-KOKRS,
LMONA TYPE TKA01-LMONA,
MANDT TYPE TKA01-MANDT,
WAERS TYPE TKA01-WAERS,
END OF TS_TKA01.
DATA: IT_TKA01 TYPE STANDARD TABLE OF TS_TKA01 .
DATA: WA_TKA01 TYPE TS_TKA01 .
DATA:  LV_TKA01 TYPE STRING.
TYPES: BEGIN OF TS_TKA02,
MANDT TYPE TKA02-MANDT,
BUKRS TYPE TKA02-BUKRS,
GSBER TYPE TKA02-GSBER,
KOKRS TYPE TKA02-KOKRS,
END OF TS_TKA02.
DATA: IT_TKA02 TYPE STANDARD TABLE OF TS_TKA02 .
DATA: WA_TKA02 TYPE TS_TKA02 .
DATA:  LV_TKA02 TYPE STRING.
TYPES: BEGIN OF TS_TMC4,
MCINF TYPE TMC4-MCINF,
SPERI TYPE TMC4-SPERI,
END OF TS_TMC4.
DATA: IT_TMC4 TYPE STANDARD TABLE OF TS_TMC4 .
DATA: WA_TMC4 TYPE TS_TMC4 .
DATA:  LV_TMC4 TYPE STRING.
TYPES: BEGIN OF TS_TMODP,
FAUNA TYPE TMODP-FAUNA,
MODIF TYPE TMODP-MODIF,
SPRAS TYPE TMODP-SPRAS,
FTEXT TYPE TMODP-FTEXT,
END OF TS_TMODP.
DATA: IT_TMODP TYPE STANDARD TABLE OF TS_TMODP .
DATA: WA_TMODP TYPE TS_TMODP .
DATA:  LV_TMODP TYPE STRING.
TYPES: BEGIN OF TS_TRDIR,
NAME TYPE TRDIR-NAME,
SECU TYPE TRDIR-SECU,
SUBC TYPE TRDIR-SUBC,
CNAM TYPE TRDIR-CNAM,
CDAT TYPE TRDIR-CDAT,
UNAM TYPE TRDIR-UNAM,
UDAT TYPE TRDIR-UDAT,
END OF TS_TRDIR.
DATA: IT_TRDIR TYPE STANDARD TABLE OF TS_TRDIR .
DATA: WA_TRDIR TYPE TS_TRDIR .
DATA:  LV_TRDIR TYPE STRING.
TYPES: BEGIN OF TS_TSTC,
TCODE TYPE TSTC-TCODE,
PGMNA TYPE TSTC-PGMNA,
CINFO TYPE TSTC-CINFO,
END OF TS_TSTC.
DATA: IT_TSTC TYPE STANDARD TABLE OF TS_TSTC .
DATA: WA_TSTC TYPE TS_TSTC .
DATA:  LV_TSTC TYPE STRING.
TYPES: BEGIN OF TS_TSTCA,
TCODE TYPE TSTCA-TCODE,
OBJCT TYPE TSTCA-OBJCT,
END OF TS_TSTCA.
DATA: IT_TSTCA TYPE STANDARD TABLE OF TS_TSTCA .
DATA: WA_TSTCA TYPE TS_TSTCA .
DATA:  LV_TSTCA TYPE STRING.
TYPES: BEGIN OF TS_TSTCP,
TCODE TYPE TSTCP-TCODE,
PARAM TYPE TSTCP-PARAM,
END OF TS_TSTCP.
DATA: IT_TSTCP TYPE STANDARD TABLE OF TS_TSTCP .
DATA: WA_TSTCP TYPE TS_TSTCP .
DATA:  LV_TSTCP TYPE STRING.
TYPES: BEGIN OF TS_TSTCT,
SPRSL TYPE TSTCT-SPRSL,
TCODE TYPE TSTCT-TCODE,
TTEXT TYPE TSTCT-TTEXT,
END OF TS_TSTCT.
DATA: IT_TSTCT TYPE STANDARD TABLE OF TS_TSTCT .
DATA: WA_TSTCT TYPE TS_TSTCT .
DATA:  LV_TSTCT TYPE STRING.
TYPES: BEGIN OF TS_TVAK,
AUART TYPE TVAK-AUART,
BEZOB TYPE TVAK-BEZOB,
CMGRA TYPE TVAK-CMGRA,
KLIMP TYPE TVAK-KLIMP,
MANDT TYPE TVAK-MANDT,
END OF TS_TVAK.
DATA: IT_TVAK TYPE STANDARD TABLE OF TS_TVAK .
DATA: WA_TVAK TYPE TS_TVAK .
DATA:  LV_TVAK TYPE STRING.
TYPES: BEGIN OF TS_TVAKT,
MANDT TYPE TVAKT-MANDT,
AUART TYPE TVAKT-AUART,
BEZEI TYPE TVAKT-BEZEI,
SPRAS TYPE TVAKT-SPRAS,
END OF TS_TVAKT.
DATA: IT_TVAKT TYPE STANDARD TABLE OF TS_TVAKT .
DATA: WA_TVAKT TYPE TS_TVAKT .
DATA:  LV_TVAKT TYPE STRING.
*Table added -- 13.0 release - for $ value issue
TYPES: BEGIN OF TS_USORG,
FIELD TYPE USORG-FIELD,
VARBL TYPE USORG-VARBL,
END OF TS_USORG.
DATA: IT_USORG TYPE STANDARD TABLE OF TS_USORG .
DATA: WA_USORG TYPE TS_USORG .
DATA:  LV_USORG TYPE STRING.
TYPES: BEGIN OF TS_USR02,
MANDT TYPE USR02-MANDT,
UFLAG TYPE USR02-UFLAG,
GLTGV TYPE USR02-GLTGV,
GLTGB TYPE USR02-GLTGB,
USTYP TYPE USR02-USTYP,
CLASS TYPE USR02-CLASS,
BNAME TYPE USR02-BNAME,
TRDAT TYPE USR02-TRDAT,
END OF TS_USR02.
DATA: IT_USR02 TYPE STANDARD TABLE OF TS_USR02 .
DATA: WA_USR02 TYPE TS_USR02 .
DATA:  LV_USR02 TYPE STRING.
*ACTTSAP12.0 Adding security Policy field*

DATA: ISCOLUMN_USR02_SECURITY_POLICY TYPE STRING.

TABLES: DD03M.

SELECT * FROM DD03M
WHERE TABNAME = 'USR02' AND FIELDNAME = 'SECURITY_POLICY'.
ENDSELECT.

IF SY-SUBRC = 0.
  ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
ELSE.
  ISCOLUMN_USR02_SECURITY_POLICY = 'No'.
ENDIF.
IF ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
  TYPES: BEGIN OF TS_USR02_CC_1,
  GLTGB TYPE USR02-GLTGB,
  USTYP TYPE USR02-USTYP,
  CLASS TYPE USR02-CLASS,
  ANAME TYPE USR02-ANAME,
  ERDAT TYPE USR02-ERDAT,
  TRDAT TYPE USR02-TRDAT,
  GLTGV TYPE USR02-GLTGV,
  UFLAG TYPE USR02-UFLAG,
  MANDT TYPE USR02-MANDT,
  BNAME TYPE USR02-BNAME,
  SECURITY_POLICY(10) TYPE C,
  END OF TS_USR02_CC_1.
  DATA: IT_USR02_CC_1 TYPE STANDARD TABLE OF TS_USR02_CC_1 .
  DATA: WA_USR02_CC_1 TYPE TS_USR02_CC_1 .
  DATA:  LV_USR02_CC_1 TYPE STRING.
ELSE.
  TYPES: BEGIN OF TS_USR02_CC,
  GLTGB TYPE USR02-GLTGB,
  USTYP TYPE USR02-USTYP,
  CLASS TYPE USR02-CLASS,
  ANAME TYPE USR02-ANAME,
  ERDAT TYPE USR02-ERDAT,
  TRDAT TYPE USR02-TRDAT,
  GLTGV TYPE USR02-GLTGV,
  UFLAG TYPE USR02-UFLAG,
  MANDT TYPE USR02-MANDT,
  BNAME TYPE USR02-BNAME,
  END OF TS_USR02_CC.
  DATA: IT_USR02_CC TYPE STANDARD TABLE OF TS_USR02_CC .
  DATA: WA_USR02_CC TYPE TS_USR02_CC .
  DATA:  LV_USR02_CC TYPE STRING.
ENDIF.

TYPES: BEGIN OF TS_USR10,
MANDT TYPE USR10-MANDT,
PROFN TYPE USR10-PROFN,
AKTPS TYPE USR10-AKTPS,
TYP TYPE USR10-TYP,
END OF TS_USR10.
DATA: IT_USR10 TYPE STANDARD TABLE OF TS_USR10 .
DATA: WA_USR10 TYPE TS_USR10 .
DATA:  LV_USR10 TYPE STRING.
TYPES: BEGIN OF TS_USR21,
MANDT TYPE USR21-MANDT,
BNAME TYPE USR21-BNAME,
PERSNUMBER TYPE USR21-PERSNUMBER,
END OF TS_USR21.
DATA: IT_USR21 TYPE STANDARD TABLE OF TS_USR21 .
DATA: WA_USR21 TYPE TS_USR21 .
DATA:  LV_USR21 TYPE STRING.
TYPES: BEGIN OF TS_USR40,
BCODE TYPE USR40-BCODE,
END OF TS_USR40.
DATA: IT_USR40 TYPE STANDARD TABLE OF TS_USR40 .
DATA: WA_USR40 TYPE TS_USR40 .
DATA:  LV_USR40 TYPE STRING.
TYPES: BEGIN OF TS_USREFUS,
MANDT TYPE USREFUS-MANDT,
BNAME TYPE USREFUS-BNAME,
REFUSER TYPE USREFUS-REFUSER,
USERALIAS TYPE USREFUS-USERALIAS,
END OF TS_USREFUS.
DATA: IT_USREFUS TYPE STANDARD TABLE OF TS_USREFUS .
DATA: WA_USREFUS TYPE TS_USREFUS .
DATA:  LV_USREFUS TYPE STRING.
TYPES: BEGIN OF TS_UST04,
MANDT TYPE UST04-MANDT,
PROFILE TYPE UST04-PROFILE,
BNAME TYPE UST04-BNAME,
END OF TS_UST04.
DATA: IT_UST04 TYPE STANDARD TABLE OF TS_UST04 .
DATA: WA_UST04 TYPE TS_UST04 .
DATA:  LV_UST04 TYPE STRING.
TYPES: BEGIN OF TS_UST10C,
MANDT TYPE UST10C-MANDT,
PROFN TYPE UST10C-PROFN,
AKTPS TYPE UST10C-AKTPS,
SUBPROF TYPE UST10C-SUBPROF,
END OF TS_UST10C.
DATA: IT_UST10C TYPE STANDARD TABLE OF TS_UST10C .
DATA: WA_UST10C TYPE TS_UST10C .
DATA:  LV_UST10C TYPE STRING.
TYPES: BEGIN OF TS_UST10S,
MANDT TYPE UST10S-MANDT,
PROFN TYPE UST10S-PROFN,
AKTPS TYPE UST10S-AKTPS,
OBJCT TYPE UST10S-OBJCT,
AUTH TYPE UST10S-AUTH,
END OF TS_UST10S.
DATA: IT_UST10S TYPE STANDARD TABLE OF TS_UST10S .
DATA: WA_UST10S TYPE TS_UST10S .
DATA:  LV_UST10S TYPE STRING.
TYPES: BEGIN OF TS_UST12,
BIS TYPE UST12-BIS,
VON TYPE UST12-VON,
FIELD TYPE UST12-FIELD,
AKTPS TYPE UST12-AKTPS,
AUTH TYPE UST12-AUTH,
OBJCT TYPE UST12-OBJCT,
MANDT TYPE UST12-MANDT,
END OF TS_UST12.
DATA: IT_UST12 TYPE STANDARD TABLE OF TS_UST12 .
DATA: WA_UST12 TYPE TS_UST12 .
DATA:  LV_UST12 TYPE STRING.
TYPES: BEGIN OF TS_ADRP,
CLIENT TYPE ADRP-CLIENT,
PERSNUMBER TYPE ADRP-PERSNUMBER,
DATE_FROM TYPE ADRP-DATE_FROM,
DATE_TO TYPE ADRP-DATE_TO,
TITLE TYPE ADRP-TITLE,
NAME_FIRST TYPE ADRP-NAME_FIRST,
NAME_LAST TYPE ADRP-NAME_LAST,
SEX TYPE ADRP-SEX,
END OF TS_ADRP.
DATA: IT_ADRP TYPE STANDARD TABLE OF TS_ADRP .
DATA: WA_ADRP TYPE TS_ADRP .
DATA:  LV_ADRP TYPE STRING.
TYPES: BEGIN OF TS_DBTABLOG,
TABNAME TYPE DBTABLOG-TABNAME,
LOGDATE TYPE DBTABLOG-LOGDATE,
LOGTIME TYPE DBTABLOG-LOGTIME,
USERNAME TYPE DBTABLOG-USERNAME,
TCODE TYPE DBTABLOG-TCODE,
END OF TS_DBTABLOG.
DATA: IT_DBTABLOG TYPE STANDARD TABLE OF TS_DBTABLOG .
DATA: WA_DBTABLOG TYPE TS_DBTABLOG .
DATA:  LV_DBTABLOG TYPE STRING.
TYPES: BEGIN OF TS_T100C,
MANDT TYPE T100C-MANDT,
ARBGB TYPE T100C-ARBGB,
MSGNR TYPE T100C-MSGNR,
UNAME TYPE T100C-UNAME,
MSGTS TYPE T100C-MSGTS,
MSGTB TYPE T100C-MSGTB,
END OF TS_T100C.
DATA: IT_T100C TYPE STANDARD TABLE OF TS_T100C .
DATA: WA_T100C TYPE TS_T100C .
DATA:  LV_T100C TYPE STRING.

*#ACTTSAP12.0 Release 12.0 Changes Begin *
* Adding Tables PAT03, TVIMF, USH04, USR04, USH02, CDHDR, CDPOS, SAPWLSERV, AGR_TEXTS, TBTCO, RSAUPROF, E070, E07T , SSM_CIDT and TPALOG*


TYPES: BEGIN OF TS_SAPWLSERV,
NAME TYPE SAPWLSERV-NAME,
INSTNO TYPE SAPWLSERV-INSTNO,
HOST TYPE SAPWLSERV-HOST,
LASTDAY TYPE SAPWLSERV-LASTDAY,
INSTSHORT TYPE SAPWLSERV-INSTSHORT,
HOSTSHORT TYPE SAPWLSERV-HOSTSHORT,
END OF TS_SAPWLSERV.
DATA: IT_SAPWLSERV TYPE STANDARD TABLE OF TS_SAPWLSERV .
DATA: WA_SAPWLSERV TYPE TS_SAPWLSERV .
DATA:  LV_SAPWLSERV TYPE STRING.

TYPES: BEGIN OF TS_TBTCO,
JOBNAME TYPE TBTCO-JOBNAME,
JOBCOUNT TYPE TBTCO-JOBCOUNT,
SDLSTRTDT TYPE TBTCO-SDLSTRTDT,
SDLSTRTTM TYPE TBTCO-SDLSTRTTM,
SDLUNAME TYPE TBTCO-SDLUNAME,
STATUS TYPE TBTCO-STATUS,
ENDDATE TYPE TBTCO-ENDDATE,
ENDTIME TYPE TBTCO-ENDTIME,
LASTCHDATE TYPE TBTCO-LASTCHDATE,
LASTCHTIME TYPE TBTCO-LASTCHTIME,
LASTCHNAME TYPE TBTCO-LASTCHNAME,
END OF TS_TBTCO.
DATA: IT_TBTCO TYPE STANDARD TABLE OF TS_TBTCO .
DATA: WA_TBTCO TYPE TS_TBTCO .
DATA:  LV_TBTCO TYPE STRING.


TYPES: BEGIN OF TS_RSAUPROF,
PROFNAME TYPE RSAUPROF-PROFNAME,
SLOTNO TYPE RSAUPROF-SLOTNO,
CURRPROF TYPE RSAUPROF-CURRPROF,
CLASSES TYPE RSAUPROF-CLASSES,
SEVERITY TYPE RSAUPROF-SEVERITY,
CLIENT TYPE RSAUPROF-CLIENT,
UNAME TYPE RSAUPROF-UNAME,
STATUS TYPE RSAUPROF-STATUS,
CUNAME TYPE RSAUPROF-CUNAME,
CDATE TYPE RSAUPROF-CDATE,
SELVAR TYPE RSAUPROF-SELVAR,
MSGVECT TYPE RSAUPROF-MSGVECT,
END OF TS_RSAUPROF.
DATA: IT_RSAUPROF TYPE STANDARD TABLE OF TS_RSAUPROF .
DATA: WA_RSAUPROF TYPE TS_RSAUPROF .
DATA:  LV_RSAUPROF TYPE STRING.

TYPES: BEGIN OF TS_AGR_TEXTS,
AGR_NAME TYPE AGR_TEXTS-AGR_NAME,
TEXT TYPE AGR_TEXTS-TEXT,
SPRAS TYPE AGR_TEXTS-SPRAS,
LINE TYPE AGR_TEXTS-LINE,
END OF TS_AGR_TEXTS.
DATA: IT_AGR_TEXTS TYPE STANDARD TABLE OF TS_AGR_TEXTS .
DATA: WA_AGR_TEXTS TYPE TS_AGR_TEXTS .
DATA:  LV_AGR_TEXTS TYPE STRING.


TYPES: BEGIN OF TS_PAT03,
PATCH TYPE PAT03-PATCH,
SHORT_TEXT TYPE PAT03-SHORT_TEXT,
STATUS TYPE PAT03-STATUS,
IMPLE_DATE TYPE PAT03-IMPLE_DATE,
L_IMPL_REL TYPE PAT03-L_IMPL_REL,
DELIV_DATE TYPE PAT03-DELIV_DATE,
IMPLE_TIME TYPE PAT03-IMPLE_TIME,
COMP_REL TYPE PAT03-COMP_REL,
COMPONENT TYPE PAT03-COMPONENT,
END OF TS_PAT03.
DATA: IT_PAT03 TYPE STANDARD TABLE OF TS_PAT03 .
DATA: WA_PAT03 TYPE TS_PAT03 .
DATA:  LV_PAT03 TYPE STRING.
TYPES: BEGIN OF TS_TVIMF,
TABNAME TYPE TVIMF-TABNAME,
EVENT TYPE TVIMF-EVENT,
FORMNAME TYPE TVIMF-FORMNAME,
END OF TS_TVIMF.
DATA: IT_TVIMF TYPE STANDARD TABLE OF TS_TVIMF .
DATA: WA_TVIMF TYPE TS_TVIMF .
DATA:  LV_TVIMF TYPE STRING.
TYPES: BEGIN OF TS_USH04,
MANDT TYPE USH04-MANDT,
BNAME TYPE USH04-BNAME,
MODDA TYPE USH04-MODDA,
MODTI TYPE USH04-MODTI,
MODBE TYPE USH04-MODBE,
NRPRO TYPE USH04-NRPRO,
PROFS TYPE USH04-PROFS,
END OF TS_USH04.
DATA: IT_USH04 TYPE STANDARD TABLE OF TS_USH04 .
DATA: WA_USH04 TYPE TS_USH04 .
DATA:  LV_USH04 TYPE STRING.
TYPES: BEGIN OF TS_USR04,
MANDT TYPE USR04-MANDT,
BNAME TYPE USR04-BNAME,
MODDA TYPE USR04-MODDA,
MODTI TYPE USR04-MODTI,
MODBE TYPE USR04-MODBE,
NRPRO TYPE USR04-NRPRO,
PROFS TYPE USR04-PROFS,
END OF TS_USR04.
DATA: IT_USR04 TYPE STANDARD TABLE OF TS_USR04 .
DATA: WA_USR04 TYPE TS_USR04 .
DATA:  LV_USR04 TYPE STRING.
TYPES: BEGIN OF TS_USH02,
MANDT TYPE USH02-MANDT,
BNAME TYPE USH02-BNAME,
MODDA TYPE USH02-MODDA,
MODTI TYPE USH02-MODTI,
MODBE TYPE USH02-MODBE,
TCODE TYPE USH02-TCODE,
REPID TYPE USH02-REPID,
GLTGV TYPE USH02-GLTGV,
GLTGB TYPE USH02-GLTGB,
USTYP TYPE USH02-USTYP,
CLASS TYPE USH02-CLASS,
UFLAG TYPE USH02-UFLAG,
ACCNT TYPE USH02-ACCNT,
*CODVN TYPE USH02-CODVN,
*PWDINITIAL TYPE USH02-PWDINITIAL,
END OF TS_USH02.
DATA: IT_USH02 TYPE STANDARD TABLE OF TS_USH02 .
DATA: WA_USH02 TYPE TS_USH02 .
DATA:  LV_USH02 TYPE STRING.
TYPES: BEGIN OF TS_CDHDR,
MANDANT TYPE CDHDR-MANDANT,
OBJECTCLAS TYPE CDHDR-OBJECTCLAS,
OBJECTID TYPE CDHDR-OBJECTID,
CHANGENR TYPE CDHDR-CHANGENR,
USERNAME TYPE CDHDR-USERNAME,
UDATE TYPE CDHDR-UDATE,
UTIME TYPE CDHDR-UTIME,
TCODE TYPE CDHDR-TCODE,
PLANCHNGNR TYPE CDHDR-PLANCHNGNR,
ACT_CHNGNO TYPE CDHDR-ACT_CHNGNO,
WAS_PLANND TYPE CDHDR-WAS_PLANND,
CHANGE_IND TYPE CDHDR-CHANGE_IND,
LANGU TYPE CDHDR-LANGU,
VERSION TYPE CDHDR-VERSION,
END OF TS_CDHDR.
DATA: IT_CDHDR TYPE STANDARD TABLE OF TS_CDHDR .
DATA: WA_CDHDR TYPE TS_CDHDR .
DATA:  LV_CDHDR TYPE STRING.
TYPES: BEGIN OF TS_CDPOS,
MANDANT TYPE CDPOS-MANDANT,
OBJECTCLAS TYPE CDPOS-OBJECTCLAS,
OBJECTID TYPE CDPOS-OBJECTID,
CHANGENR TYPE CDPOS-CHANGENR,
TABNAME TYPE CDPOS-TABNAME,
TABKEY TYPE CDPOS-TABKEY,
FNAME TYPE CDPOS-FNAME,
CHNGIND TYPE CDPOS-CHNGIND,
TEXT_CASE TYPE CDPOS-TEXT_CASE,
UNIT_OLD TYPE CDPOS-UNIT_OLD,
UNIT_NEW TYPE CDPOS-UNIT_NEW,
CUKY_OLD TYPE CDPOS-CUKY_OLD,
CUKY_NEW TYPE CDPOS-CUKY_NEW,
VALUE_NEW TYPE CDPOS-VALUE_NEW,
VALUE_OLD TYPE CDPOS-VALUE_OLD,
END OF TS_CDPOS.
DATA: IT_CDPOS TYPE STANDARD TABLE OF TS_CDPOS .
DATA: WA_CDPOS TYPE TS_CDPOS .
DATA:  LV_CDPOS TYPE STRING.
TYPES: BEGIN OF TS_E070,
TRKORR TYPE E070-TRKORR,
TRFUNCTION TYPE E070-TRFUNCTION,
TRSTATUS TYPE E070-TRSTATUS,
TARSYSTEM TYPE E070-TARSYSTEM,
KORRDEV TYPE E070-KORRDEV,
AS4USER TYPE E070-AS4USER,
AS4DATE TYPE E070-AS4DATE,
AS4TIME TYPE E070-AS4TIME,
STRKORR TYPE E070-STRKORR,
END OF TS_E070.
DATA: IT_E070 TYPE STANDARD TABLE OF TS_E070 .
DATA: WA_E070 TYPE TS_E070 .
DATA:  LV_E070 TYPE STRING.

TYPES: BEGIN OF TS_E07T,
TRKORR TYPE E07T-TRKORR,
LANGU TYPE E07T-LANGU,
AS4TEXT TYPE E07T-AS4TEXT,
END OF TS_E07T.
DATA: IT_E07T TYPE STANDARD TABLE OF TS_E07T .
DATA: WA_E07T TYPE TS_E07T .
DATA:  LV_E07T TYPE STRING.

TYPES: BEGIN OF TS_SSM_CIDT,
TABNAME TYPE SSM_CIDT-TABNAME,
ID TYPE SSM_CIDT-ID,
STEXT TYPE SSM_CIDT-STEXT,
LANGU TYPE SSM_CIDT-LANGU,
END OF TS_SSM_CIDT.
DATA: IT_SSM_CIDT TYPE STANDARD TABLE OF TS_SSM_CIDT .
DATA: WA_SSM_CIDT TYPE TS_SSM_CIDT .
DATA:  LV_SSM_CIDT TYPE STRING.

TYPES: BEGIN OF TS_TPALOG,
TRTIME TYPE TPALOG-TRTIME,
TRKORR TYPE TPALOG-TRKORR,
TARSYSTEM TYPE TPALOG-TARSYSTEM,
TRCLI TYPE TPALOG-TRCLI,
TRSTEP TYPE TPALOG-TRSTEP,
ALLCLI TYPE TPALOG-ALLCLI,
PROJECT TYPE TPALOG-PROJECT,
TRUSER TYPE TPALOG-TRUSER,
RETCODE TYPE TPALOG-RETCODE,
HOST TYPE TPALOG-HOST,
ADMIN TYPE TPALOG-ADMIN,
TPSTAT_KEY TYPE TPALOG-TPSTAT_KEY,
END OF TS_TPALOG.
DATA: IT_TPALOG TYPE STANDARD TABLE OF TS_TPALOG .
DATA: WA_TPALOG TYPE TS_TPALOG .
DATA:  LV_TPALOG TYPE STRING.
TYPES: BEGIN OF TS_PRGN_CUST,
ID TYPE PRGN_CUST-ID,
PATH TYPE PRGN_CUST-PATH,
END OF TS_PRGN_CUST.
DATA: IT_PRGN_CUST TYPE STANDARD TABLE OF TS_PRGN_CUST .
DATA: WA_PRGN_CUST TYPE TS_PRGN_CUST .
DATA:  LV_PRGN_CUST TYPE STRING.

*Extracting Version Specific tables*
DATA: ISTABLE_SEC_POLICY_RT TYPE STRING.
TABLES: DD02L.
SELECT * FROM DD02L
WHERE TABNAME  = 'SEC_POLICY_RT' AND TABCLASS <> 'VIEW'.
ENDSELECT.
IF SY-SUBRC = 0.
  ISTABLE_SEC_POLICY_RT = 'Yes'.
ELSE.
  ISTABLE_SEC_POLICY_RT = 'No'.
ENDIF.

IF ISTABLE_SEC_POLICY_RT = 'Yes'.
  TYPES: BEGIN OF TS_SEC_POLICY_RT,
  CLIENT(3) TYPE C,
  NAME(40) TYPE C,
  ATTRIB_KEY(40) TYPE C,
  ATTRIB_VALUE TYPE INT4,
  END OF TS_SEC_POLICY_RT.
  DATA: IT_SEC_POLICY_RT TYPE STANDARD TABLE OF TS_SEC_POLICY_RT .
  DATA: WA_SEC_POLICY_RT TYPE TS_SEC_POLICY_RT .
  DATA:  LV_SEC_POLICY_RT TYPE STRING.
ENDIF.

*Extracting Version Specific tables*
DATA: ISTABLE_SEC_POLICY_CUSTT TYPE STRING.

SELECT * FROM DD02L
WHERE TABNAME  = 'SEC_POLICY_CUSTT' AND TABCLASS <> 'VIEW'.
ENDSELECT.
IF SY-SUBRC = 0.
  ISTABLE_SEC_POLICY_CUSTT = 'Yes'.
ELSE.
  ISTABLE_SEC_POLICY_CUSTT = 'No'.
ENDIF.

IF ISTABLE_SEC_POLICY_CUSTT = 'Yes'.
  TYPES: BEGIN OF TS_SEC_POLICY_CUSTT,
  CLIENT(3) TYPE C,
  LANGU TYPE LANG,
  POLICY_NAME(40) TYPE C,
  POLICY_TEXT(60) TYPE C,
  END OF TS_SEC_POLICY_CUSTT.
  DATA: IT_SEC_POLICY_CUSTT TYPE STANDARD TABLE OF TS_SEC_POLICY_CUSTT .
  DATA: WA_SEC_POLICY_CUSTT TYPE TS_SEC_POLICY_CUSTT .
  DATA:  LV_SEC_POLICY_CUSTT TYPE STRING.
ENDIF.
*ACTTSAP12.1 Adding Tables *
TYPES: BEGIN OF TS_TSL1D,
AREA TYPE TSL1D-AREA,
SUBID TYPE TSL1D-SUBID,
CLASID TYPE TSL1D-CLASID,
SUBCLASID TYPE TSL1D-SUBCLASID,
SEVERITY TYPE TSL1D-SEVERITY,
MONBEW TYPE TSL1D-MONBEW,
MONKAT TYPE TSL1D-MONKAT,
END OF TS_TSL1D.
DATA: IT_TSL1D TYPE STANDARD TABLE OF TS_TSL1D .
DATA: WA_TSL1D TYPE TS_TSL1D .
DATA:  LV_TSL1D TYPE STRING.
TYPES: BEGIN OF TS_TSL1T,
SPRAS TYPE TSL1T-SPRAS,
AREA TYPE TSL1T-AREA,
SUBID TYPE TSL1T-SUBID,
TXT TYPE TSL1T-TXT,
END OF TS_TSL1T.
DATA: IT_TSL1T TYPE STANDARD TABLE OF TS_TSL1T .
DATA: WA_TSL1T TYPE TS_TSL1T .
DATA:  LV_TSL1T TYPE STRING.

*ACTTSAP12.0 Adding Date for Change Log*
DATA: DATE_START TYPE D.
DATE_START = SY-DATUM - 548.
*#ACTTSAP12.0 Release 12.0 Changes End *

TYPES: TT_TEXT_TABLE TYPE STANDARD TABLE OF STRING WITH DEFAULT KEY. "Added by SUDHA
DATA: LV_FILE TYPE STRING ,
  LT_TABLE TYPE TT_TEXT_TABLE  ,
*  LV_HEAD TYPE CHAR70 VALUE 'DO NOT USE UNLESS SPECIFIED BY DELOITTE' ,
  LS_TABLE TYPE STRING.
DATA : LV_DATASET TYPE RLGRAP-FILENAME .
PARAMETERS RB_BACK RADIOBUTTON GROUP RAD1  DEFAULT 'X'.
PARAMETERS RB_FORE RADIOBUTTON GROUP RAD1 .
PARAMETERS S_PCLIEN TYPE TS_AGR_1016-MANDT OBLIGATORY.
PARAMETERS S_START LIKE SY-DATUM OBLIGATORY.
PARAMETERS P_FILE(1024) TYPE C LOWER CASE.

****  Begin Change by Madhuri - UI changes  *****
SELECTION-SCREEN SKIP 5 .
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME . "TITLE LV_HEAD .
SELECTION-SCREEN COMMENT /2(70) LV_HEAD MODIF ID M1 .
SELECTION-SCREEN SKIP 1 .
****  End Change by Madhuri - UI changes  *****
PARAMETERS: CK_POP AS CHECKBOX DEFAULT '' .
SELECT-OPTIONS P_TABLES FOR DD02L-TABNAME .
PARAMETERS: P_MSIZE TYPE CHAR20 DEFAULT '100000'. "Added by SUDHA
****  Begin Change by Madhuri - UI changes  *****
SELECTION-SCREEN END OF BLOCK B1 .
****  End Change by Madhuri - UI changes  *****

DATA: WA_P_TABLES TYPE RSPARAMS .

*#ACTTSAP12.0 To Add Option for Population Exclusion
*Data: CK_POP Type String.
*CK_POP = 'X'.
*#ACTTSAP12.0 To Add Option for Population Exclusion

*#ACTTSAP12.0 To remove Exclude Profile option
*PARAMETERS: CK_PROF AS CHECKBOX.
DATA: CK_PROF TYPE STRING.
CK_PROF = ''.
*#ACTTSAP12.0 End of Exclude Profile Option

*Old Report Code Begin*
*&---------------------------------------------------------------------*
*& Structure Declarations
*&---------------------------------------------------------------------*
*    String table
TYPES:BEGIN OF TY_STR_1906,
      STR TYPE STRING,
     END OF TY_STR_1906,
*   structure declaration for parameter names.
    BEGIN OF TY_T000_1906,
    CLIENT(10) TYPE C,
    END OF TY_T000_1906,
*   Structure declaration for Displaying the output data
    BEGIN OF TY_OUTPUT_1906,
    CLIENT(10) TYPE C,
    USER(20) TYPE C,
    PWSTATUS(90) TYPE C,
    END OF TY_OUTPUT_1906,
*   structure declaration for USR02.
    BEGIN OF TY_USR02_1906.
        INCLUDE STRUCTURE USR02.
TYPES : END OF TY_USR02_1906.




TYPES: BEGIN OF TY_USR02,
       MANDT TYPE MANDT,
       BNAME TYPE BNAME,
       BCODE TYPE XUCODE,
       CODVN TYPE XUCODEVERS,
       PASSCODE TYPE USR02-PASSCODE,
       END OF TY_USR02.





DATA : T_T000_1906 TYPE STANDARD TABLE OF TY_T000_1906,
       T_OUTPUT_1906 TYPE STANDARD TABLE OF TY_OUTPUT_1906,
       T_USR02_1906 TYPE STANDARD TABLE OF TY_USR02_1906,
       T_STR_1906 TYPE STANDARD TABLE OF TY_STR_1906,
       T_USR02 TYPE STANDARD TABLE OF TY_USR02.


*&---------------------------------------------------------------------*
*& Internal table Declarations
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Work area Declarations
*&---------------------------------------------------------------------*
*    Work area declaration for string table
DATA :  W_STR_1906 TYPE TY_STR_1906,

*    Work area declaration for final output table
     W_OUTPUT_1906 TYPE TY_OUTPUT_1906,

*    Work area declaration for Tolerance limits
     W_T000_1906 TYPE  TY_T000_1906,
*&---------------------------------------------------------------------*
*& Variables Declarations
*&---------------------------------------------------------------------*
P_1906 TYPE STRING .
**Variable declarations.
DATA: SAPSTAR_VALUE_1906(60) TYPE C.
* Hashvalues of default passwords
DATA:
**** begin of change by madhuri - 2/29/2016
        CODEAS1_1906 LIKE USR02-BCODE VALUE 'C75E6D9600AB5710',
        CODEAS2_1906 LIKE USR02-BCODE VALUE '5F1000863FC70B6D',
        CODEAD1_1906 LIKE USR02-BCODE VALUE 'C7CC6D670030F310',
        CODEAD2_1906 LIKE USR02-BCODE VALUE '5FA752863FB70BA9',
        CODEACP_1906 LIKE USR02-BCODE VALUE 'FC49DBF6F3FDCF36',
        CODEAEW_1906 LIKE USR02-BCODE VALUE '13C810002A147DEE',
        CODEBS1_1906 LIKE USR02-BCODE VALUE 'D0BFF4276DA1E208',
        CODEBS2_1906 LIKE USR02-BCODE VALUE '4B31EAA71FDDEAE2',
        CODEBD1_1906 LIKE USR02-BCODE VALUE '9A32C3A07A595E4E',
        CODEBD2_1906 LIKE USR02-BCODE VALUE '61D26428640DBAB5',
        CODEBCP_1906 LIKE USR02-BCODE VALUE '7D806C248F03813D',
        CODEBEW_1906 LIKE USR02-BCODE VALUE 'BD5E494D3ECBF5E2',
        CODETMS1A_1906 LIKE USR02-BCODE VALUE '7671D2F2729F27F0',
        CODETMS1B_1906 LIKE USR02-BCODE VALUE '942B9DC0F2394D85',
        CODETMS2A_1906 LIKE USR02-BCODE VALUE '05CB79BE189802A0',
        CODETMS2B_1906 LIKE USR02-BCODE VALUE 'B7E2F82C0A3E54C4'.

CONSTANTS:
 LC_EARLYD TYPE XUCODE VALUE '573822832DF89B9C', "
 LC_EARLYE TYPE XUCODE VALUE 'B3ADDFE95DCD036F',
 LC_EARLYF1 TYPE HASH160X VALUE '924127D88EE3C1820A2C88495EC4825E819C9249',
 LC_EARLYF2 TYPE HASH160X VALUE '760293CCD7AC111298A7AC70D3304242E442320F',
 LC_SAPCPICD TYPE XUCODE VALUE '35C7AB28316EA22F',
 LC_SAPCPICE TYPE XUCODE VALUE '5A5F45726821A147',
 LC_SAPCPICF1 TYPE HASH160X VALUE '57CF364A7D83FA563025C7BCFFFB3B579DFB23F3',
 LC_SAPCPICF2 TYPE HASH160X VALUE '38AE55102813F3BBBC3B3BCA09285ED5A9E0423F',
 LC_DDICD TYPE XUCODE VALUE 'DCA44BB71C073A05',
 LC_DDICE TYPE XUCODE VALUE '08FA7683A46D9AA9',
 LC_DDICF TYPE HASH160X VALUE '905F5E6CE67B7C60D0F7BA9C4063AAF0D8602B45',
 LC_SAA TYPE XUCODE VALUE 'C75E6D9600AB5710',
 LC_SAPD TYPE XUCODE VALUE 'A83ECB9EC4D34C08',
 LC_SAPE TYPE XUCODE VALUE '95984B6A25BA20E9',
 LC_SAPI TYPE HASH160X VALUE '8948310AF768FA9061598E8F68FD144CE65B7480',
 LC_TMS1A TYPE XUCODE VALUE '7671D2F2729F27F0',
 LC_TMS1B TYPE XUCODE VALUE '942B9DC0F2394D85',
 LC_TMSD1 TYPE XUCODE VALUE '7C6433CE69099272',
 LC_TMSE1 TYPE XUCODE VALUE '940BAB0E12A36DC2',
 LC_TMSADM1  TYPE HASH160X VALUE 'C9AA19DA354DC8397D7AC8EA8B4C04DF49CB58FF',
 LC_TMSD2 TYPE XUCODE VALUE '4DD4438D3C19138C',
 LC_TMSADM2  TYPE HASH160X VALUE 'A6BF38EE57F90B78C8D88A5212BBF1BA9A966ABB'.


**** end of change by madhuri - 2/29/2016

*** Begin of addition by Sudha
""Total number of records per select is MAXSIZE (from JSON)
DATA: MAXSIZE TYPE CHAR10,
    S_CURSOR TYPE CURSOR.
*** End of addition by Sudha


FIELD-SYMBOLS : <FS_USR02> TYPE TY_USR02.
*Old Report Code End*


INITIALIZATION .
  %_S_PCLIEN_%_APP_%-TEXT = 'Client' .
  %_S_START_%_APP_%-TEXT = 'Enter Start Date for Audit' .
  %_RB_FORE_%_APP_%-TEXT = 'Foreground Processing : ' .
  %_RB_BACK_%_APP_%-TEXT = 'Background Processing' .
  %_P_FILE_%_APP_%-TEXT = 'Enter File Path : ' .
  %_CK_POP_%_APP_%-TEXT = 'Expert Mode - DO NOT SELECT'.
  %_P_TABLES_%_APP_%-TEXT = 'Enter Table List (Expert Mode) : ' .
  %_P_MSIZE_%_APP_%-TEXT = 'Table Partition Record Count : ' .

  LV_HEAD = 'DO NOT USE UNLESS SPECIFIED BY DELOITTE' .         "Madhuri - UI change

*#ACTTSAP12.0 Release 12.0 Changes Begin *
* Hide Exclude Profiles Checkbix*
*    %_CK_PROF_%_APP_%-TEXT = 'Exclude Profiles'.
*#ACTTSAP12.0 Release 12.0 Changes End *

****  Begin of Change by Madhuri for UI      ****
AT SELECTION-SCREEN OUTPUT .
  LOOP AT SCREEN.
    IF SCREEN-GROUP1 = 'M1'.
      SCREEN-INTENSIFIED = '1'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
****  End of Change by Madhuri for UI      ****

START-OF-SELECTION.
  DATA:
  LV_SEP TYPE C .
  FIND '/' IN P_FILE .
  IF SY-SUBRC NE 0 .
    FIND '\' IN P_FILE.
    IF SY-SUBRC NE 0 .
      MESSAGE 'Incorrect File Path. Please check your entry.' TYPE 'E' .
    ELSE.
      LV_SEP = '\' .
    ENDIF.
  ELSE.
    LV_SEP = '/' .
  ENDIF.
  LV_LEN = STRLEN( P_FILE ) - 1 .
  IF P_FILE+LV_LEN(1) NE LV_SEP .
    CONCATENATE P_FILE LV_SEP INTO P_FILE.
  ENDIF.
  CLEAR LV_LEN .
  LV_TIME1 = SY-UZEIT .

*** Begin of addition by SUDHA
  MAXSIZE = P_MSIZE.
  IF MAXSIZE IS INITIAL.
    MESSAGE 'Please enter Maxsize' TYPE 'E'.
  ENDIF.
*** End of addition by SUDHA

*** Begin of change by SUDHA
*  SELECT
*  mandt
*  agr_name
*  profile
*  generated
*  pstate
*  FROM agr_1016  CLIENT SPECIFIED
*  INTO TABLE it_agr_1016
*  WHERE mandt =  s_pclien.

  OPEN CURSOR WITH HOLD S_CURSOR FOR
   SELECT
   MANDT
   AGR_NAME
   PROFILE
   GENERATED
   PSTATE
   FROM AGR_1016  CLIENT SPECIFIED
*  INTO TABLE it_agr_1016
   WHERE MANDT =  S_PCLIEN.

  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_1016
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA


  LV_FILE = 'AGR_1016.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_AGR_1016-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AGR_NAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROFILE' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-PROFILE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GENERATED' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-GENERATED
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PSTATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1016-PSTATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_1016 = LINES( IT_AGR_1016 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_1016
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_1016 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  AGR_NAME
  COUNTER
  AUTH
  OBJECT
  FIELD
  LOW
  HIGH
  MODIFIED
  DELETED
  FROM AGR_1251  CLIENT SPECIFIED
*INTO TABLE it_agr_1251
*#ACTTSAP12.0 Added Deleted Filter*  *#ACTTSAP12.0 Added Deleted Filter*
  WHERE MANDT =  S_PCLIEN AND DELETED <> 'X'.

  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_1251
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA

  .
  LV_FILE = 'AGR_1251.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_AGR_1251-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AGR_NAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'COUNTER' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-COUNTER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AUTH' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-AUTH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-OBJECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FIELD' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-FIELD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LOW' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-LOW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HIGH' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-HIGH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODIFIED' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-MODIFIED
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DELETED' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1251-DELETED
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_1251 = LINES( IT_AGR_1251 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_1251
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_1251 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
    SELECT
    HIGH
    LOW
    VARBL
    COUNTER
    AGR_NAME
    MANDT
    FROM AGR_1252  CLIENT SPECIFIED
*  INTO TABLE it_agr_1252
    WHERE MANDT =  S_PCLIEN
    .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_1252
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.

*** End of change by SUDHA
  LV_FILE = 'AGR_1252.ACTT'.
  LS_TABLE = 'HIGH'.
  DESCRIBE FIELD WA_AGR_1252-HIGH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LOW' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-LOW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'VARBL' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-VARBL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'COUNTER' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-COUNTER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AGR_NAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_1252-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_1252 = LINES( IT_AGR_1252 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_1252
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_1252 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  AGR_NAME
  CHILD_AGR
  ATTRIBUTES
  FROM AGR_AGRS  CLIENT SPECIFIED
*  INTO TABLE it_agr_agrs
  WHERE MANDT =  S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_AGRS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'AGR_AGRS.ACTT'.
  LS_TABLE = 'mandt'.
  DESCRIBE FIELD WA_AGR_AGRS-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'agr_name' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_AGRS-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'child_agr' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_AGRS-CHILD_AGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'attributes' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_AGRS-ATTRIBUTES
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_AGRS = LINES( IT_AGR_AGRS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_AGRS
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_AGRS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
    SELECT
    MANDT
    AGR_NAME
    UNAME
    FROM_DAT
    TO_DAT
    EXCLUDE
    ORG_FLAG
    COL_FLAG
    FROM AGR_USERS  CLIENT SPECIFIED
*  INTO TABLE it_agr_users
    WHERE MANDT =  S_PCLIEN
    .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_USERS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'AGR_USERS.ACTT'.
  LS_TABLE = 'mandt'.
  DESCRIBE FIELD WA_AGR_USERS-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'agr_name' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'uname' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-UNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'from_dat' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-FROM_DAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'to_dat' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-TO_DAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'exclude' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-EXCLUDE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'org_flag' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-ORG_FLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'col_flag' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_USERS-COL_FLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_USERS = LINES( IT_AGR_USERS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_USERS
    USING LV_FILE
    LS_TABLE .
    FREE IT_AGR_USERS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XUNTV
  XSPEA
  NUMKR
  MANDT
  KTOGR
  FELEI
  ANLKL
  ANEQK
  FROM ANKA  CLIENT SPECIFIED
  INTO TABLE IT_ANKA
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'ANKA.ACTT'.
  LS_TABLE = 'XUNTV'.
  DESCRIBE FIELD WA_ANKA-XUNTV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XSPEA' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKA-XSPEA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NUMKR' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKA-NUMKR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKA-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOGR' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKA-KTOGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FELEI' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKA-FELEI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ANLKL' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKA-ANLKL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ANEQK' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKA-ANEQK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_ANKA = LINES( IT_ANKA ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_ANKA
    USING LV_FILE
    LS_TABLE .
    FREE IT_ANKA .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  ANLKL
  MANDT
  SPRAS
  TXK50
  FROM ANKT  CLIENT SPECIFIED
  INTO TABLE IT_ANKT
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'ANKT.ACTT'.
  LS_TABLE = 'ANLKL'.
  DESCRIBE FIELD WA_ANKT-ANLKL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TXK50' INTO LS_TABLE.
  DESCRIBE FIELD WA_ANKT-TXK50
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_ANKT = LINES( IT_ANKT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_ANKT
    USING LV_FILE
    LS_TABLE .
    FREE IT_ANKT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  CWBUSER
  PRSTATUS
  NTSTATUS
  NUMM
  FROM CWBNTCUST
  INTO TABLE IT_CWBNTCUST
  .
  LV_FILE = 'CWBNTCUST.ACTT'.
  LS_TABLE = 'CWBUSER'.
  DESCRIBE FIELD WA_CWBNTCUST-CWBUSER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PRSTATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_CWBNTCUST-PRSTATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NTSTATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_CWBNTCUST-NTSTATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NUMM' INTO LS_TABLE.
  DESCRIBE FIELD WA_CWBNTCUST-NUMM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_CWBNTCUST = LINES( IT_CWBNTCUST ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_CWBNTCUST
    USING LV_FILE
    LS_TABLE .
    FREE IT_CWBNTCUST .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
*  SELECT
*  NUMM
*  INCOMPLETE
*  FROM CWBNTHEAD
*  INTO TABLE IT_CWBNTHEAD
*  .
*  LV_FILE = 'CWBNTHEAD.ACTT'.
*  LS_TABLE = 'NUMM'.
*  DESCRIBE FIELD WA_CWBNTHEAD-NUMM
*  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
*  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
*  CONCATENATE LS_TABLE '|^|' 'INCOMPLETE' INTO LS_TABLE.
*  DESCRIBE FIELD WA_CWBNTHEAD-INCOMPLETE
*  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
*  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
*  LV_CWBNTHEAD = LINES( IT_CWBNTHEAD ) .
*  IF SY-SUBRC = 0.
*    PERFORM CONV_TABLE_TO_TEXT TABLES IT_CWBNTHEAD
*    USING LV_FILE
*    LS_TABLE .
*    FREE IT_CWBNTHEAD .
*    CLEAR LT_TABLE .
*    CLEAR LS_TABLE .
*  ELSE.
*    APPEND LS_TABLE TO LT_TABLE .
*    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
*    CLEAR LT_TABLE .
*    CLEAR LS_TABLE .
*  ENDIF.
  SELECT
  FIELDNAME
  ROLLNAME
  TABNAME
  FROM DD03L
  INTO TABLE IT_DD03L
  WHERE ( TABNAME IN ('T095', 'T095B', 'ANLZ') )
  .
  LV_FILE = 'DD03L.ACTT'.
  LS_TABLE = 'FIELDNAME'.
  DESCRIBE FIELD WA_DD03L-FIELDNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ROLLNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD03L-ROLLNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TABNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD03L-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DD03L = LINES( IT_DD03L ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DD03L
    USING LV_FILE
    LS_TABLE .

    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  LOGFLAG
  ROLLNAME
  FROM DD04L
  INTO TABLE IT_DD04L
  FOR ALL ENTRIES IN IT_DD03L
  WHERE ROLLNAME = IT_DD03L-ROLLNAME
  .
  LV_FILE = 'DD04L.ACTT'.
  LS_TABLE = 'LOGFLAG'.
  DESCRIBE FIELD WA_DD04L-LOGFLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ROLLNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD04L-ROLLNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DD04L = LINES( IT_DD04L ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DD04L
    USING LV_FILE
    LS_TABLE .
    FREE IT_DD04L .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SCRTEXT_S
  DDLANGUAGE
  ROLLNAME
  FROM DD04T
  INTO TABLE IT_DD04T
  FOR ALL ENTRIES IN IT_DD03L
  WHERE ROLLNAME = IT_DD03L-ROLLNAME
  AND DDLANGUAGE = 'EN'
  .
  LV_FILE = 'DD04T.ACTT'.
  LS_TABLE = 'SCRTEXT_S'.
  DESCRIBE FIELD WA_DD04T-SCRTEXT_S
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DDLANGUAGE' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD04T-DDLANGUAGE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ROLLNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD04T-ROLLNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DD04T = LINES( IT_DD04T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DD04T
    USING LV_FILE
    LS_TABLE .
    FREE IT_DD04T .
    FREE IT_DD03L .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TABNAME
  PROTOKOLL
  AS4LOCAL
  FROM DD09L
  INTO TABLE IT_DD09L
  WHERE ( TABNAME IN ('T095', 'T095B', 'ANLZ', 'T000', 'DEVACCESS' ,
     'T001B', 'TCURR', 'T169G', 'T001', 'TADIR', 'PAHI')
    )
  .
  LV_FILE = 'DD09L.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_DD09L-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROTOKOLL' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD09L-PROTOKOLL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AS4LOCAL' INTO LS_TABLE.
  DESCRIBE FIELD WA_DD09L-AS4LOCAL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DD09L = LINES( IT_DD09L ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DD09L
    USING LV_FILE
    LS_TABLE .
    FREE IT_DD09L .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  ACCESSKEY
  UNAME
  FROM DEVACCESS
  INTO TABLE IT_DEVACCESS
  .
  LV_FILE = 'DEVACCESS.ACTT'.
  LS_TABLE = 'ACCESSKEY'.
  DESCRIBE FIELD WA_DEVACCESS-ACCESSKEY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_DEVACCESS-UNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DEVACCESS = LINES( IT_DEVACCESS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DEVACCESS
    USING LV_FILE
    LS_TABLE .
    FREE IT_DEVACCESS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XRUEV
  XRUEM
  MANDT
  LFMON
  LFGJA
  BUKRS
  FROM MARV  CLIENT SPECIFIED
  INTO TABLE IT_MARV
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'MARV.ACTT'.
  LS_TABLE = 'XRUEV'.
  DESCRIBE FIELD WA_MARV-XRUEV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XRUEM' INTO LS_TABLE.
  DESCRIBE FIELD WA_MARV-XRUEM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_MARV-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LFMON' INTO LS_TABLE.
  DESCRIBE FIELD WA_MARV-LFMON
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LFGJA' INTO LS_TABLE.
  DESCRIBE FIELD WA_MARV-LFGJA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_MARV-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_MARV = LINES( IT_MARV ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_MARV
    USING LV_FILE
    LS_TABLE .
    FREE IT_MARV .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  CLIENT
  TOYEAR
  TONUMBER
  SUBOBJECT
  OBJECT
  NRRANGENR
  NRLEVEL
  FROMNUMBER
  EXTERNIND
  FROM NRIV  CLIENT SPECIFIED
  INTO TABLE IT_NRIV
  WHERE CLIENT =  S_PCLIEN AND ( OBJECT IN ('ANLAGENNR', 'RF_BELEG') )
  .
  LV_FILE = 'NRIV.ACTT'.
  LS_TABLE = 'CLIENT'.
  DESCRIBE FIELD WA_NRIV-CLIENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOYEAR' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-TOYEAR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TONUMBER' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-TONUMBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBOBJECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-SUBOBJECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-OBJECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NRRANGENR' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-NRRANGENR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NRLEVEL' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-NRLEVEL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FROMNUMBER' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-FROMNUMBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'EXTERNIND' INTO LS_TABLE.
  DESCRIBE FIELD WA_NRIV-EXTERNIND
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_NRIV = LINES( IT_NRIV ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_NRIV
    USING LV_FILE
    LS_TABLE .
    FREE IT_NRIV .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SYSTEMID
  PARVALUE
  PARTYPE
  PARSTATE
  PARNAME
  PARDATE
  HOSTNAME
  FROM PAHI
  INTO TABLE IT_PAHI
  .
  LV_FILE = 'PAHI.ACTT'.
  LS_TABLE = 'SYSTEMID'.
  DESCRIBE FIELD WA_PAHI-SYSTEMID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARVALUE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARVALUE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARTYPE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARTYPE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARSTATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARSTATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARDATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-PARDATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HOSTNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAHI-HOSTNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_PAHI = LINES( IT_PAHI ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_PAHI
    USING LV_FILE
    LS_TABLE .
    FREE IT_PAHI .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  KTOPL
  MANDT
  SAKNR
  SPRAS
  TXT50
  FROM SKAT  CLIENT SPECIFIED
  INTO TABLE IT_SKAT
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'SKAT.ACTT'.
  LS_TABLE = 'KTOPL'.
  DESCRIBE FIELD WA_SKAT-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_SKAT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SAKNR' INTO LS_TABLE.
  DESCRIBE FIELD WA_SKAT-SAKNR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_SKAT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TXT50' INTO LS_TABLE.
  DESCRIBE FIELD WA_SKAT-TXT50
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_SKAT = LINES( IT_SKAT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_SKAT
    USING LV_FILE
    LS_TABLE .
    FREE IT_SKAT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  CCCATEGORY
  CCCOPYLOCK
  CCCORACTIV
  CCNOCLIIND
  MANDT
  MTEXT
  CHANGEDATE
  FROM T000
  INTO TABLE IT_T000
  .
  LV_FILE = 'T000.ACTT'.
  LS_TABLE = 'CCCATEGORY'.
  DESCRIBE FIELD WA_T000-CCCATEGORY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCCOPYLOCK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CCCOPYLOCK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCCORACTIV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CCCORACTIV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCNOCLIIND' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CCNOCLIIND
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-MTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CHANGEDATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T000-CHANGEDATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T000 = LINES( IT_T000 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T000
    USING LV_FILE
    LS_TABLE .
    FREE IT_T000 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XPROD
  XNEGP
  XGSBE
  WAERS
  WAABW
  PERIV
  ORT01
  OPVAR
  MANDT
  LAND1
  KTOPL
  KKBER
  BUTXT
  BUKRS
  FROM T001  CLIENT SPECIFIED
  INTO TABLE IT_T001
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T001.ACTT'.
  LS_TABLE = 'XPROD'.
  DESCRIBE FIELD WA_T001-XPROD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XNEGP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-XNEGP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XGSBE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-XGSBE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WAERS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-WAERS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WAABW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-WAABW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PERIV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-PERIV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ORT01' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-ORT01
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OPVAR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-OPVAR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LAND1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-LAND1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KKBER' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-KKBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-BUTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T001 = LINES( IT_T001 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T001
    USING LV_FILE
    LS_TABLE .
    FREE IT_T001 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  VKONT
  TOYE2
  TOYE1
  TOPE2
  TOPE1
  RRCTY
  MKOAR
  MANDT
  FRYE2
  FRYE1
  FRPE2
  FRPE1
  BUKRS
  BKONT
  FROM T001B  CLIENT SPECIFIED
  INTO TABLE IT_T001B
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T001B.ACTT'.
  LS_TABLE = 'VKONT'.
  DESCRIBE FIELD WA_T001B-VKONT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOYE2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-TOYE2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOYE1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-TOYE1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOPE2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-TOPE2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOPE1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-TOPE1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'RRCTY' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-RRCTY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MKOAR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-MKOAR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FRYE2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-FRYE2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FRYE1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-FRYE1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FRPE2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-FRPE2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FRPE1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-FRPE1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BKONT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001B-BKONT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T001B = LINES( IT_T001B ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T001B
    USING LV_FILE
    LS_TABLE .
    FREE IT_T001B .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  BUKRS
  MANDT
  REINH
  WAERS
  FROM T001R  CLIENT SPECIFIED
  INTO TABLE IT_T001R
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T001R.ACTT'.
  LS_TABLE = 'BUKRS'.
  DESCRIBE FIELD WA_T001R-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001R-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'REINH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001R-REINH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WAERS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001R-WAERS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T001R = LINES( IT_T001R ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T001R
    USING LV_FILE
    LS_TABLE .
    FREE IT_T001R .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  WERKS
  NAME1
  MANDT
  FROM T001W  CLIENT SPECIFIED
  INTO TABLE IT_T001W
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T001W.ACTT'.
  LS_TABLE = 'WERKS'.
  DESCRIBE FIELD WA_T001W-WERKS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NAME1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001W-NAME1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T001W-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T001W = LINES( IT_T001W ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T001W
    USING LV_FILE
    LS_TABLE .
    FREE IT_T001W .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  BLART
  BRGRU
  KOARS
  MANDT
  NUMKR
  STBLA
  XMREF
  XMTXT
  FROM T003  CLIENT SPECIFIED
  INTO TABLE IT_T003
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T003.ACTT'.
  LS_TABLE = 'BLART'.
  DESCRIBE FIELD WA_T003-BLART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BRGRU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003-BRGRU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOARS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003-KOARS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NUMKR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003-NUMKR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STBLA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003-STBLA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XMREF' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003-XMREF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XMTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003-XMTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T003 = LINES( IT_T003 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T003
    USING LV_FILE
    LS_TABLE .
    FREE IT_T003 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  MANDT
  LTEXT
  BLART
  FROM T003T  CLIENT SPECIFIED
  INTO TABLE IT_T003T
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T003T.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_T003T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003T-LTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BLART' INTO LS_TABLE.
  DESCRIBE FIELD WA_T003T-BLART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T003T = LINES( IT_T003T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T003T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T003T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  KTOPL
  MANDT
*->Begin of Custom Code Migration S/4HANA POSTCONVERSION_HANA_DRCS 20.06.2025
  FROM T004  CLIENT SPECIFIED "#EC CI_DB_OPERATION_OK[2389136]
*->End of Custom Code Migration S/4HANA POSTCONVERSION_HANA_DRCS 20.06.2025
  INTO TABLE IT_T004
  WHERE MANDT =  S_PCLIEN  .

  LV_FILE = 'T004.ACTT'.
  LS_TABLE = 'KTOPL'.
  DESCRIBE FIELD WA_T004-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T004-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T004 = LINES( IT_T004 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T004
    USING LV_FILE
    LS_TABLE .
    FREE IT_T004 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  KTOPL
  KTPLT
  MANDT
  SPRAS
  FROM T004T  CLIENT SPECIFIED
  INTO TABLE IT_T004T
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T004T.ACTT'.
  LS_TABLE = 'KTOPL'.
  DESCRIBE FIELD WA_T004T-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTPLT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T004T-KTPLT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T004T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T004T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T004T = LINES( IT_T004T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T004T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T004T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XKALE
  XJABH
  PERIV
  MANDT
  ANZSP
  ANZBP
  FROM T009  CLIENT SPECIFIED
  INTO TABLE IT_T009
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T009.ACTT'.
  LS_TABLE = 'XKALE'.
  DESCRIBE FIELD WA_T009-XKALE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XJABH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009-XJABH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PERIV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009-PERIV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ANZSP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009-ANZSP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ANZBP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009-ANZBP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T009 = LINES( IT_T009 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T009
    USING LV_FILE
    LS_TABLE .
    FREE IT_T009 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  LTEXT
  MANDT
  PERIV
  SPRAS
  FROM T009T  CLIENT SPECIFIED
  INTO TABLE IT_T009T
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T009T.ACTT'.
  LS_TABLE = 'LTEXT'.
  DESCRIBE FIELD WA_T009T-LTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PERIV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009T-PERIV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T009T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T009T = LINES( IT_T009T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T009T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T009T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  KTOSL
  KTOPL
  KONTS
  KONTH
  KOMOK
  BWMOD
  BKLAS
  FROM T030  CLIENT SPECIFIED
  INTO TABLE IT_T030
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T030.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T030-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030-KTOSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KONTS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030-KONTS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KONTH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030-KONTH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOMOK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030-KOMOK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BWMOD' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030-BWMOD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BKLAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030-BKLAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T030 = LINES( IT_T030 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T030
    USING LV_FILE
    LS_TABLE .
    FREE IT_T030 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  BSCHH
  BSCHS
  KTOSL
  MANDT
  UMSKZ
  FROM T030B  CLIENT SPECIFIED
  INTO TABLE IT_T030B
  WHERE KTOSL = 'KDF' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T030B.ACTT'.
  LS_TABLE = 'BSCHH'.
  DESCRIBE FIELD WA_T030B-BSCHH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BSCHS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030B-BSCHS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030B-KTOSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030B-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UMSKZ' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030B-UMSKZ
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T030B = LINES( IT_T030B ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T030B
    USING LV_FILE
    LS_TABLE .
    FREE IT_T030B .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  WAERS
  MANDT
  LSTRV
  LSTRA
  LSREA
  LSBEW
  LKORR
  LHTRV
  LHTRA
  LHREA
  LHBEW
  KTOPL
  HKONT
  CURTP
  FROM T030H  CLIENT SPECIFIED
  INTO TABLE IT_T030H
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T030H.ACTT'.
  LS_TABLE = 'WAERS'.
  DESCRIBE FIELD WA_T030H-WAERS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LSTRV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LSTRV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LSTRA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LSTRA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LSREA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LSREA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LSBEW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LSBEW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LKORR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LKORR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LHTRV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LHTRV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LHTRA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LHTRA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LHREA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LHREA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LHBEW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-LHBEW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HKONT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-HKONT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CURTP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030H-CURTP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T030H = LINES( IT_T030H ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T030H
    USING LV_FILE
    LS_TABLE .
    FREE IT_T030H .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XKOMO
  XDIKO
  XBWMO
  XBKLA
  MANDT
  KTOSL
  KTOPL
  FROM T030R  CLIENT SPECIFIED
  INTO TABLE IT_T030R
  WHERE MANDT =  S_PCLIEN AND ( KTOSL IN ('HRF','HRC','HRA','HRD','HRK') )
  .
  LV_FILE = 'T030R.ACTT'.
  LS_TABLE = 'XKOMO'.
  DESCRIBE FIELD WA_T030R-XKOMO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XDIKO' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030R-XDIKO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XBWMO' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030R-XBWMO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XBKLA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030R-XBKLA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030R-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030R-KTOSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030R-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T030R = LINES( IT_T030R ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T030R
    USING LV_FILE
    LS_TABLE .
    FREE IT_T030R .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  KTEXT
  KTOSL
  KTXT2
  KTXT3
  LTEXT
  SPRAS
  FROM T030W
  INTO TABLE IT_T030W
  WHERE SPRAS = 'EN'
  .
  LV_FILE = 'T030W.ACTT'.
  LS_TABLE = 'KTEXT'.
  DESCRIBE FIELD WA_T030W-KTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030W-KTOSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTXT2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030W-KTXT2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTXT3' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030W-KTXT3
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030W-LTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T030W-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T030W = LINES( IT_T030W ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T030W
    USING LV_FILE
    LS_TABLE .
    FREE IT_T030W .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  ZTERM
  XSKAN
  XKONR
  VRZDE
  TOLER
  TOGRU
  SKTRE
  SKNTS
  SKNTH
  PROZS
  PROZH
  PRAVS
  PRAVH
  PRADS
  PRADH
  MSLRP
  MANDT
  BUKRS
  BETRS
  BETRH
  BEAVS
  BEAVH
  BEADS
  BEADH
  FROM T043G  CLIENT SPECIFIED
  INTO TABLE IT_T043G
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T043G.ACTT'.
  LS_TABLE = 'ZTERM'.
  DESCRIBE FIELD WA_T043G-ZTERM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XSKAN' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-XSKAN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XKONR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-XKONR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'VRZDE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-VRZDE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOLER' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-TOLER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOGRU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-TOGRU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SKTRE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-SKTRE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SKNTS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-SKNTS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SKNTH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-SKNTH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROZS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-PROZS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROZH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-PROZH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PRAVS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-PRAVS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PRAVH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-PRAVH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PRADS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-PRADS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PRADH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-PRADH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSLRP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-MSLRP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BETRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-BETRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BETRH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-BETRH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BEAVS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-BEAVS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BEAVH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-BEAVH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BEADS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-BEADS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BEADH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043G-BEADH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T043G = LINES( IT_T043G ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T043G
    USING LV_FILE
    LS_TABLE .
    FREE IT_T043G .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TXT30
  TOGRU
  SPRAS
  MANDT
  BUKRS
  FROM T043GT  CLIENT SPECIFIED
  INTO TABLE IT_T043GT
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T043GT.ACTT'.
  LS_TABLE = 'TXT30'.
  DESCRIBE FIELD WA_T043GT-TXT30
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOGRU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043GT-TOGRU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043GT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043GT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043GT-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T043GT = LINES( IT_T043GT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T043GT
    USING LV_FILE
    LS_TABLE .
    FREE IT_T043GT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  BETRH
  BETRS
  BUKRS
  MANDT
  MAXBT
  MAXEB
  MAXSK
  PROZH
  PROZS
  RFPRO
  SKNTH
  SKNTS
  FROM T043T  CLIENT SPECIFIED
  INTO TABLE IT_T043T
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T043T.ACTT'.
  LS_TABLE = 'BETRH'.
  DESCRIBE FIELD WA_T043T-BETRH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BETRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-BETRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MAXBT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-MAXBT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MAXEB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-MAXEB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MAXSK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-MAXSK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROZH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-PROZH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROZS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-PROZS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'RFPRO' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-RFPRO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SKNTH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-SKNTH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SKNTS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T043T-SKNTS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T043T = LINES( IT_T043T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T043T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T043T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  KOART
  FELDN
  FROM T055F  CLIENT SPECIFIED
  INTO TABLE IT_T055F
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T055F.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T055F-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOART' INTO LS_TABLE.
  DESCRIBE FIELD WA_T055F-KOART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FELDN' INTO LS_TABLE.
  DESCRIBE FIELD WA_T055F-FELDN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T055F = LINES( IT_T055F ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T055F
    USING LV_FILE
    LS_TABLE .
    FREE IT_T055F .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  KTOKD
  FAUSA
  FAUSF
  FAUSV
  FAUS1
  FAUSW
  FAUSG
  FAUS2
  FAUSU
  FROM T077D  CLIENT SPECIFIED
  INTO TABLE IT_T077D
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T077D.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T077D-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOKD' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-KTOKD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUSA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSF' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUSF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSV' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUSV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUS1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUSW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUSG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUS2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077D-FAUSU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T077D = LINES( IT_T077D ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T077D
    USING LV_FILE
    LS_TABLE .
    FREE IT_T077D .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  KTOKK
  FAUSU
  FAUSX
  FAUSN
  FAUSG
  FAUST
  FAUSW
  FAUSA
  FAUSM
  FAUSF
  FAUS2
  FAUS1
  FROM T077K  CLIENT SPECIFIED
  INTO TABLE IT_T077K
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T077K.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T077K-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOKK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-KTOKK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSX' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSN' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUST' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSM' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUSF' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUSF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUS2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077K-FAUS1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T077K = LINES( IT_T077K ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T077K
    USING LV_FILE
    LS_TABLE .
    FREE IT_T077K .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  SPRAS
  KTOKD
  TXT30
  FROM T077X  CLIENT SPECIFIED
  INTO TABLE IT_T077X
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T077X.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T077X-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077X-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOKD' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077X-KTOKD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TXT30' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077X-TXT30
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T077X = LINES( IT_T077X ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T077X
    USING LV_FILE
    LS_TABLE .
    FREE IT_T077X .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TXT30
  SPRAS
  MANDT
  KTOKK
  FROM T077Y  CLIENT SPECIFIED
  INTO TABLE IT_T077Y
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T077Y.ACTT'.
  LS_TABLE = 'TXT30'.
  DESCRIBE FIELD WA_T077Y-TXT30
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077Y-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077Y-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOKK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T077Y-KTOKK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T077Y = LINES( IT_T077Y ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T077Y
    USING LV_FILE
    LS_TABLE .
    FREE IT_T077Y .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FEGTB
  FELEI
  MANDT
  FROM T082A  CLIENT SPECIFIED
  INTO TABLE IT_T082A
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T082A.ACTT'.
  LS_TABLE = 'FEGTB'.
  DESCRIBE FIELD WA_T082A-FEGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FELEI' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082A-FELEI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082A-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T082A = LINES( IT_T082A ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T082A
    USING LV_FILE
    LS_TABLE .
    FREE IT_T082A .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FEGLG
  FEGRU
  FEGTB
  FROM T082B
  INTO TABLE IT_T082B
  .
  LV_FILE = 'T082B.ACTT'.
  LS_TABLE = 'FEGLG'.
  DESCRIBE FIELD WA_T082B-FEGLG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGRU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082B-FEGRU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGTB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082B-FEGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T082B = LINES( IT_T082B ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T082B
    USING LV_FILE
    LS_TABLE .
    FREE IT_T082B .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  INGEG
  FNEIN
  FMUSS
  FKANN
  FELEI
  FEGTB
  FEGRU
  FROM T082G  CLIENT SPECIFIED
  INTO TABLE IT_T082G
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T082G.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T082G-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'INGEG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082G-INGEG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FNEIN' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082G-FNEIN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FMUSS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082G-FMUSS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FKANN' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082G-FKANN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FELEI' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082G-FELEI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGTB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082G-FEGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGRU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082G-FEGRU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T082G = LINES( IT_T082G ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T082G
    USING LV_FILE
    LS_TABLE .
    FREE IT_T082G .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FEGTB
  FELEI
  MANDT
  SPRAS
  TXT30
  FROM T082H  CLIENT SPECIFIED
  INTO TABLE IT_T082H
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T082H.ACTT'.
  LS_TABLE = 'FEGTB'.
  DESCRIBE FIELD WA_T082H-FEGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FELEI' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082H-FELEI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082H-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082H-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TXT30' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082H-TXT30
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T082H = LINES( IT_T082H ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T082H
    USING LV_FILE
    LS_TABLE .
    FREE IT_T082H .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FEGTB
  FEGLG
  XVALID
  FROM T082L
  INTO TABLE IT_T082L
  .
  LV_FILE = 'T082L.ACTT'.
  LS_TABLE = 'FEGTB'.
  DESCRIBE FIELD WA_T082L-FEGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGLG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082L-FEGLG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XVALID' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082L-XVALID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T082L = LINES( IT_T082L ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T082L
    USING LV_FILE
    LS_TABLE .
    FREE IT_T082L .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FEGBEZ
  FEGLG
  FEGTB
  SPRAS
  FROM T082M
  INTO TABLE IT_T082M
  WHERE SPRAS = 'EN'
  .
  LV_FILE = 'T082M.ACTT'.
  LS_TABLE = 'FEGBEZ'.
  DESCRIBE FIELD WA_T082M-FEGBEZ
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGLG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082M-FEGLG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGTB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082M-FEGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082M-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T082M = LINES( IT_T082M ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T082M
    USING LV_FILE
    LS_TABLE .
    FREE IT_T082M .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TXT20
  SPRAS
  FEGTB
  FEGRU
  FROM T082T
  INTO TABLE IT_T082T
  WHERE SPRAS = 'EN'
  .
  LV_FILE = 'T082T.ACTT'.
  LS_TABLE = 'TXT20'.
  DESCRIBE FIELD WA_T082T-TXT20
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGTB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082T-FEGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FEGRU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T082T-FEGRU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T082T = LINES( IT_T082T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T082T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T082T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  AFASL
  ANHWSL
  MANDT
  FROM T090NA  CLIENT SPECIFIED
  INTO TABLE IT_T090NA
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T090NA.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T090NA-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFASL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NA-AFASL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ANHWSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NA-ANHWSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NA-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T090NA = LINES( IT_T090NA ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T090NA
    USING LV_FILE
    LS_TABLE .
    FREE IT_T090NA .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  AFASL
  AFATXT
  MANDT
  SPRAS
  FROM T090NAT  CLIENT SPECIFIED
  INTO TABLE IT_T090NAT
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T090NAT.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T090NAT-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFASL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAT-AFASL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFATXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAT-AFATXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T090NAT = LINES( IT_T090NAT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T090NAT
    USING LV_FILE
    LS_TABLE .
    FREE IT_T090NAT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  AFARSL
  AFASL
  AFATYP
  MANDT
  METDEG
  METPER
  METSTU
  FROM T090NAZ  CLIENT SPECIFIED
  INTO TABLE IT_T090NAZ
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T090NAZ.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T090NAZ-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFARSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAZ-AFARSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFASL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAZ-AFASL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFATYP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAZ-AFATYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAZ-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'METDEG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAZ-METDEG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'METPER' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAZ-METPER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'METSTU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NAZ-METSTU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T090NAZ = LINES( IT_T090NAZ ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T090NAZ
    USING LV_FILE
    LS_TABLE .
    FREE IT_T090NAZ .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  METDEG
  MANDT
  DEGTXT
  AFAPL
  FROM T090NDT  CLIENT SPECIFIED
  INTO TABLE IT_T090NDT
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T090NDT.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_T090NDT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'METDEG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NDT-METDEG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NDT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DEGTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NDT-DEGTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFAPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NDT-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T090NDT = LINES( IT_T090NDT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T090NDT
    USING LV_FILE
    LS_TABLE .
    FREE IT_T090NDT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  MANDT
  METPER
  PERTXT
  SPRAS
  FROM T090NPT  CLIENT SPECIFIED
  INTO TABLE IT_T090NPT
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T090NPT.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T090NPT-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NPT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'METPER' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NPT-METPER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PERTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NPT-PERTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NPT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T090NPT = LINES( IT_T090NPT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T090NPT
    USING LV_FILE
    LS_TABLE .
    FREE IT_T090NPT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFARSL
  MANDT
  RSLTXT
  SPRAS
  FROM T090NRT  CLIENT SPECIFIED
  INTO TABLE IT_T090NRT
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T090NRT.ACTT'.
  LS_TABLE = 'AFARSL'.
  DESCRIBE FIELD WA_T090NRT-AFARSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NRT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'RSLTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NRT-RSLTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NRT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T090NRT = LINES( IT_T090NRT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T090NRT
    USING LV_FILE
    LS_TABLE .
    FREE IT_T090NRT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  MANDT
  METSTU
  SPRAS
  STUTXT
  FROM T090NST  CLIENT SPECIFIED
  INTO TABLE IT_T090NST
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T090NST.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T090NST-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NST-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'METSTU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NST-METSTU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NST-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STUTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T090NST-STUTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T090NST = LINES( IT_T090NST ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T090NST
    USING LV_FILE
    LS_TABLE .
    FREE IT_T090NST .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  MANDT
  ANHWSL
  ANHTXT
  FROM T091T  CLIENT SPECIFIED
  INTO TABLE IT_T091T
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T091T.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_T091T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T091T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ANHWSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T091T-ANHWSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ANHTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T091T-ANHTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T091T = LINES( IT_T091T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T091T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T091T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFABER
  AFAPL
  BUHBKT
  MANDT
  FROM T093  CLIENT SPECIFIED
  INTO TABLE IT_T093
  WHERE BUHBKT = '1' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T093.ACTT'.
  LS_TABLE = 'AFABER'.
  DESCRIBE FIELD WA_T093-AFABER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFAPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUHBKT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093-BUHBKT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T093 = LINES( IT_T093 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T093
    USING LV_FILE
    LS_TABLE .
    FREE IT_T093 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  BUKRS
  MANDT
  VRMAFB
  FROM T093C  CLIENT SPECIFIED
  INTO TABLE IT_T093C
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T093C.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T093C-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093C-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093C-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'VRMAFB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093C-VRMAFB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T093C = LINES( IT_T093C ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T093C
    USING LV_FILE
    LS_TABLE .
    FREE IT_T093C .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFABER
  AFBRHY
  AUFBUC
  BUKRS
  MANDT
  ZINBUC
  FROM T093D  CLIENT SPECIFIED
  INTO TABLE IT_T093D
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T093D.ACTT'.
  LS_TABLE = 'AFABER'.
  DESCRIBE FIELD WA_T093D-AFABER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFBRHY' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093D-AFBRHY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AUFBUC' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093D-AUFBUC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093D-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093D-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ZINBUC' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093D-ZINBUC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T093D = LINES( IT_T093D ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T093D
    USING LV_FILE
    LS_TABLE .
    FREE IT_T093D .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  MANDT
  AFBTXT
  AFBKTX
  AFAPL
  AFABER
  FROM T093T  CLIENT SPECIFIED
  INTO TABLE IT_T093T
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T093T.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_T093T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFBTXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093T-AFBTXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFBKTX' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093T-AFBKTX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFAPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093T-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFABER' INTO LS_TABLE.
  DESCRIBE FIELD WA_T093T-AFABER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T093T = LINES( IT_T093T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T093T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T093T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  KTVZU
  KTVBAB
  KTREST
  KTOPL
  KTOGR
  KTMIND
  KTMEHR
  KTERLW
  KTENAK
  KTANZG
  KTANZA
  KTANSW
  KTANSG
  AFABE
  FROM T095  CLIENT SPECIFIED
  INTO TABLE IT_T095
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T095.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T095-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTVZU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTVZU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTVBAB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTVBAB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTREST' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTREST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOGR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTOGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTMIND' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTMIND
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTMEHR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTMEHR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTERLW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTERLW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTENAK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTENAK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTANZG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTANZG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTANZA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTANZA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTANSW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTANSW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTANSG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-KTANSG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFABE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095-AFABE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T095 = LINES( IT_T095 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T095
    USING LV_FILE
    LS_TABLE .
    FREE IT_T095 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  KTSZUS
  KTSAFU
  KTSAFG
  KTSAFB
  KTOPL
  KTOGR
  KTNZUS
  KTNAFU
  KTNAFG
  KTNAFB
  AFABE
  FROM T095B  CLIENT SPECIFIED
  INTO TABLE IT_T095B
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T095B.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T095B-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTSZUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTSZUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTSAFU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTSAFU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTSAFG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTSAFG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTSAFB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTSAFB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOPL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOGR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTOGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTNZUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTNZUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTNAFU' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTNAFU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTNAFG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTNAFG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTNAFB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-KTNAFB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AFABE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095B-AFABE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T095B = LINES( IT_T095B ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T095B
    USING LV_FILE
    LS_TABLE .
    FREE IT_T095B .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  KTGRTX
  KTOGR
  MANDT
  SPRAS
  FROM T095T  CLIENT SPECIFIED
  INTO TABLE IT_T095T
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T095T.ACTT'.
  LS_TABLE = 'KTGRTX'.
  DESCRIBE FIELD WA_T095T-KTGRTX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTOGR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095T-KTOGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T095T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T095T = LINES( IT_T095T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T095T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T095T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  BPLAKT
  MANDT
  FROM T096  CLIENT SPECIFIED
  INTO TABLE IT_T096
  WHERE BPLAKT = 'X' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T096.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T096-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BPLAKT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T096-BPLAKT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T096-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T096 = LINES( IT_T096 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T096
    USING LV_FILE
    LS_TABLE .
    FREE IT_T096 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AFAPL
  KTEXT
  MANDT
  SPRAS
  FROM T096T  CLIENT SPECIFIED
  INTO TABLE IT_T096T
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T096T.ACTT'.
  LS_TABLE = 'AFAPL'.
  DESCRIBE FIELD WA_T096T-AFAPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T096T-KTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T096T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T096T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T096T = LINES( IT_T096T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T096T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T096T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TEXT
  SPRSL
  MSGNR
  ARBGB
  FROM T100
  INTO TABLE IT_T100
  WHERE ( MSGNR IN ('207','117','108') )
  .
  LV_FILE = 'T100.ACTT'.
  LS_TABLE = 'TEXT'.
  DESCRIBE FIELD WA_T100-TEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100-SPRSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGNR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100-MSGNR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ARBGB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100-ARBGB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T100 = LINES( IT_T100 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T100
    USING LV_FILE
    LS_TABLE .
    FREE IT_T100 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  BWART
  KZKON
  MANDT
  FROM T156  CLIENT SPECIFIED
  INTO TABLE IT_T156
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T156.ACTT'.
  LS_TABLE = 'BWART'.
  DESCRIBE FIELD WA_T156-BWART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KZKON' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156-KZKON
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T156 = LINES( IT_T156 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T156
    USING LV_FILE
    LS_TABLE .
    FREE IT_T156 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  SOBKZ
  MANDT
  BWART
  BTEXT
  FROM T156T  CLIENT SPECIFIED
  INTO TABLE IT_T156T
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T156T.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_T156T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SOBKZ' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156T-SOBKZ
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BWART' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156T-BWART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156T-BTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T156T = LINES( IT_T156T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T156T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T156T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  VORSL
  BUSTW
  FROM T156W
  INTO TABLE IT_T156W
  .
  LV_FILE = 'T156W.ACTT'.
  LS_TABLE = 'VORSL'.
  DESCRIBE FIELD WA_T156W-VORSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUSTW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156W-BUSTW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T156W = LINES( IT_T156W ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T156W
    USING LV_FILE
    LS_TABLE .
    FREE IT_T156W .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  KOMOK
  BWART
  BUSTW
  FROM T156X  CLIENT SPECIFIED
  INTO TABLE IT_T156X
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T156X.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T156X-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOMOK' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156X-KOMOK
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BWART' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156X-BWART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUSTW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T156X-BUSTW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T156X = LINES( IT_T156X ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T156X
    USING LV_FILE
    LS_TABLE .
    FREE IT_T156X .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XLAUT
  WERKS
  MANDT
  FROM T159L  CLIENT SPECIFIED
  INTO TABLE IT_T159L
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T159L.ACTT'.
  LS_TABLE = 'XLAUT'.
  DESCRIBE FIELD WA_T159L-XLAUT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WERKS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T159L-WERKS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T159L-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T159L = LINES( IT_T159L ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T159L
    USING LV_FILE
    LS_TABLE .
    FREE IT_T159L .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  ARBGB
  MANDT
  MSGNR
  MSGTP
  MSGTYWS
  MSGVS
  FROM T160M  CLIENT SPECIFIED
  INTO TABLE IT_T160M
  WHERE MANDT =  S_PCLIEN AND ( MSGNR IN ('207','117','108') )
  .
  LV_FILE = 'T160M.ACTT'.
  LS_TABLE = 'ARBGB'.
  DESCRIBE FIELD WA_T160M-ARBGB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T160M-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGNR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T160M-MSGNR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGTP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T160M-MSGTP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGTYWS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T160M-MSGTYWS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGVS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T160M-MSGVS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T160M = LINES( IT_T160M ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T160M
    USING LV_FILE
    LS_TABLE .
    FREE IT_T160M .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  BREFN
  BSART
  BSTYP
  FROM T161  CLIENT SPECIFIED
  INTO TABLE IT_T161
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T161.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T161-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BREFN' INTO LS_TABLE.
  DESCRIBE FIELD WA_T161-BREFN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BSART' INTO LS_TABLE.
  DESCRIBE FIELD WA_T161-BSART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BSTYP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T161-BSTYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T161 = LINES( IT_T161 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T161
    USING LV_FILE
    LS_TABLE .
    FREE IT_T161 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  MANDT
  BSTYP
  BSART
  BATXT
  FROM T161T  CLIENT SPECIFIED
  INTO TABLE IT_T161T
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T161T.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_T161T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T161T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BSTYP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T161T-BSTYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BSART' INTO LS_TABLE.
  DESCRIBE FIELD WA_T161T-BSART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BATXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T161T-BATXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T161T = LINES( IT_T161T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T161T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T161T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  FLREF
  FAUS3
  FAUS2
  FAUS1
  BSTYP
  FROM T162  CLIENT SPECIFIED
  INTO TABLE IT_T162
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T162.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T162-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FLREF' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162-FLREF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS3' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162-FAUS3
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162-FAUS2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162-FAUS1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BSTYP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162-BSTYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T162 = LINES( IT_T162 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T162
    USING LV_FILE
    LS_TABLE .
    FREE IT_T162 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FAUS1
  FAUS2
  KNTTP
  MANDT
  FROM T162K  CLIENT SPECIFIED
  INTO TABLE IT_T162K
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T162K.ACTT'.
  LS_TABLE = 'FAUS1'.
  DESCRIBE FIELD WA_T162K-FAUS1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUS2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162K-FAUS2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KNTTP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162K-KNTTP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162K-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T162K = LINES( IT_T162K ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T162K
    USING LV_FILE
    LS_TABLE .
    FREE IT_T162K .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FLREF
  FLRTX
  MANDT
  SPRAS
  FROM T162T  CLIENT SPECIFIED
  INTO TABLE IT_T162T
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T162T.ACTT'.
  LS_TABLE = 'FLREF'.
  DESCRIBE FIELD WA_T162T-FLREF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FLRTX' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162T-FLRTX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162T-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T162T = LINES( IT_T162T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T162T
    USING LV_FILE
    LS_TABLE .
    FREE IT_T162T .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FAUAN
  FAUKT
  FAULP
  FAUBA
  MANDT
  SPRAS
  FAUBS
  FAUTX
  FAUTB
  FAUNR
  FAUGR
  FROM T162X  CLIENT SPECIFIED
  INTO TABLE IT_T162X
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T162X.ACTT'.
  LS_TABLE = 'FAUAN'.
  DESCRIBE FIELD WA_T162X-FAUAN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUKT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAUKT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAULP' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAULP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUBA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAUBA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUBS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAUBS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUTX' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAUTX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUTB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAUTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUNR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAUNR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUGR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162X-FAUGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T162X = LINES( IT_T162X ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T162X
    USING LV_FILE
    LS_TABLE .
    FREE IT_T162X .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FAUGR
  FAUGT
  MANDT
  SPRAS
  FROM T162Y  CLIENT SPECIFIED
  INTO TABLE IT_T162Y
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'T162Y.ACTT'.
  LS_TABLE = 'FAUGR'.
  DESCRIBE FIELD WA_T162Y-FAUGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FAUGT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162Y-FAUGT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162Y-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T162Y-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T162Y = LINES( IT_T162Y ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T162Y
    USING LV_FILE
    LS_TABLE .
    FREE IT_T162Y .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  KNTTP
  MANDT
  REPOS
  WEPOS
  FROM T163K  CLIENT SPECIFIED
  INTO TABLE IT_T163K
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T163K.ACTT'.
  LS_TABLE = 'KNTTP'.
  DESCRIBE FIELD WA_T163K-KNTTP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T163K-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'REPOS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T163K-REPOS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WEPOS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T163K-WEPOS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T163K = LINES( IT_T163K ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T163K
    USING LV_FILE
    LS_TABLE .
    FREE IT_T163K .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XW2NE
  XW2JA
  XW1NE
  XW1JA
  XP2NE
  XP2JA
  XP1NE
  XP1JA
  WERT2
  WERT1
  TOLSL
  PROZ2
  PROZ1
  MANDT
  BUKRS
  FROM T169G  CLIENT SPECIFIED
  INTO TABLE IT_T169G
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T169G.ACTT'.
  LS_TABLE = 'XW2NE'.
  DESCRIBE FIELD WA_T169G-XW2NE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XW2JA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-XW2JA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XW1NE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-XW1NE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XW1JA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-XW1JA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XP2NE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-XP2NE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XP2JA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-XP2JA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XP1NE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-XP1NE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XP1JA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-XP1JA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WERT2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-WERT2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WERT1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-WERT1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TOLSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-TOLSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROZ2' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-PROZ2
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROZ1' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-PROZ1
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169G-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T169G = LINES( IT_T169G ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T169G
    USING LV_FILE
    LS_TABLE .
    FREE IT_T169G .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XXBLNR
  XBUKRS
  XBLDAT
  MANDT
  BUKRS
  FROM T169P  CLIENT SPECIFIED
  INTO TABLE IT_T169P
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T169P.ACTT'.
  LS_TABLE = 'XXBLNR'.
  DESCRIBE FIELD WA_T169P-XXBLNR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XBUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169P-XBUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XBLDAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169P-XBLDAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169P-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T169P-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T169P = LINES( IT_T169P ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T169P
    USING LV_FILE
    LS_TABLE .
    FREE IT_T169P .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  PDTOL
  STREA
  STSET
  STVAW
  STVLW
  WSWIN
  PDMAX
  OITOL
  MAVAL
  MANDT
  KKBER
  DUNNG
  CTLPC
  CRPRC
  CRMGR
  CMPAH
  CMPAG
  CMPAF
  CMPAE
  CMPAD
  CMPAC
  CMPAB
  CMPAA
  CECKI
  FROM T691F  CLIENT SPECIFIED
  INTO TABLE IT_T691F
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'T691F.ACTT'.
  LS_TABLE = 'PDTOL'.
  DESCRIBE FIELD WA_T691F-PDTOL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STREA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-STREA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STSET' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-STSET
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STVAW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-STVAW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STVLW' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-STVLW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WSWIN' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-WSWIN
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PDMAX' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-PDMAX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OITOL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-OITOL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MAVAL' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-MAVAL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KKBER' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-KKBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DUNNG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-DUNNG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CTLPC' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CTLPC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CRPRC' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CRPRC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CRMGR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CRMGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAH' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAG' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAF' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAE' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAD' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAC' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMPAA' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CMPAA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CECKI' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691F-CECKI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T691F = LINES( IT_T691F ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T691F
    USING LV_FILE
    LS_TABLE .
    FREE IT_T691F .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  MANDT
  CRMGR
  CTLPC
  KKBER
  PRBEZ
  FROM T691G  CLIENT SPECIFIED
  INTO TABLE IT_T691G
  WHERE SPRAS = 'EN' AND MANDT =  S_PCLIEN
  .
  LV_FILE = 'T691G.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_T691G-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691G-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CRMGR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691G-CRMGR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CTLPC' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691G-CTLPC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KKBER' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691G-KKBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PRBEZ' INTO LS_TABLE.
  DESCRIBE FIELD WA_T691G-PRBEZ
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T691G = LINES( IT_T691G ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T691G
    USING LV_FILE
    LS_TABLE .
    FREE IT_T691G .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  PGMID
  OBJECT
  OBJ_NAME
  EDTFLAG
  FROM TADIR
  INTO TABLE IT_TADIR WHERE PGMID = 'HEAD' AND OBJECT = 'SYST'.
  LV_FILE = 'TADIR.ACTT'.
  LS_TABLE = 'PGMID'.
  DESCRIBE FIELD WA_TADIR-PGMID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TADIR-OBJECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJ_NAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TADIR-OBJ_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'EDTFLAG' INTO LS_TABLE.
  DESCRIBE FIELD WA_TADIR-EDTFLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TADIR = LINES( IT_TADIR ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TADIR
    USING LV_FILE
    LS_TABLE .
    FREE IT_TADIR .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  BUKRS
  FNAME
  KOART
  UMSKS
  XAEND
  XAUSZ
  XBUPE
  MANDT
  FROM TBAER  CLIENT SPECIFIED
  INTO TABLE IT_TBAER
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'TBAER.ACTT'.
  LS_TABLE = 'BUKRS'.
  DESCRIBE FIELD WA_TBAER-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBAER-FNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOART' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBAER-KOART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UMSKS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBAER-UMSKS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XAEND' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBAER-XAEND
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XAUSZ' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBAER-XAUSZ
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XBUPE' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBAER-XBUPE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBAER-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TBAER = LINES( IT_TBAER ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TBAER
    USING LV_FILE
    LS_TABLE .
    FREE IT_TBAER .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  XZAHL
  XUMSW
  XSONU
  STBSL
  SHKZG
  MANDT
  KOART
  BSCHL
  FROM TBSL  CLIENT SPECIFIED
  INTO TABLE IT_TBSL
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'TBSL.ACTT'.
  LS_TABLE = 'XZAHL'.
  DESCRIBE FIELD WA_TBSL-XZAHL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XUMSW' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSL-XUMSW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'XSONU' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSL-XSONU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STBSL' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSL-STBSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SHKZG' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSL-SHKZG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSL-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOART' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSL-KOART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BSCHL' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSL-BSCHL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TBSL = LINES( IT_TBSL ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TBSL
    USING LV_FILE
    LS_TABLE .
    FREE IT_TBSL .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  BSCHL
  LTEXT
  MANDT
  SPRAS
  UMSKZ
  FROM TBSLT  CLIENT SPECIFIED
  INTO TABLE IT_TBSLT
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'TBSLT.ACTT'.
  LS_TABLE = 'BSCHL'.
  DESCRIBE FIELD WA_TBSLT-BSCHL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSLT-LTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSLT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSLT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UMSKZ' INTO LS_TABLE.
  DESCRIBE FIELD WA_TBSLT-UMSKZ
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TBSLT = LINES( IT_TBSLT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TBSLT
    USING LV_FILE
    LS_TABLE .
    FREE IT_TBSLT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  DOCUDEL
  MULTCASE
  OBJECT
  OLDTABNAME
  REFNAME
  TABNAME
  FROM TCDOB
  INTO TABLE IT_TCDOB
  WHERE ( TABNAME IN ('T095', 'T095B', 'ANLZ') )
  .
  LV_FILE = 'TCDOB.ACTT'.
  LS_TABLE = 'DOCUDEL'.
  DESCRIBE FIELD WA_TCDOB-DOCUDEL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MULTCASE' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCDOB-MULTCASE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCDOB-OBJECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OLDTABNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCDOB-OLDTABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'REFNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCDOB-REFNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TABNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCDOB-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TCDOB = LINES( IT_TCDOB ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TCDOB
    USING LV_FILE
    LS_TABLE .
    FREE IT_TCDOB .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FFACT
  GDATU
  KURST
  MANDT
  TCURR
  TFACT
  FCURR
  FROM TCURF  CLIENT SPECIFIED
  INTO TABLE IT_TCURF
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'TCURF.ACTT'.
  LS_TABLE = 'FFACT'.
  DESCRIBE FIELD WA_TCURF-FFACT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GDATU' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCURF-GDATU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KURST' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCURF-KURST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCURF-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TCURR' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCURF-TCURR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TFACT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCURF-TFACT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FCURR' INTO LS_TABLE.
  DESCRIBE FIELD WA_TCURF-FCURR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TCURF = LINES( IT_TCURF ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TCURF
    USING LV_FILE
    LS_TABLE .
    FREE IT_TCURF .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TABNAME
  CCLASS
  FROM TDDAT
  INTO TABLE IT_TDDAT

  .
  LV_FILE = 'TDDAT.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_TDDAT-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CCLASS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TDDAT-CCLASS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TDDAT = LINES( IT_TDDAT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TDDAT
    USING LV_FILE
    LS_TABLE .
    FREE IT_TDDAT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  KTOPL
  BEZEI
  KOKRS
  LMONA
  MANDT
  WAERS
  FROM TKA01  CLIENT SPECIFIED
  INTO TABLE IT_TKA01
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'TKA01.ACTT'.
  LS_TABLE = 'KTOPL'.
  DESCRIBE FIELD WA_TKA01-KTOPL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BEZEI' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA01-BEZEI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA01-KOKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LMONA' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA01-LMONA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA01-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'WAERS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA01-WAERS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TKA01 = LINES( IT_TKA01 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TKA01
    USING LV_FILE
    LS_TABLE .
    FREE IT_TKA01 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  BUKRS
  GSBER
  KOKRS
  FROM TKA02  CLIENT SPECIFIED
  INTO TABLE IT_TKA02
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'TKA02.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_TKA02-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BUKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA02-BUKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GSBER' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA02-GSBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KOKRS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TKA02-KOKRS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TKA02 = LINES( IT_TKA02 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TKA02
    USING LV_FILE
    LS_TABLE .
    FREE IT_TKA02 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MCINF
  SPERI
  FROM TMC4  CLIENT SPECIFIED
  INTO TABLE IT_TMC4
*#ACTTSAP12.0 Added Mandt Filter*
  WHERE MCINF = 'S066' AND MANDT = S_PCLIEN
  .
  LV_FILE = 'TMC4.ACTT'.
  LS_TABLE = 'MCINF'.
  DESCRIBE FIELD WA_TMC4-MCINF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPERI' INTO LS_TABLE.
  DESCRIBE FIELD WA_TMC4-SPERI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TMC4 = LINES( IT_TMC4 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TMC4
    USING LV_FILE
     LS_TABLE .
    FREE IT_TMC4 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  FAUNA
  MODIF
  SPRAS
  FTEXT
  FROM TMODP
  INTO TABLE IT_TMODP
  WHERE SPRAS = 'EN'
  .
  LV_FILE = 'TMODP.ACTT'.
  LS_TABLE = 'FAUNA'.
  DESCRIBE FIELD WA_TMODP-FAUNA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODIF' INTO LS_TABLE.
  DESCRIBE FIELD WA_TMODP-MODIF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TMODP-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TMODP-FTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TMODP = LINES( IT_TMODP ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TMODP
    USING LV_FILE
    LS_TABLE .
    FREE IT_TMODP .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.


  "" Begin of addition -Resolve memory dump


  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  NAME
  SECU
  SUBC
  CNAM
  CDAT
  UNAM
  UDAT
  FROM TRDIR
  WHERE ( SUBC IN ('1','M','F') )."" any filter can be set here

  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_TRDIR
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
  "" End of adddition -Resolve memory dump


  LV_FILE = 'TRDIR.ACTT'.
  LS_TABLE = 'NAME'.
  DESCRIBE FIELD WA_TRDIR-NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SECU' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-SECU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBC' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-SUBC
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CNAM' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-CNAM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CDAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-CDAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UNAM' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-UNAM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UDAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TRDIR-UDAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TRDIR = LINES( IT_TRDIR ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TRDIR
    USING LV_FILE
    LS_TABLE .
    FREE IT_TRDIR .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TCODE
  PGMNA
  CINFO
  FROM TSTC
  INTO TABLE IT_TSTC
  .
  LV_FILE = 'TSTC.ACTT'.
  LS_TABLE = 'TCODE'.
  DESCRIBE FIELD WA_TSTC-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PGMNA' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTC-PGMNA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CINFO' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTC-CINFO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTC = LINES( IT_TSTC ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTC
    USING LV_FILE
    LS_TABLE .
    FREE IT_TSTC .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TCODE
  OBJCT
  FROM TSTCA
  INTO TABLE IT_TSTCA
  WHERE ( TCODE LIKE 'Z%' OR TCODE LIKE 'Y%' )
  .
  LV_FILE = 'TSTCA.ACTT'.
  LS_TABLE = 'TCODE'.
  DESCRIBE FIELD WA_TSTCA-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'OBJCT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCA-OBJCT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTCA = LINES( IT_TSTCA ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTCA
    USING LV_FILE
    LS_TABLE .
    FREE IT_TSTCA .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TCODE
  PARAM
  FROM TSTCP
  INTO TABLE IT_TSTCP
  .
  LV_FILE = 'TSTCP.ACTT'.
  LS_TABLE = 'TCODE'.
  DESCRIBE FIELD WA_TSTCP-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PARAM' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCP-PARAM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTCP = LINES( IT_TSTCP ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTCP
    USING LV_FILE
     LS_TABLE .
    FREE IT_TSTCP.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRSL
  TCODE
  TTEXT
  FROM TSTCT
  INTO TABLE IT_TSTCT
  WHERE ( TCODE LIKE 'Z%' OR TCODE LIKE 'Y%' )
  .
  LV_FILE = 'TSTCT.ACTT'.
  LS_TABLE = 'SPRSL'.
  DESCRIBE FIELD WA_TSTCT-SPRSL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TCODE' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCT-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TTEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSTCT-TTEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSTCT = LINES( IT_TSTCT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSTCT
    USING LV_FILE
    LS_TABLE .
    FREE IT_TSTCT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  AUART
  BEZOB
  CMGRA
  KLIMP
  MANDT
  FROM TVAK  CLIENT SPECIFIED
  INTO TABLE IT_TVAK
  WHERE MANDT =  S_PCLIEN
  .
  LV_FILE = 'TVAK.ACTT'.
  LS_TABLE = 'AUART'.
  DESCRIBE FIELD WA_TVAK-AUART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BEZOB' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVAK-BEZOB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CMGRA' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVAK-CMGRA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'KLIMP' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVAK-KLIMP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVAK-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TVAK = LINES( IT_TVAK ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TVAK
    USING LV_FILE
    LS_TABLE .
    FREE IT_TVAK .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  MANDT
  AUART
  BEZEI
  SPRAS
  FROM TVAKT  CLIENT SPECIFIED
  INTO TABLE IT_TVAKT
  WHERE MANDT =  S_PCLIEN AND SPRAS = 'EN'
  .
  LV_FILE = 'TVAKT.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_TVAKT-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AUART' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVAKT-AUART
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BEZEI' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVAKT-BEZEI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVAKT-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TVAKT = LINES( IT_TVAKT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TVAKT
    USING LV_FILE
    LS_TABLE .
    FREE IT_TVAKT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
FIELD
VARBL
FROM USORG  CLIENT SPECIFIED
INTO TABLE IT_USORG
.
  LV_FILE = 'USORG.ACTT'.
  LS_TABLE = 'FIELD'.
  DESCRIBE FIELD WA_USORG-FIELD
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'VARBL' INTO LS_TABLE.
  DESCRIBE FIELD WA_USORG-VARBL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USORG = LINES( IT_USORG ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USORG
    USING LV_FILE
     LS_TABLE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.


OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  UFLAG
  GLTGV
  GLTGB
  USTYP
  CLASS
  BNAME
  TRDAT
  FROM USR02  CLIENT SPECIFIED
* INTO TABLE IT_USR02
  WHERE MANDT =  S_PCLIEN
  .
 DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USR02
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.

  LV_FILE = 'USR02.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_USR02-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-UFLAG
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-GLTGV
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'GLTGB' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-GLTGB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-USTYP
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CLASS' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-CLASS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TRDAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR02-TRDAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USR02 = LINES( IT_USR02 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR02
    USING LV_FILE
    LS_TABLE .

    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
    SELECT
    MANDT
    BNAME
    PERSNUMBER
    FROM USR21  CLIENT SPECIFIED
*  INTO TABLE it_usr21
    FOR ALL ENTRIES IN IT_USR02
    WHERE BNAME = IT_USR02-BNAME
    AND MANDT =  S_PCLIEN
    .

  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USR21
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'USR21.ACTT'.
  LS_TABLE = 'mandt'.
  DESCRIBE FIELD WA_USR21-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'bname' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR21-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'persnumber' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR21-PERSNUMBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USR21 = LINES( IT_USR21 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR21
    USING LV_FILE
    LS_TABLE .
    FREE IT_USR02 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
    SELECT
      CLIENT
      PERSNUMBER
      DATE_FROM
      DATE_TO
      TITLE
      NAME_FIRST
      NAME_LAST
      SEX
      FROM ADRP  CLIENT SPECIFIED
*    INTO TABLE it_adrp
      FOR ALL ENTRIES IN IT_USR21
      WHERE PERSNUMBER = IT_USR21-PERSNUMBER
      AND CLIENT =  S_PCLIEN AND DATE_TO GE SY-DATUM
      .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_ADRP
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'adrp.ACTT'.
  LS_TABLE = 'client'.
  DESCRIBE FIELD WA_ADRP-CLIENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'persnumber' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-PERSNUMBER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'date_from' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-DATE_FROM
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'date_to' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-DATE_TO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'title' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-TITLE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'name_first' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-NAME_FIRST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'name_last' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-NAME_LAST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'sex' INTO LS_TABLE.
  DESCRIBE FIELD WA_ADRP-SEX
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_ADRP = LINES( IT_ADRP ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_ADRP
    USING LV_FILE
    LS_TABLE .
    FREE IT_USR21 .
    FREE IT_ADRP .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

  IF ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
    DATA: USR02_COLUMNS TYPE STRING.
    USR02_COLUMNS = 'GLTGB USTYP CLASS ANAME ERDAT TRDAT GLTGV UFLAG MANDT BNAME SECURITY_POLICY'.
    SELECT
    (USR02_COLUMNS)
    FROM USR02 CLIENT SPECIFIED
    INTO TABLE IT_USR02_CC_1
    .
    LV_FILE = 'USR02_CC.ACTT'.
    LS_TABLE = 'GLTGB'.
    DESCRIBE FIELD WA_USR02_CC_1-GLTGB
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-USTYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CLASS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-CLASS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ANAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-ANAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ERDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-ERDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-TRDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-GLTGV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-UFLAG
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-BNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SECURITY_POLICY' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC_1-SECURITY_POLICY
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USR02_CC_1 = LINES( IT_USR02_CC_1 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR02_CC_1
      USING LV_FILE
      LS_TABLE .
      FREE IT_USR02_CC_1.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.

  ELSE.

    SELECT
    GLTGB
    USTYP
    CLASS
    ANAME
    ERDAT
    TRDAT
    GLTGV
    UFLAG
    MANDT
    BNAME
    FROM USR02 CLIENT SPECIFIED
    INTO TABLE IT_USR02_CC
    .
    LV_FILE = 'USR02_CC.ACTT'.
    LS_TABLE = 'GLTGB'.
    DESCRIBE FIELD WA_USR02_CC-GLTGB
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-USTYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CLASS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-CLASS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ANAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-ANAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ERDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-ERDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRDAT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-TRDAT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-GLTGV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-UFLAG
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MANDT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR02_CC-BNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USR02_CC = LINES( IT_USR02_CC ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR02_CC
      USING LV_FILE
      LS_TABLE .
      FREE IT_USR02_CC.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

  IF CK_PROF <> 'X'.

*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
      SELECT
      MANDT
      PROFN
      AKTPS
      TYP
      FROM USR10  CLIENT SPECIFIED
*    INTO TABLE it_usr10
      WHERE MANDT =  S_PCLIEN
      .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_USR10
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'USR10.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_USR10-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROFN' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR10-PROFN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AKTPS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR10-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USR10-TYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USR10 = LINES( IT_USR10 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR10
      USING LV_FILE
      LS_TABLE .
      FREE IT_USR10 .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  BCODE
  FROM USR40
*  INTO TABLE it_usr40
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USR40
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'USR40.ACTT'.
  LS_TABLE = 'BCODE'.
  DESCRIBE FIELD WA_USR40-BCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USR40 = LINES( IT_USR40 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR40
    USING LV_FILE
    LS_TABLE .
    FREE IT_USR40 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  BNAME
  REFUSER
  USERALIAS
  FROM USREFUS  CLIENT SPECIFIED
*  INTO TABLE it_usrefus
  WHERE MANDT =  S_PCLIEN
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USREFUS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'USREFUS.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_USREFUS-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_USREFUS-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'REFUSER' INTO LS_TABLE.
  DESCRIBE FIELD WA_USREFUS-REFUSER
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'USERALIAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_USREFUS-USERALIAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USREFUS = LINES( IT_USREFUS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USREFUS
    USING LV_FILE
    LS_TABLE .
    FREE IT_USREFUS .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

**Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
    SELECT
    MANDT
    PROFILE
    BNAME
    FROM UST04  CLIENT SPECIFIED
*  INTO TABLE it_ust04
    WHERE MANDT =  S_PCLIEN
    .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_UST04
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'UST04.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_UST04-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROFILE' INTO LS_TABLE.
  DESCRIBE FIELD WA_UST04-PROFILE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_UST04-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_UST04 = LINES( IT_UST04 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_UST04
    USING LV_FILE
    LS_TABLE .
    FREE IT_UST04 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  IF CK_PROF <> 'X'.
** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
        SELECT
        MANDT
        PROFN
        AKTPS
        SUBPROF
        FROM UST10C  CLIENT SPECIFIED
*    INTO TABLE it_ust10c
        WHERE MANDT =  S_PCLIEN
        .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_UST10C
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'UST10C.ACTT'.
    LS_TABLE = 'mandt'.
    DESCRIBE FIELD WA_UST10C-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROFN' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10C-PROFN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AKTPS' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10C-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SUBPROF' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10C-SUBPROF
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_UST10C = LINES( IT_UST10C ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_UST10C
      USING LV_FILE
      LS_TABLE .
      FREE IT_UST10C .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
  IF CK_PROF <> 'X'.
** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
       SELECT
       MANDT
       PROFN
       AKTPS
       OBJCT
       AUTH
       FROM UST10S  CLIENT SPECIFIED
*    INTO TABLE it_ust10s
       WHERE MANDT =  S_PCLIEN
       .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_UST10S
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'UST10S.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_UST10S-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROFN' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-PROFN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AKTPS' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'OBJCT' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-OBJCT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AUTH' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST10S-AUTH
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_UST10S = LINES( IT_UST10S ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_UST10S
      USING LV_FILE
      LS_TABLE .
      FREE IT_UST10S .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
  IF CK_PROF <> 'X'.
** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
        SELECT
        BIS
        VON
        FIELD
        AKTPS
        AUTH
        OBJCT
        MANDT
        FROM UST12  CLIENT SPECIFIED
*    INTO TABLE it_ust12
        WHERE MANDT =  S_PCLIEN
        .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_UST12
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'UST12.ACTT'.
    LS_TABLE = 'BIS'.
    DESCRIBE FIELD WA_UST12-BIS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'VON' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST12-VON
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'FIELD' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST12-FIELD
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AKTPS' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST12-AKTPS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AUTH' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST12-AUTH
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'OBJCT' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST12-OBJCT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'mandt' INTO LS_TABLE.
    DESCRIBE FIELD WA_UST12-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_UST12 = LINES( IT_UST12 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_UST12
      USING LV_FILE
      LS_TABLE .
      FREE IT_UST12 .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.


  SELECT
  TABNAME
  LOGDATE
  LOGTIME
  USERNAME
  TCODE
  FROM DBTABLOG
  INTO TABLE IT_DBTABLOG
  WHERE ( TABNAME IN ('T000', 'TADIR', 'PAHI', 'DEVACCESS') )
  AND LOGDATE >= S_START
  .
  LV_FILE = 'DBTABLOG.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_DBTABLOG-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LOGDATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_DBTABLOG-LOGDATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LOGTIME' INTO LS_TABLE.
  DESCRIBE FIELD WA_DBTABLOG-LOGTIME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'USERNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_DBTABLOG-USERNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TCODE' INTO LS_TABLE.
  DESCRIBE FIELD WA_DBTABLOG-TCODE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_DBTABLOG = LINES( IT_DBTABLOG ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_DBTABLOG
    USING LV_FILE
     LS_TABLE .
    FREE IT_DBTABLOG.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.


  SELECT
  MANDT
  ARBGB
  MSGNR
  UNAME
  MSGTS
  MSGTB
  FROM T100C  CLIENT SPECIFIED
  INTO TABLE IT_T100C
  WHERE ( MSGNR IN ('207','117','108') ) AND MANDT =  S_PCLIEN
  .
  LV_FILE = 't100C.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_T100C-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ARBGB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100C-ARBGB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGNR' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100C-MSGNR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100C-UNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGTS' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100C-MSGTS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGTB' INTO LS_TABLE.
  DESCRIBE FIELD WA_T100C-MSGTB
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_T100C = LINES( IT_T100C ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_T100C
    USING LV_FILE
    LS_TABLE .
    FREE IT_T100C .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
*#ACTTSAP12.0 Release 12.0 Changes Begin*
* Adding Tables PAT03, TVIMF, USH04, USR04, USH02, CDHDR, CDPOS,E070 and TPALOG*

  SELECT
  PATCH
  SHORT_TEXT
  STATUS
  IMPLE_DATE
  L_IMPL_REL
  DELIV_DATE
  IMPLE_TIME
  COMP_REL
  COMPONENT
  FROM PAT03
  INTO TABLE IT_PAT03
  .
  LV_FILE = 'PAT03.ACTT'.
  LS_TABLE = 'PATCH'.
  DESCRIBE FIELD WA_PAT03-PATCH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SHORT_TEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-SHORT_TEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-STATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'IMPLE_DATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-IMPLE_DATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'L_IMPL_REL' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-L_IMPL_REL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'DELIV_DATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-DELIV_DATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'IMPLE_TIME' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-IMPLE_TIME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'COMP_REL' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-COMP_REL
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'COMPONENT' INTO LS_TABLE.
  DESCRIBE FIELD WA_PAT03-COMPONENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_PAT03 = LINES( IT_PAT03 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_PAT03
    USING LV_FILE
     LS_TABLE .
    FREE IT_PAT03 .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  TABNAME
  EVENT
  FORMNAME
  FROM TVIMF
  INTO TABLE IT_TVIMF
  WHERE TABNAME = 'T000'
  .
  LV_FILE = 'TVIMF.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_TVIMF-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'EVENT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVIMF-EVENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'FORMNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_TVIMF-FORMNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TVIMF = LINES( IT_TVIMF ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TVIMF
    USING LV_FILE
     LS_TABLE .
    FREE IT_TVIMF .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  MANDT
  BNAME
  MODDA
  MODTI
  MODBE
  NRPRO
  PROFS
  FROM USR04  CLIENT SPECIFIED
*  INTO TABLE it_usr04
  WHERE MANDT =  S_PCLIEN
  .

  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_USR04
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'USR04.ACTT'.
  LS_TABLE = 'MANDT'.
  DESCRIBE FIELD WA_USR04-MANDT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-BNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODDA' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-MODDA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODTI' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-MODTI
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MODBE' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-MODBE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'NRPRO' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-NRPRO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PROFS' INTO LS_TABLE.
  DESCRIBE FIELD WA_USR04-PROFS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_USR04 = LINES( IT_USR04 ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_USR04
    USING LV_FILE
     LS_TABLE .
    FREE IT_USR04.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'USH04'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.


    DATA: IT_USH04_TMP TYPE STANDARD TABLE OF TS_USH04.
    DATA: IT_USH04_TMP1 TYPE STANDARD TABLE OF TS_USH04.
    DATA: WA_USH04_TMP TYPE TS_USH04 .

*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
      SELECT
      MANDT
      BNAME
      MAX( MODDA ) AS MODDA
      FROM USH04  CLIENT SPECIFIED
*    INTO TABLE it_ush04_tmp
      WHERE MANDT =  S_PCLIEN AND MODDA < S_START
      GROUP BY MANDT BNAME.
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_USH04_TMP
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
* OPTION 1
    SELECT
          MANDT
          BNAME
          MODDA
          MODTI
          MODBE
          NRPRO
          PROFS
          FROM USH04  CLIENT SPECIFIED
          INTO TABLE IT_USH04_TMP1
          FOR ALL ENTRIES IN IT_USH04_TMP
          WHERE MANDT = IT_USH04_TMP-MANDT AND BNAME = IT_USH04_TMP-BNAME AND MODDA = IT_USH04_TMP-MODDA.

    SORT IT_USH04_TMP1 BY MANDT BNAME MODDA DESCENDING MODTI DESCENDING.

    LOOP AT IT_USH04_TMP INTO WA_USH04.
      READ TABLE IT_USH04_TMP1 INTO WA_USH04_TMP "How do we ensure only topmost line is copied
      WITH KEY MANDT = WA_USH04-MANDT BNAME = WA_USH04-BNAME MODDA = WA_USH04-MODDA BINARY SEARCH.
      APPEND WA_USH04_TMP TO IT_USH04.
      CLEAR WA_USH04.
      CLEAR WA_USH04_TMP.
    ENDLOOP.
    FREE IT_USH04_TMP.
    FREE IT_USH04_TMP1.


* OPTION 2
**DELETE ADJACENT DUPLICATES FROM it_ush04_tmp COMPARING mandt bname .  "Keeps the line with most recent date and removes unwanted entries
*    LOOP AT it_ush04_tmp INTO wa_ush04.
*      SELECT
*      mandt
*      bname
*      modda
*      modti
*      modbe
*      nrpro
*      profs
*      FROM ush04  CLIENT SPECIFIED
*      INTO CORRESPONDING FIELDS OF wa_ush04_tmp
*      UP TO 1 ROWS
*      WHERE mandt = wa_ush04-mandt AND bname = wa_ush04-bname AND modda = wa_ush04-modda
*      ORDER BY modti DESCENDING.
*      ENDSELECT.
*      APPEND wa_ush04_tmp TO it_ush04.
*      CLEAR wa_ush04.
*      CLEAR wa_ush04_tmp.
**Append WA_USH04 into IT_USH04
*    ENDLOOP.
*    FREE it_ush04_tmp.

    SELECT
    MANDT
    BNAME
    MODDA
    MODTI
    MODBE
    NRPRO
    PROFS
    FROM USH04  CLIENT SPECIFIED
    APPENDING TABLE IT_USH04
    WHERE MANDT =  S_PCLIEN AND MODDA >= S_START.

    SORT IT_USH04 BY MANDT BNAME MODDA MODTI .


    LV_FILE = 'USH04.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_USH04-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH04-BNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODDA' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH04-MODDA
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODTI' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH04-MODTI
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODBE' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH04-MODBE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'NRPRO' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH04-NRPRO
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROFS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH04-PROFS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USH04 = LINES( IT_USH04 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USH04
      USING LV_FILE
       LS_TABLE .
      FREE IT_USH04 .
      FREE IT_USH04_TMP .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'USH02'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    DATA: IT_USH02_TMP TYPE STANDARD TABLE OF TS_USH02.
    DATA: IT_USH02_TMP1 TYPE STANDARD TABLE OF TS_USH02.
    DATA: WA_USH02_TMP TYPE TS_USH02 .

*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
      SELECT
      MANDT
      BNAME
      MAX( MODDA ) AS MODDA
      FROM USH02  CLIENT SPECIFIED
*    INTO TABLE it_ush02_tmp
      WHERE MANDT =  S_PCLIEN AND MODDA < S_START
      GROUP BY MANDT BNAME.
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_USH02_TMP
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
*OPTION 1

    SELECT
        MANDT
        BNAME
        MODDA
        MODTI
        MODBE
        TCODE
        REPID
        GLTGV
        GLTGB
        USTYP
        CLASS
        UFLAG
        ACCNT
*    codvn
*    pwdinitial
          FROM USH02  CLIENT SPECIFIED
          INTO TABLE IT_USH02_TMP1
          FOR ALL ENTRIES IN IT_USH02_TMP
          WHERE MANDT = IT_USH02_TMP-MANDT AND BNAME = IT_USH02_TMP-BNAME AND MODDA = IT_USH02_TMP-MODDA.

    SORT IT_USH02_TMP1 BY MANDT BNAME MODDA DESCENDING MODTI DESCENDING.

    LOOP AT IT_USH02_TMP INTO WA_USH02.
      READ TABLE IT_USH02_TMP1 INTO WA_USH02_TMP "How do we ensure only topmost line is copied
      WITH KEY MANDT = WA_USH02-MANDT BNAME = WA_USH02-BNAME MODDA = WA_USH02-MODDA BINARY SEARCH.
      APPEND WA_USH02_TMP TO IT_USH02.
      CLEAR WA_USH02.
      CLEAR WA_USH02_TMP.
    ENDLOOP.
    FREE IT_USH02_TMP.
    FREE IT_USH02_TMP1.

*OPTIOn 2

*
*    LOOP AT it_ush02_tmp INTO wa_ush02.
*    SELECT
*    mandt
*    bname
*    modda
*    modti
*    modbe
*    tcode
*    repid
*    gltgv
*    gltgb
*    ustyp
*    class
*    uflag
*    accnt
*    codvn
*    pwdinitial
*    FROM ush02  CLIENT SPECIFIED
*      INTO CORRESPONDING FIELDS OF wa_ush02_tmp
*      UP TO 1 ROWS
*      WHERE mandt = wa_ush02-mandt AND bname = wa_ush02-bname AND modda = wa_ush02-modda
*      ORDER BY modti DESCENDING.
*      ENDSELECT.
*      APPEND wa_ush02_tmp TO it_ush02.
*      CLEAR wa_ush02.
*      CLEAR wa_ush02_tmp.
**Append WA_USH04 into IT_USH04
*    ENDLOOP.
*    FREE it_ush02_tmp.

    SELECT
    MANDT
    BNAME
    MODDA
    MODTI
    MODBE
    TCODE
    REPID
    GLTGV
    GLTGB
    USTYP
    CLASS
    UFLAG
    ACCNT
*    codvn
*    pwdinitial
    FROM USH02  CLIENT SPECIFIED
    APPENDING TABLE IT_USH02
    WHERE MANDT =  S_PCLIEN AND MODDA >= S_START.

    SORT IT_USH02 BY MANDT BNAME MODDA MODTI .

    LV_FILE = 'USH02.ACTT'.
    LS_TABLE = 'MANDT'.
    DESCRIBE FIELD WA_USH02-MANDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'BNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-BNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODDA' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-MODDA
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODTI' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-MODTI
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'MODBE' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-MODBE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TCODE' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-TCODE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'REPID' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-REPID
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGV' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-GLTGV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'GLTGB' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-GLTGB
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'USTYP' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-USTYP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CLASS' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-CLASS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UFLAG' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-UFLAG
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ACCNT' INTO LS_TABLE.
    DESCRIBE FIELD WA_USH02-ACCNT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
*CONCATENATE ls_table '|^|' 'CODVN' into ls_table.
*DESCRIBE FIELD WA_USH02-CODVN
*TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
*CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
*CONCATENATE ls_table '|^|' 'PWDINITIAL' into ls_table.
*DESCRIBE FIELD WA_USH02-PWDINITIAL
*TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
*CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_USH02 = LINES( IT_USH02 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_USH02
      USING LV_FILE
       LS_TABLE .
      FREE IT_USH02 .
      FREE IT_USH02_TMP.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.



  SELECT
  PROFNAME
  SLOTNO
  CURRPROF
  CLASSES
  SEVERITY
  CLIENT
  UNAME
  STATUS
  CUNAME
  CDATE
  SELVAR
  MSGVECT
  FROM RSAUPROF
  INTO TABLE IT_RSAUPROF
  .
  LV_FILE = 'RSAUPROF.ACTT'.
  LS_TABLE = 'PROFNAME'.
  DESCRIBE FIELD WA_RSAUPROF-PROFNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SLOTNO' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-SLOTNO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CURRPROF' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CURRPROF
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CLASSES' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CLASSES
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SEVERITY' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-SEVERITY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CLIENT' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CLIENT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'UNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-UNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STATUS' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-STATUS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CUNAME' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CUNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CDATE' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-CDATE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SELVAR' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-SELVAR
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MSGVECT' INTO LS_TABLE.
  DESCRIBE FIELD WA_RSAUPROF-MSGVECT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_RSAUPROF = LINES( IT_RSAUPROF ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_RSAUPROF
    USING LV_FILE
     LS_TABLE .
    FREE IT_RSAUPROF.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT
  AGR_NAME
  TEXT
  SPRAS
  LINE
  FROM AGR_TEXTS  CLIENT SPECIFIED
*  INTO TABLE it_agr_texts
  WHERE SPRAS = 'EN' AND LINE = '0000'
  .
  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE IT_AGR_TEXTS
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.
*** End of change by SUDHA
  LV_FILE = 'AGR_TEXTS.ACTT'.
  LS_TABLE = 'AGR_NAME'.
  DESCRIBE FIELD WA_AGR_TEXTS-AGR_NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_TEXTS-TEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SPRAS' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_TEXTS-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LINE' INTO LS_TABLE.
  DESCRIBE FIELD WA_AGR_TEXTS-LINE
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_AGR_TEXTS = LINES( IT_AGR_TEXTS ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_AGR_TEXTS
    USING LV_FILE
     LS_TABLE .
    FREE IT_AGR_TEXTS.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.


  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'TBTCO'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
      SELECT
      JOBNAME
      JOBCOUNT
      SDLSTRTDT
      SDLSTRTTM
      SDLUNAME
      STATUS
      ENDDATE
      ENDTIME
      LASTCHDATE
      LASTCHTIME
      LASTCHNAME
      FROM TBTCO
*    INTO TABLE it_tbtco
      WHERE STATUS = 'A' AND SDLSTRTDT >= S_START
      .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_TBTCO
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'TBTCO.ACTT'.
    LS_TABLE = 'JOBNAME'.
    DESCRIBE FIELD WA_TBTCO-JOBNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'JOBCOUNT' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-JOBCOUNT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SDLSTRTDT' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-SDLSTRTDT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SDLSTRTTM' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-SDLSTRTTM
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'SDLUNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-SDLUNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'STATUS' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-STATUS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ENDDATE' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-ENDDATE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ENDTIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-ENDTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LASTCHDATE' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-LASTCHDATE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LASTCHTIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-LASTCHTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LASTCHNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_TBTCO-LASTCHNAME
        TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.


    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_TBTCO = LINES( IT_TBTCO ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_TBTCO
      USING LV_FILE
       LS_TABLE .
      FREE IT_TBTCO.
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.


  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'CDHDR'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
      SELECT
      MANDANT
      OBJECTCLAS
      OBJECTID
      CHANGENR
      USERNAME
      UDATE
      UTIME
      TCODE
      PLANCHNGNR
      ACT_CHNGNO
      WAS_PLANND
      CHANGE_IND
      LANGU
      VERSION
      FROM CDHDR  CLIENT SPECIFIED
*    INTO TABLE it_cdhdr
      WHERE MANDANT =  S_PCLIEN AND OBJECTCLAS = 'PFCG' AND UDATE >= S_START
      .

    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_CDHDR
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'CDHDR.ACTT'.
    LS_TABLE = 'MANDANT'.
    DESCRIBE FIELD WA_CDHDR-MANDANT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'OBJECTCLAS' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-OBJECTCLAS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'OBJECTID' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-OBJECTID
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CHANGENR' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-CHANGENR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'USERNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-USERNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UDATE' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-UDATE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UTIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-UTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TCODE' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-TCODE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PLANCHNGNR' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-PLANCHNGNR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ACT_CHNGNO' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-ACT_CHNGNO
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'WAS_PLANND' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-WAS_PLANND
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CHANGE_IND' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-CHANGE_IND
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LANGU' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-LANGU
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'VERSION' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDHDR-VERSION
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_CDHDR = LINES( IT_CDHDR ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_CDHDR
      USING LV_FILE
       LS_TABLE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'CDHDR'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    IF IT_CDHDR IS NOT INITIAL.
*** Begin of change by SUDHA
      OPEN CURSOR WITH HOLD S_CURSOR FOR
        SELECT
        MANDANT
        OBJECTCLAS
        OBJECTID
        CHANGENR
        TABNAME
        TABKEY
        FNAME
        CHNGIND
        TEXT_CASE
        UNIT_OLD
        UNIT_NEW
        CUKY_OLD
        CUKY_NEW
        VALUE_NEW
        VALUE_OLD
        FROM CDPOS  CLIENT SPECIFIED
*      INTO TABLE it_cdpos
        FOR ALL ENTRIES IN IT_CDHDR
        WHERE CHANGENR = IT_CDHDR-CHANGENR
        AND TABNAME IN ('AGR_DEFINE', 'CD1251', 'AGR_USERS')
        AND OBJECTCLAS = 'PFCG'
        AND MANDANT =  S_PCLIEN.
      DO.
        "fetch data in chunks for every 'maxsize' number of records
        FETCH NEXT CURSOR S_CURSOR
        APPENDING TABLE IT_CDPOS
        PACKAGE SIZE MAXSIZE.
        IF SY-SUBRC <> 0.
          CLOSE CURSOR S_CURSOR.
          EXIT.
        ENDIF.

      ENDDO.
*** End of change by SUDHA

    ENDIF.
    LV_FILE = 'CDPOS.ACTT'.

    LS_TABLE = 'MANDANT'.
    DESCRIBE FIELD WA_CDPOS-MANDANT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'OBJECTCLAS' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-OBJECTCLAS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'OBJECTID' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-OBJECTID
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CHANGENR' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-CHANGENR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TABNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-TABNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TABKEY' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-TABKEY
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'FNAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-FNAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CHNGIND' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-CHNGIND
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TEXT_CASE' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-TEXT_CASE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UNIT_OLD' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-UNIT_OLD
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'UNIT_NEW' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-UNIT_NEW
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CUKY_OLD' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-CUKY_OLD
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'CUKY_NEW' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-CUKY_NEW
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'VALUE_NEW' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-VALUE_NEW
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'VALUE_OLD' INTO LS_TABLE.
    DESCRIBE FIELD WA_CDPOS-VALUE_OLD
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_CDPOS = LINES( IT_CDPOS ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_CDPOS
      USING LV_FILE
       LS_TABLE .
      FREE IT_CDHDR .
      FREE IT_CDPOS .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'E070'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
*** Begin of change by SUDHA
    OPEN CURSOR WITH HOLD S_CURSOR FOR
      SELECT
      TRKORR
      TRFUNCTION
      TRSTATUS
      TARSYSTEM
      KORRDEV
      AS4USER
      AS4DATE
      AS4TIME
      STRKORR
      FROM E070
*    INTO TABLE it_e070
      WHERE AS4DATE >= S_START
      .
    DO.
      "fetch data in chunks for every 'maxsize' number of records
      FETCH NEXT CURSOR S_CURSOR
      APPENDING TABLE IT_E070
      PACKAGE SIZE MAXSIZE.
      IF SY-SUBRC <> 0.
        CLOSE CURSOR S_CURSOR.
        EXIT.
      ENDIF.

    ENDDO.
*** End of change by SUDHA
    LV_FILE = 'E070.ACTT'.
    LS_TABLE = 'TRKORR'.
    DESCRIBE FIELD WA_E070-TRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRFUNCTION' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-TRFUNCTION
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRSTATUS' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-TRSTATUS
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TARSYSTEM' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-TARSYSTEM
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'KORRDEV' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-KORRDEV
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4USER' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-AS4USER
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4DATE' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-AS4DATE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4TIME' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-AS4TIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'STRKORR' INTO LS_TABLE.
    DESCRIBE FIELD WA_E070-STRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_E070 = LINES( IT_E070 ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_E070
      USING LV_FILE
       LS_TABLE .

      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.
  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'E070'.
  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    IF IT_E070 IS NOT INITIAL.

*** Begin of change by SUDHA
      OPEN CURSOR WITH HOLD S_CURSOR FOR
        SELECT
        TRKORR
        LANGU
        AS4TEXT
        FROM E07T
*      INTO TABLE it_e07t
        FOR ALL ENTRIES IN IT_E070
        WHERE TRKORR = IT_E070-TRKORR
        AND LANGU = 'EN'
        .

      DO.
        "fetch data in chunks for every 'maxsize' number of records
        FETCH NEXT CURSOR S_CURSOR
        APPENDING TABLE IT_E07T
        PACKAGE SIZE MAXSIZE.
        IF SY-SUBRC <> 0.
          CLOSE CURSOR S_CURSOR.
          EXIT.
        ENDIF.

      ENDDO.
*** End of change by SUDHA
    ENDIF.
    LV_FILE = 'E07T.ACTT'.
    LS_TABLE = 'TRKORR'.
    DESCRIBE FIELD WA_E07T-TRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LANGU' INTO LS_TABLE.
    DESCRIBE FIELD WA_E07T-LANGU
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'AS4TEXT' INTO LS_TABLE.
    DESCRIBE FIELD WA_E07T-AS4TEXT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_E07T = LINES( IT_E07T ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_E07T
      USING LV_FILE
       LS_TABLE .

      FREE IT_E07T .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.




  READ TABLE P_TABLES WITH KEY SIGN = 'I' OPTION = 'EQ' LOW = 'E070'.

  IF CK_POP <> 'X' OR SY-SUBRC <> 0.
    IF IT_E070 IS NOT INITIAL.
*** Begin of change by SUDHA
      OPEN CURSOR WITH HOLD S_CURSOR FOR
          SELECT
          TRTIME
          TRKORR
          TARSYSTEM
          TRCLI
          TRSTEP
          ALLCLI
          PROJECT
          TRUSER
          RETCODE
          HOST
          ADMIN
          TPSTAT_KEY
          FROM TPALOG
*      INTO TABLE it_tpalog
          FOR ALL ENTRIES IN IT_E070
          WHERE TRKORR = IT_E070-TRKORR
          .
      DO.
        "fetch data in chunks for every 'maxsize' number of records
        FETCH NEXT CURSOR S_CURSOR
        APPENDING TABLE IT_TPALOG
        PACKAGE SIZE MAXSIZE.
        IF SY-SUBRC <> 0.
          CLOSE CURSOR S_CURSOR.
          EXIT.
        ENDIF.

      ENDDO.
*** End of change by SUDHA
    ENDIF.
    LV_FILE = 'TPALOG.ACTT'.
    LS_TABLE = 'TRTIME'.
    DESCRIBE FIELD WA_TPALOG-TRTIME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRKORR' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRKORR
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TARSYSTEM' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TARSYSTEM
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRCLI' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRCLI
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRSTEP' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRSTEP
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ALLCLI' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-ALLCLI
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'PROJECT' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-PROJECT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TRUSER' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TRUSER
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'RETCODE' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-RETCODE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'HOST' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-HOST
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ADMIN' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-ADMIN
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'TPSTAT_KEY' INTO LS_TABLE.
    DESCRIBE FIELD WA_TPALOG-TPSTAT_KEY
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_TPALOG = LINES( IT_TPALOG ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_TPALOG
      USING LV_FILE
       LS_TABLE .
      FREE IT_E070 .
      FREE IT_TPALOG .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ENDIF.
  ENDIF.

  SELECT
  TABNAME
  ID
  STEXT
  LANGU
  FROM SSM_CIDT
  INTO TABLE IT_SSM_CIDT
  WHERE TABNAME = 'PRGN_CUST' AND LANGU = 'EN' AND ( ID IN ('CHECK_S_USER_SAS', 'ASSIGN_ROLE_AUTH') )
  .
  LV_FILE = 'SSM_CIDT.ACTT'.
  LS_TABLE = 'TABNAME'.
  DESCRIBE FIELD WA_SSM_CIDT-TABNAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'ID' INTO LS_TABLE.
  DESCRIBE FIELD WA_SSM_CIDT-ID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'STEXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_SSM_CIDT-STEXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LANGU' INTO LS_TABLE.
  DESCRIBE FIELD WA_SSM_CIDT-LANGU
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_SSM_CIDT = LINES( IT_SSM_CIDT ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_SSM_CIDT
    USING LV_FILE
     LS_TABLE .
    FREE IT_SSM_CIDT .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

  SELECT
  ID
  PATH
  FROM PRGN_CUST
  INTO TABLE IT_PRGN_CUST
  .
  LV_FILE = 'PRGN_CUST.ACTT'.
  LS_TABLE = 'ID'.
  DESCRIBE FIELD WA_PRGN_CUST-ID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'PATH' INTO LS_TABLE.
  DESCRIBE FIELD WA_PRGN_CUST-PATH
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_PRGN_CUST = LINES( IT_PRGN_CUST ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_PRGN_CUST
    USING LV_FILE
     LS_TABLE .
    FREE IT_PRGN_CUST .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.


  IF ISTABLE_SEC_POLICY_RT = 'Yes'.
    DATA: COLUMN_SEC_POLICY_RT TYPE STRING.
    DATA TABLE_SEC_POLICY_RT TYPE STRING.
    COLUMN_SEC_POLICY_RT = 'CLIENT NAME ATTRIB_KEY ATTRIB_VALUE'.
    TABLE_SEC_POLICY_RT = 'SEC_POLICY_RT'.
    SELECT
    (COLUMN_SEC_POLICY_RT)
    FROM (TABLE_SEC_POLICY_RT)  CLIENT SPECIFIED
    INTO TABLE IT_SEC_POLICY_RT
    .
    LV_FILE = 'SEC_POLICY_RT.ACTT'.
    LS_TABLE = 'CLIENT'.
    DESCRIBE FIELD WA_SEC_POLICY_RT-CLIENT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'NAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_RT-NAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ATTRIB_KEY' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_RT-ATTRIB_KEY
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'ATTRIB_VALUE' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_RT-ATTRIB_VALUE
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_SEC_POLICY_RT = LINES( IT_SEC_POLICY_RT ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_SEC_POLICY_RT
      USING LV_FILE
       LS_TABLE .
      FREE IT_SEC_POLICY_RT .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .

    ENDIF.

  ENDIF.


  IF ISTABLE_SEC_POLICY_CUSTT = 'Yes'.

    DATA: COLUMN_SEC_POLICY_CUSTT TYPE STRING.
    DATA: TABLE_SEC_POLICY_CUSTT TYPE STRING.

    COLUMN_SEC_POLICY_CUSTT = 'CLIENT LANGU POLICY_NAME POLICY_TEXT'.
    TABLE_SEC_POLICY_CUSTT = 'SEC_POLICY_CUSTT'.

    SELECT
      (COLUMN_SEC_POLICY_CUSTT)
    FROM (TABLE_SEC_POLICY_CUSTT)  CLIENT SPECIFIED
    INTO TABLE IT_SEC_POLICY_CUSTT
    WHERE LANGU = 'EN'
    .
    LV_FILE = 'SEC_POLICY_CUSTT.ACTT'.
    LS_TABLE = 'CLIENT'.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-CLIENT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'LANGU' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-LANGU
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'POLICY_NAME' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-POLICY_NAME
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    CONCATENATE LS_TABLE '|^|' 'POLICY_TEXT' INTO LS_TABLE.
    DESCRIBE FIELD WA_SEC_POLICY_CUSTT-POLICY_TEXT
    TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
    CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
    LV_SEC_POLICY_CUSTT = LINES( IT_SEC_POLICY_CUSTT ) .
    IF SY-SUBRC = 0.
      PERFORM CONV_TABLE_TO_TEXT TABLES IT_SEC_POLICY_CUSTT
      USING LV_FILE
       LS_TABLE .
      FREE IT_SEC_POLICY_CUSTT .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .
    ELSE.
      APPEND LS_TABLE TO LT_TABLE .
      PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
      CLEAR LT_TABLE .
      CLEAR LS_TABLE .

    ENDIF.

  ENDIF.

  SELECT
  AREA
  SUBID
  CLASID
  SUBCLASID
  SEVERITY
  MONBEW
  MONKAT
  FROM TSL1D  CLIENT SPECIFIED
  INTO TABLE IT_TSL1D
  .
  LV_FILE = 'TSL1D.ACTT'.
  LS_TABLE = 'AREA'.
  DESCRIBE FIELD WA_TSL1D-AREA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-SUBID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'CLASID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-CLASID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBCLASID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-SUBCLASID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SEVERITY' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-SEVERITY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MONBEW' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-MONBEW
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'MONKAT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1D-MONKAT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSL1D = LINES( IT_TSL1D ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSL1D
    USING LV_FILE
     LS_TABLE .
    FREE IT_TSL1D.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.
  SELECT
  SPRAS
  AREA
  SUBID
  TXT
  FROM TSL1T  CLIENT SPECIFIED
  INTO TABLE IT_TSL1T
    WHERE SPRAS = 'EN'
  .
  LV_FILE = 'TSL1T.ACTT'.
  LS_TABLE = 'SPRAS'.
  DESCRIBE FIELD WA_TSL1T-SPRAS
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'AREA' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1T-AREA
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'SUBID' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1T-SUBID
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'TXT' INTO LS_TABLE.
  DESCRIBE FIELD WA_TSL1T-TXT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_TSL1T = LINES( IT_TSL1T ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_TSL1T
    USING LV_FILE
     LS_TABLE .
    FREE IT_TSL1T.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

  SELECT
  NAME
  INSTNO
  HOST
  LASTDAY
  INSTSHORT
  HOSTSHORT
  FROM SAPWLSERV
  INTO TABLE IT_SAPWLSERV
  .
  LV_FILE = 'SAPWLSERV.ACTT'.
  LS_TABLE = 'NAME'.
  DESCRIBE FIELD WA_SAPWLSERV-NAME
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'INSTNO' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-INSTNO
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HOST' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-HOST
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'LASTDAY' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-LASTDAY
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'INSTSHORT' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-INSTSHORT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  CONCATENATE LS_TABLE '|^|' 'HOSTSHORT' INTO LS_TABLE.
  DESCRIBE FIELD WA_SAPWLSERV-HOSTSHORT
  TYPE LV_TYPE LENGTH LV_LEN IN BYTE MODE.
  CONCATENATE LS_TABLE ' [' LV_TYPE '(' LV_LEN ')]' INTO LS_TABLE.
  LV_SAPWLSERV = LINES( IT_SAPWLSERV ) .
  IF SY-SUBRC = 0.
    PERFORM CONV_TABLE_TO_TEXT TABLES IT_SAPWLSERV
    USING LV_FILE
     LS_TABLE .
    FREE IT_SAPWLSERV.
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ELSE.
    APPEND LS_TABLE TO LT_TABLE .
    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
    CLEAR LT_TABLE .
    CLEAR LS_TABLE .
  ENDIF.

* Old Report Code Begin*
************************************************************************
* Report       :ZBCC_GCC_DEFAULTSAPR3_PASSWORD                         *
* Title        :Default SAP R/3 password                               *
* Rule ID      :1906                                                   *
* Purpose      :This program lists whether default SAP R/3 passwords   *
*               for SAP*, DDIC, SAPCPIC, and EarlyWatch (in client 066)*
*                are changed.                                          *
* Version      : v01                                                   *
* Author       : Prema Nalam           - Deloitte and Touche.          *
* Creation Date: 13/06/2007                                            *
* Kintana Req  : 41741                                                 *
*                                                                      *
************************************************************************
*                                                                      *
*            Copyright (c) 2001 by Deloitte & Touche                   *
*                      All rights reserved                             *
*                                                                      *
************************************************************************
* No part of this program may be used or reproduced in any form by any *
* means without written permission from Deloitte & Touche.             *
*                                                                      *
* This is confidential and proprietary information that may not be     *
* published, disclosed, or made available without the prior written    *
* consent of Deloitte & Touche.                                        *
*                                                                      *
************************************************************************
* Modification Log                                                     *
*                                                                      *
* Vrsn    Date           Name         Correction            Kintana    *
*----------------------------------------------------------------------*
*  1    07/04        Vidyadhar      Performance Analysis               *
*                                                                      *
************************************************************************
  CONCATENATE P_FILE 'BCC_GCC_Default_SAPR3_Password.ACTT' INTO P_1906 .
**perform to get the data.
  PERFORM GET_DATA_1906.
**perform to display the data.
  PERFORM DISPLAY_DATA_1906.
*  Old Report Code End*


*#ACTTSAP12.0 Release 12.0 Changes End*

  LV_TIME2 = SY-UZEIT .
  LV_FILE = 'ACTT_config_settings.ACTT'.
  CONCATENATE 'SettingName VARCHAR(100)'
  '|^|' 'SettingValue NVARCHAR(1000)' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Extract Date' '|^|' SY-DATUM INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'SAP System ID' '|^|' SY-SYSID INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'SAP Server Name' '|^|' SY-HOST INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Database Version' '|^|' 'SAP' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Client Selected By User' '|^|' S_PCLIEN INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Extract Script Version' '|^|' '13.0' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Extract Version' '|^|' 'BOTH' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  DATA LV_STEXT TYPE TEXT40 .
  SELECT SINGLE STEXT FROM CVERS_TXT INTO LV_STEXT WHERE LANGU = SY-LANGU.
  CONCATENATE 'SAP ERP Version' '|^|' LV_STEXT INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Number tables extracted' '|^|' TABLE_COUNT INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Output path' '|^|' P_FILE INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Processing' '|^|' INTO LS_TABLE .
  IF RB_FORE = 'X' .
    CONCATENATE LS_TABLE 'Foreground' INTO LS_TABLE .
  ELSE.
    CONCATENATE LS_TABLE 'Background' INTO LS_TABLE .
  ENDIF.
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'Exclude Profiles' '|^|' INTO LS_TABLE .
  IF CK_PROF = 'X' .
    CONCATENATE LS_TABLE 'Yes' INTO LS_TABLE .
  ELSE.
    CONCATENATE LS_TABLE 'No' INTO LS_TABLE .
  ENDIF.
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
  CLEAR LT_TABLE .
  CLEAR LV_FILE .

  LV_FILE = 'ACTT_config_fieldterminator.ACTT'.
  LS_TABLE = '|^|' .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
  CLEAR LT_TABLE .
  CLEAR LV_FILE.

  LV_FILE = 'ACTT_config_tablerecordcount.ACTT'.
  CONCATENATE 'TableName ' '|^|' 'RecordCount' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_1016' '|^|' LV_AGR_1016  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_1251' '|^|' LV_AGR_1251  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_1252' '|^|' LV_AGR_1252  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_AGRS' '|^|' LV_AGR_AGRS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_USERS' '|^|' LV_AGR_USERS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'ANKA' '|^|' LV_ANKA  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'ANKT' '|^|' LV_ANKT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'CWBNTCUST' '|^|' LV_CWBNTCUST  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'CWBNTHEAD' '|^|' LV_CWBNTHEAD  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DBTABLOG' '|^|' LV_DBTABLOG  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DD03L' '|^|' LV_DD03L  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DD04L' '|^|' LV_DD04L  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DD04T' '|^|' LV_DD04T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DD09L' '|^|' LV_DD09L  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'DEVACCESS' '|^|' LV_DEVACCESS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'MARV' '|^|' LV_MARV  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'NRIV' '|^|' LV_NRIV  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'PAHI' '|^|' LV_PAHI  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'SKAT' '|^|' LV_SKAT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T000' '|^|' LV_T000  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T001' '|^|' LV_T001  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T001B' '|^|' LV_T001B  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T001R' '|^|' LV_T001R  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T001W' '|^|' LV_T001W  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T003' '|^|' LV_T003  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T003T' '|^|' LV_T003T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T004' '|^|' LV_T004  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T004T' '|^|' LV_T004T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T009' '|^|' LV_T009  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T009T' '|^|' LV_T009T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T030' '|^|' LV_T030  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T030B' '|^|' LV_T030B  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T030H' '|^|' LV_T030H  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T030R' '|^|' LV_T030R  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T030W' '|^|' LV_T030W  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T043G' '|^|' LV_T043G  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T043GT' '|^|' LV_T043GT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T043T' '|^|' LV_T043T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T055F' '|^|' LV_T055F  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T077D' '|^|' LV_T077D  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T077K' '|^|' LV_T077K  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T077X' '|^|' LV_T077X  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T077Y' '|^|' LV_T077Y  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T082A' '|^|' LV_T082A  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T082B' '|^|' LV_T082B  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T082G' '|^|' LV_T082G  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T082H' '|^|' LV_T082H  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T082L' '|^|' LV_T082L  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T082M' '|^|' LV_T082M  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T082T' '|^|' LV_T082T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T090NA' '|^|' LV_T090NA  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T090NAT' '|^|' LV_T090NAT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T090NAZ' '|^|' LV_T090NAZ  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T090NDT' '|^|' LV_T090NDT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T090NPT' '|^|' LV_T090NPT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T090NRT' '|^|' LV_T090NRT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T090NST' '|^|' LV_T090NST  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T091T' '|^|' LV_T091T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T093' '|^|' LV_T093  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T093C' '|^|' LV_T093C  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T093D' '|^|' LV_T093D  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T093T' '|^|' LV_T093T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T095' '|^|' LV_T095  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T095B' '|^|' LV_T095B  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T095T' '|^|' LV_T095T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T096' '|^|' LV_T096  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T096T' '|^|' LV_T096T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T100' '|^|' LV_T100  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T156' '|^|' LV_T156  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T156T' '|^|' LV_T156T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T156W' '|^|' LV_T156W  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T156X' '|^|' LV_T156X  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T159L' '|^|' LV_T159L  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T160M' '|^|' LV_T160M  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T161' '|^|' LV_T161  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T161T' '|^|' LV_T161T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T162' '|^|' LV_T162  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T162K' '|^|' LV_T162K  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T162T' '|^|' LV_T162T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T162X' '|^|' LV_T162X  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T162Y' '|^|' LV_T162Y  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T163K' '|^|' LV_T163K  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T169G' '|^|' LV_T169G  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T169P' '|^|' LV_T169P  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T691F' '|^|' LV_T691F  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'T691G' '|^|' LV_T691G  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TADIR' '|^|' LV_TADIR  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TBAER' '|^|' LV_TBAER  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TBSL' '|^|' LV_TBSL  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TBSLT' '|^|' LV_TBSLT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TBTCO' '|^|' LV_TBTCO  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TCDOB' '|^|' LV_TCDOB  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TCURF' '|^|' LV_TCURF  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TDDAT' '|^|' LV_TDDAT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TKA01' '|^|' LV_TKA01  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TKA02' '|^|' LV_TKA02  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TMC4' '|^|' LV_TMC4  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TMODP' '|^|' LV_TMODP  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TRDIR' '|^|' LV_TRDIR  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTC' '|^|' LV_TSTC  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTCA' '|^|' LV_TSTCA  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTCP' '|^|' LV_TSTCP  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSTCT' '|^|' LV_TSTCT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TVAK' '|^|' LV_TVAK  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TVAKT' '|^|' LV_TVAKT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USORG' '|^|' LV_USORG  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR02' '|^|' LV_USR02  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
*#ACTTSAP12.0 Begin of changes Consider SECURITY_POLICY Field*
  IF ISCOLUMN_USR02_SECURITY_POLICY = 'Yes'.
    CONCATENATE 'USR02_CC' '|^|' LV_USR02_CC_1  INTO LS_TABLE .
  ELSE.
    CONCATENATE 'USR02_CC' '|^|' LV_USR02_CC  INTO LS_TABLE .
  ENDIF.
*#ACTTSAP12.0 End of changes Consider*
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR10' '|^|' LV_USR10  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR21' '|^|' LV_USR21  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR40' '|^|' LV_USR40  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USREFUS' '|^|' LV_USREFUS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'UST04' '|^|' LV_UST04  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'UST10C' '|^|' LV_UST10C  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'UST10S' '|^|' LV_UST10S  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'UST12' '|^|' LV_UST12  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'adrp' '|^|' LV_ADRP  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 't100C' '|^|' LV_T100C  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
*#ACTTSAP12.0 Release 12.0 Changes Begin*
  CONCATENATE 'CDHDR' '|^|' LV_CDHDR  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'CDPOS' '|^|' LV_CDPOS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'E070' '|^|' LV_E070  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'E07T' '|^|' LV_E07T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'SSM_CIDT' '|^|' LV_SSM_CIDT  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'PAT03' '|^|' LV_PAT03  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'PRGN_CUST' '|^|' LV_PRGN_CUST  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  IF ISTABLE_SEC_POLICY_RT = 'Yes'.
    CONCATENATE 'SEC_POLICY_RT' '|^|' LV_SEC_POLICY_RT  INTO LS_TABLE .
    APPEND LS_TABLE TO LT_TABLE .
    CLEAR LS_TABLE.
  ENDIF.

  IF ISTABLE_SEC_POLICY_CUSTT = 'Yes'.
    CONCATENATE 'SEC_POLICY_CUSTT' '|^|' LV_SEC_POLICY_CUSTT  INTO LS_TABLE .
    APPEND LS_TABLE TO LT_TABLE .
    CLEAR LS_TABLE.
  ENDIF.
  CONCATENATE 'TPALOG' '|^|' LV_TPALOG  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TVIMF' '|^|' LV_TVIMF  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USH02' '|^|' LV_USH02  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USH04' '|^|' LV_USH04  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'USR04' '|^|' LV_USR04  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'AGR_TEXTS' '|^|' LV_AGR_TEXTS  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'RSAUPROF' '|^|' LV_RSAUPROF  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'SAPWLSERV' '|^|' LV_SAPWLSERV  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSL1D' '|^|' LV_TSL1D  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'TSL1T' '|^|' LV_TSL1T  INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
*#ACTTSAP12.0 Release 12.0 Changes Begin*

  CONCATENATE 'Start Time' '|^|' LV_TIME1 INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  CONCATENATE 'End Time' '|^|' LV_TIME2 INTO LS_TABLE.
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE.
  PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
  CLEAR LT_TABLE .
  CLEAR LV_FILE .
  LV_FILE = 'ACTT_config_userinput.ACTT'.
  CONCATENATE 'VariableValue' '|^|'
  'NameInput' '|^|'

  'PullValuesFrom' '|^|'
  'ValueUsed' '|^|'
  'Mandatory' '|^|'
  'NoInterval' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CONCATENATE 'D020S-PROG' '|^|'
  'SAPLCOIH' '|^|'
  'Program Name' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'DD03L-TABNAME' '|^|'
  'WHERE TABNAME IN (''T095'', ''T095B'', ''ANLZ'')' '|^|'
  'TABNAME' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'DD09L-TABNAME' '|^|'
  'WHERE TABNAME IN (''T095'', ''T095B'', ''ANLZ'')' '|^|'
  'TABNAME' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'NRIV-OBJECT' '|^|'
  'WHERE OBJECT IN (''ANLAGENNR'', ''RF_BELEG'')' '|^|'
  'OBJECT' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'OBJECT-TADIR' '|^|'
  'SYST' '|^|'
  'Object Type' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'pclient' '|^|'
  S_PCLIEN '|^|'
  'Client' '|^|'
  'T000-MANDT' '|^|'
  'X' '|^|'
  'X' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .

  CONCATENATE 'Expert Mode' '|^|'
  CK_POP '|^|'
  'Expert Mode' '|^|'
  'Expert Mode' '|^|'
  'Expert Mode' '|^|'
  'Expert Mode' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  IF P_TABLES IS NOT INITIAL.
    LOOP AT P_TABLES INTO WA_P_TABLES.
      CONCATENATE 'Tables in Expert Mode' '|^|'
      WA_P_TABLES '|^|'
      'Tables in Expert Mode' '|^|'
      'Tables in Expert Mode' '|^|'
      'Tables in Expert Mode' '|^|'
      'Tables in Expert Mode' INTO LS_TABLE .
      APPEND LS_TABLE TO LT_TABLE .
      CLEAR LS_TABLE .
    ENDLOOP.
  ENDIF.



  CONCATENATE 'PGMID-TADIR' '|^|'
  'HEAD' '|^|'
  'Program ID in Requests and Tasks' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'plang' '|^|'
  'EN' '|^|'
  'Language' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'T030B-KTOSL' '|^|'
  'KDF' '|^|'
  'Transaction Key' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'T030R-KTOSL' '|^|'
  'WHERE KTOSL IN (''HRF'',''HRC'',''HRA'',''HRD'',''HRK'')' '|^|'
  'KTOSL' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'T093-BUHBKT' '|^|'
  '1' '|^|'
  'Post to G/L' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'T096-BPLAKT' '|^|'
  'X' '|^|'
  'Chart of Dep Active' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'T100C-MSGNR' '|^|'
  'WHERE MSGNR IN (''207'',''117'',''108'')' '|^|'
  'MSGNR' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'T100-MSGNR' '|^|'
  'WHERE MSGNR IN (''207'',''117'',''108'')' '|^|'
  'MSGNR' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'T160M-MSGNR' '|^|'
  'WHERE MSGNR IN (''207'',''117'',''108'')' '|^|'
  'MSGNR' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'TCDOB-TABNAME' '|^|'
  'WHERE TABNAME IN (''T095'', ''T095B'', ''ANLZ'')' '|^|'
  'TABNAME' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .


  CONCATENATE 'TR-SUBC' '|^|'
  'WHERE SUBC IN (''1'',''M'',''F'')''|^|'
    'Program Type TRDIR' '|^|'
    '' '|^|'
    '' '|^|'
    '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .

  CONCATENATE 'TBTCO-STATUS' '|^|'
  'A''|^|'
   '' '|^|'
   '' '|^|'
   '' '|^|'
   '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .

  CONCATENATE 'TSTCA-TCODE' '|^|'
  'WHERE TCODE LIKE ''Z%'' OR TCODE LIKE ''Y%''' '|^|'
  'TCODE' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .

  CONCATENATE 'TSTCT-TCODE' '|^|'
  'WHERE TCODE LIKE ''Z%'' OR TCODE LIKE ''Y%''' '|^|'
  'TCODE' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'DBTABLOG-TABNAME' '|^|'
'WHERE TABNAME IN (''T000'', ''TADIR'', ''PAHI'')''|^|'
'TABNAME' '|^|'
'' '|^|'
'' '|^|'
 '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
  CONCATENATE 'TMC4-MCINF' '|^|'
 'S066''|^|'
  'Info Structure' '|^|'
  '' '|^|'
  '' '|^|'
  '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
*#ACTTSAP12.0 Release 12.0 Changes Begin*
*Add Start Date Value for change log*
  CONCATENATE 'Change Log Start Date' '|^|'
 S_START '|^|'
 '' '|^|'
 '' '|^|'
 '' '|^|'
 '' INTO LS_TABLE .
  APPEND LS_TABLE TO LT_TABLE .
  CLEAR LS_TABLE .
*#ACTTSAP12.0 Release 12.0 Changes End*

  PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
  CLEAR LT_TABLE .
  CLEAR LV_FILE .

* Removed the old report code and placed on top


*&---------------------------------------------------------------------*
*&      Form  download_gui
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LT_TABLE   text
*      -->LV_FILE    text
*----------------------------------------------------------------------*

FORM download_gui  TABLES lt_table TYPE tt_text_table
USING lv_file TYPE string .

** Begin of change - sudha
  IF lv_file CS 'config'.
    PERFORM check_file USING lv_file.
  ENDIF.
**End of change - sudha

  CONCATENATE p_file lv_file INTO lv_file .
  IF rb_fore = 'X' .
    CALL FUNCTION 'GUI_DOWNLOAD '
      EXPORTING
        filename                = lv_file
        filetype                = 'ASC'
        append                  = 'X'    "Added by SUDHA for resolving memory dump
        write_field_separator   = ' '
        codepage                = '4103'
        write_bom               = 'X'
      TABLES
        data_tab                = lt_table
      EXCEPTIONS
        file_write_error        = 1
        no_batch                = 2
        gui_refuse_filetransfer = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    lv_dataset = lv_file .
*    OPEN DATASET lv_dataset FOR OUTPUT IN TEXT MODE ENCODING UTF-8 . "Commented by SUDHA for resolving memory dump
    OPEN DATASET lv_dataset FOR APPENDING IN TEXT MODE ENCODING UTF-8 . "Added by SUDHA for resolving memory dump
    LOOP AT lt_table INTO ls_table .
      TRANSFER ls_table TO lv_dataset .
    ENDLOOP.
    CLOSE DATASET lv_dataset .
  ENDIF.
  ENDFORM .                    "download_gui


*&---------------------------------------------------------------------*
*&      Form  conv_table_to_text
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->IT_TABLE1  text
*      -->LV_FILE    text
*      -->LS_TABLE   text
*----------------------------------------------------------------------*
FORM conv_table_to_text TABLES it_table1 TYPE STANDARD TABLE
USING lv_file TYPE string
ls_table   TYPE string.
  DATA: lv_text_line TYPE string.
*  DATA: lv_text_line(255) TYPE c.
  FIELD-SYMBOLS: <ls_item_stru> TYPE ANY.
  FIELD-SYMBOLS: <lv_field_value> TYPE ANY.
  DATA: lv_field_value TYPE string.
*  DATA: lv_field_value TYPE char255.
  DATA: lv_separator TYPE char3.
  DATA: lv_fieldcheck TYPE c.
  DATA: gt_text_table TYPE tt_text_table.
  DATA: lv_lines(20) TYPE c.
  DATA: lv_file1 TYPE string.
  FIELD-SYMBOLS: <ls_item> TYPE ANY.

** Begin of change - sudha
  FIELD-SYMBOLS: <lt_table> TYPE INDEX TABLE.
  DATA: ref_tab TYPE REF TO data.
** End of change - sudha
*  FIELD-SYMBOLS: <gt_tab_items> TYPE INDEX TABLE.
*  ASSIGN it_table1[] TO  <gt_tab_items>.
  lv_separator = '|^|'.
  DATA: lv_tabix TYPE sy-tabix. "Added for resolving memory dump

  INSERT ls_table INTO gt_text_table INDEX 1 .

** Begin of change - sudha
  PERFORM check_file USING lv_file.


  LOOP AT it_table1 ASSIGNING <ls_item>.
** End of change - Sudha
    lv_file1 = lv_file.
    lv_tabix = sy-tabix. "Added for resolving memory dump
    CLEAR lv_text_line.
    CLEAR lv_fieldcheck.
    ASSIGN <ls_item> TO <ls_item_stru>.
    DO.
      ASSIGN COMPONENT sy-index OF STRUCTURE
      <ls_item_stru> TO <lv_field_value>.
      IF sy-subrc <> 0.
        EXIT.
      ENDIF.
      lv_field_value = <lv_field_value>.
      IF lv_text_line IS INITIAL AND lv_fieldcheck IS INITIAL .
        lv_text_line = lv_field_value .
        lv_fieldcheck = '1'.
      ELSE.
        CONCATENATE lv_text_line lv_field_value INTO
        lv_text_line SEPARATED BY lv_separator.
      ENDIF.
    ENDDO.
    APPEND lv_text_line TO gt_text_table.

    lv_lines = LINES( gt_text_table ).

    IF lv_lines > 100000.
      PERFORM download_gui TABLES gt_text_table USING lv_file1.
      CLEAR : gt_text_table, lv_file1.
    ENDIF.
  ENDLOOP.
  table_count = table_count + 1.
  IF gt_text_table IS NOT INITIAL.

    PERFORM download_gui TABLES gt_text_table USING lv_file.
  ENDIF.
** begin of change - sudha
  CLEAR: gt_text_table , lv_file1 , lv_file.
  FREE: gt_text_table.
** end of change - sudha

ENDFORM .                    "conv_table_to_text

* Old Report Code Begin*

*REPORT  zbcc_gcc_defaultsapr3_password.
*TABLES : usr02.

*&---------------------------------------------------------------------*
*& Selection Screen Declarations
*&---------------------------------------------------------------------*
*SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME.
*PARAMETERS:p_client TYPE sy-mandt DEFAULT sy-mandt.
*SELECTION-SCREEN END OF BLOCK b1.
*&---------------------------------------------------------------------*
*& Start of selection Declarations
*&---------------------------------------------------------------------*
*START-OF-SELECTION.

*&---------------------------------------------------------------------*
*&      Form  get_data_1906
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA_1906 .
  CLEAR SAPSTAR_VALUE_1906.                                     " note 578891
  CALL 'C_SAPGPARAM' ID 'NAME' FIELD 'login/no_automatic_user_sapstar'
                     ID 'VALUE' FIELD SAPSTAR_VALUE_1906.

  SELECT MANDT
         FROM
         T000
         INTO TABLE  T_T000_1906.
  IF SY-SUBRC EQ 0.
    SORT T_T000_1906 BY CLIENT.
  ENDIF.
*Begin of changes by gentelbh on 07/04.

*** Begin of change by SUDHA
  OPEN CURSOR WITH HOLD S_CURSOR FOR
  SELECT MANDT
         BNAME
         BCODE
         CODVN
         PASSCODE
         FROM USR02
         CLIENT SPECIFIED.
*         INTO TABLE t_usr02.

  DO.
    "fetch data in chunks for every 'maxsize' number of records
    FETCH NEXT CURSOR S_CURSOR
    APPENDING TABLE T_USR02
    PACKAGE SIZE MAXSIZE.
    IF SY-SUBRC <> 0.
      CLOSE CURSOR S_CURSOR.
      EXIT.
    ENDIF.

  ENDDO.

  IF T_USR02 IS NOT INITIAL.
*    if sy-subrc = 0.
    SORT T_USR02 BY BNAME MANDT.
  ENDIF.
*** End of change by SUDHA
*End of changes by gentelbh on 07/04.

  LOOP AT T_T000_1906 INTO W_T000_1906.
*check SAP*.
    CLEAR T_USR02_1906.

**** begin of change by madhuri - 2/29/2016

    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                       BNAME = 'SAP*'
                       MANDT = W_T000_1906-CLIENT
                       BINARY SEARCH.

    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 2.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 11.

        WHEN 'A'.
          IF  <FS_USR02>-BCODE = CODEAS1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSEIF  <FS_USR02>-BCODE = CODEAS2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'B'.
          IF  <FS_USR02>-BCODE = CODEBS1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSEIF  <FS_USR02>-BCODE = CODEBS2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE =  LC_SAPD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE =  LC_SAPE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE =  CODEBS1_1906 AND <FS_USR02>-PASSCODE = LC_SAPI .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE =  CODEBS1_1906 AND <FS_USR02>-PASSCODE = LC_SAPI .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 3.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAP*' 1.
          ENDIF.
      ENDCASE.
    ENDIF.

**   Check DDIC
    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                       BNAME = 'DDIC'
                       MANDT = W_T000_1906-CLIENT
                       BINARY SEARCH.

    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 5.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODEAD1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSEIF <FS_USR02>-BCODE = CODEAD2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODEBD1_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSEIF <FS_USR02>-BCODE = CODEBD2_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_DDICD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_DDICE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODEBD2_1906 AND <FS_USR02>-PASSCODE = LC_DDICF.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODEBD2_1906 AND <FS_USR02>-PASSCODE = LC_DDICF.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 4.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'DDIC' 1.
          ENDIF.
      ENDCASE.
    ENDIF.

**   Check SAPCPIC

    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                      BNAME = 'SAPCPIC'
                      MANDT = W_T000_1906-CLIENT
                      BINARY SEARCH .
*
    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 5.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODEACP_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODEBCP_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_SAPCPICD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_SAPCPICE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODEBCP_1906 AND <FS_USR02>-PASSCODE = LC_SAPCPICF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSEIF <FS_USR02>-BCODE = CODEBCP_1906 AND <FS_USR02>-PASSCODE = LC_SAPCPICF2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSEIF <FS_USR02>-PASSCODE = LC_SAPCPICF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODEBCP_1906 AND <FS_USR02>-PASSCODE = LC_SAPCPICF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 6.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'SAPCPIC' 1.
          ENDIF.
      ENDCASE.
    ENDIF.

**   Check EARLYWATCH
    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                         BNAME = 'EARLYWATCH'
                         MANDT = W_T000_1906-CLIENT
                         BINARY SEARCH .
    IF SY-SUBRC <> 0.
      IF W_T000_1906-CLIENT = '066'.
        PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 5.
      ENDIF.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.

          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODEAEW_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODEBEW_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_EARLYD.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_EARLYE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODEBEW_1906 AND <FS_USR02>-PASSCODE = LC_EARLYF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSEIF <FS_USR02>-BCODE = CODEBEW_1906 AND <FS_USR02>-PASSCODE = LC_EARLYF2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 10.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSEIF <FS_USR02>-PASSCODE =  LC_EARLYF1 .
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODEBEW_1906 AND <FS_USR02>-PASSCODE = LC_EARLYF1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 7.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'EARLYWATCH' 1.
          ENDIF.

      ENDCASE.
    ENDIF.

**    Check TMSADM

    READ TABLE T_USR02 ASSIGNING <FS_USR02> WITH KEY
                       BNAME = 'TMSADM'
                       MANDT = W_T000_1906-CLIENT
                       BINARY SEARCH.

    IF SY-SUBRC <> 0.
      PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 5.
    ELSE.
      CASE <FS_USR02>-CODVN.
        WHEN 'X'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 11.
        WHEN 'A'.
          IF <FS_USR02>-BCODE = CODETMS1A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS1B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'B'.
          IF <FS_USR02>-BCODE = CODETMS1A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS1B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSEIF <FS_USR02>-BCODE = CODETMS2A_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'C' .
          IF <FS_USR02>-BCODE = CODETMS1B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'D'.
          IF <FS_USR02>-BCODE = LC_TMSD1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = LC_TMSD2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'E'.
          IF <FS_USR02>-BCODE = LC_TMSE1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'G'.
          IF <FS_USR02>-BCODE = CODETMS1B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'F'.
          IF <FS_USR02>-BCODE = SPACE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
        WHEN 'H'.
          PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 10.
        WHEN 'I'.
          IF <FS_USR02>-BCODE = CODETMS1B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM1.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 8.
          ELSEIF <FS_USR02>-BCODE = CODETMS2B_1906 AND <FS_USR02>-PASSCODE = LC_TMSADM2.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 9.
          ELSE.
            PERFORM WRITE_STATE USING W_T000_1906-CLIENT 'TMSADM' 1.
          ENDIF.
      ENDCASE.
    ENDIF.
**** end of change by madhuri - 2/29/2016

  ENDLOOP.
ENDFORM.                    " get_data_1906
*&-------------------


" get_data_1906
*&-------------------
*&---------------------------------------------------------------------*
*&      Form  write_state
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T000_MANDT  text
*      -->P_0181   text
*      -->P_3      text
*----------------------------------------------------------------------*
FORM WRITE_STATE  USING    MANDT
                           USER
                           STATE_ID.
  MOVE MANDT TO W_OUTPUT_1906-CLIENT.
  MOVE USER TO W_OUTPUT_1906-USER.
  CASE STATE_ID.
    WHEN 1.
      MOVE 'Exists; Password not trivial.' TO W_OUTPUT_1906-PWSTATUS.
*      MOVE 'X' TO W_OUTPUT_1906-FLAG.
    WHEN 2.
      IF SAPSTAR_VALUE_1906 = '1'.                              " note 578891
        MOVE 'Does not exit. Logon not possible. See SAP Note 2383' TO W_OUTPUT_1906-PWSTATUS.
      ELSE.
        MOVE 'Does not exist.Logon possible with p/w PASS.See Note 2383' TO W_OUTPUT_1906-PWSTATUS.
      ENDIF.
    WHEN 3.
      MOVE 'Password 06071992 well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 4.
      MOVE 'Password 19920706 well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 5.
      MOVE 'Does not exist.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 6.
      MOVE 'Password ADMIN well known. See SAP Note 29276' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 7.
      MOVE 'Password SUPPORT well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 8 .
      MOVE 'Password PASSWORD well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 9 .
      MOVE 'Password $1Pawd2& well known.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 10 .
      MOVE 'Salted hash, check RSUSR003 in SAP.' TO W_OUTPUT_1906-PWSTATUS.
    WHEN 11 .
      MOVE 'Exists. Password-based logon is not possible.' TO W_OUTPUT_1906-PWSTATUS.
  ENDCASE.

  APPEND W_OUTPUT_1906 TO T_OUTPUT_1906.
  CLEAR W_OUTPUT_1906 .
ENDFORM.                    "WRITE_STATE
*&---------------------------------------------------------------------*
*&      Form  display_data_1906
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
" display_data_1906

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_DATA_1906
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM DISPLAY_DATA_1906 .
*  LOOP AT T_OUTPUT_1906 INTO W_OUTPUT_1906.
**    IF W_OUTPUT_1906-FLAG = 'X'.
**      CONTINUE.
**    ELSE.
*      REPLACE '"' WITH SPACE INTO W_OUTPUT_1906-PWSTATUS.
*
*      CONCATENATE  W_OUTPUT_1906-CLIENT '|^|'  INTO W_OUTPUT_1906-CLIENT.
*      CONCATENATE  W_OUTPUT_1906-USER '|^|' INTO W_OUTPUT_1906-USER.
*      CONCATENATE '"' W_OUTPUT_1906-PWSTATUS '"' INTO W_OUTPUT_1906-PWSTATUS.
*
*      CONCATENATE W_OUTPUT_1906-CLIENT
*                  W_OUTPUT_1906-USER
*                  W_OUTPUT_1906-PWSTATUS
*                  INTO W_STR_1906-STR . "SEPARATED BY ','.
*      APPEND W_STR_1906 TO T_STR_1906.
*      CLEAR W_STR_1906.
*      CLEAR W_OUTPUT_1906.
**    ENDIF.
*  ENDLOOP.
**** HEADER LINE FOR OLD REPORT***
*  W_STR_1906-STR = 'CLIENT [C(00006)]|^|BNAME [C(00024)]|^|PWSTATUS [C(00064)]'.
*  INSERT W_STR_1906 INTO T_STR_1906 INDEX 1 .
***
***  CALL FUNCTION 'GUI_DOWNLOAD'
***    EXPORTING
***      FILENAME                = P_1906
***      FILETYPE                = 'DAT'
***    TABLES
***      DATA_TAB                = T_STR_1906
***    EXCEPTIONS
***      FILE_WRITE_ERROR        = 1
***      NO_BATCH                = 2
***      GUI_REFUSE_FILETRANSFER = 3
***      INVALID_TYPE            = 4
***      NO_AUTHORITY            = 5
***      UNKNOWN_ERROR           = 6
***      HEADER_NOT_ALLOWED      = 7
***      SEPARATOR_NOT_ALLOWED   = 8
***      FILESIZE_NOT_ALLOWED    = 9
***      HEADER_TOO_LONG         = 10
***      DP_ERROR_CREATE         = 11
***      DP_ERROR_SEND           = 12
***      DP_ERROR_WRITE          = 13
***      UNKNOWN_DP_ERROR        = 14
***      ACCESS_DENIED           = 15
***      DP_OUT_OF_MEMORY        = 16
***      DISK_FULL               = 17
***      DP_TIMEOUT              = 18
***      FILE_NOT_FOUND          = 19
***      DATAPROVIDER_EXCEPTION  = 20
***      CONTROL_FLUSH_ERROR     = 21
***      OTHERS                  = 22.
***  IF SY-SUBRC <> 0.
**** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
****         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
***  ENDIF.

  LV_FILE = 'BCC_GCC_Default_SAPR3_Password.ACTT'.
  LS_TABLE = 'CLIENT [C(00006)]|^|BNAME [C(00024)]|^|PWSTATUS [C(00064)]' .
*  IF SY-SUBRC = 0.
  PERFORM CONV_TABLE_TO_TEXT TABLES T_OUTPUT_1906
  USING LV_FILE
  LS_TABLE .
  FREE T_OUTPUT_1906 .
  CLEAR LT_TABLE .
  CLEAR LS_TABLE .
*  ELSE.
*    APPEND LS_TABLE TO LT_TABLE .
*    PERFORM DOWNLOAD_GUI TABLES LT_TABLE USING LV_FILE .
*    CLEAR LT_TABLE .
*    CLEAR LS_TABLE .
*  ENDIF.

ENDFORM.                    "DISPLAY_DATA_1906
*&---------------------------------------------------------------------*
*&      Form  CHECK_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_FILE  text
*----------------------------------------------------------------------*
form CHECK_FILE  using pv_file.
**Check if file already exists
  DATA: lv_result TYPE C,
        lv_rc     TYPE I,
        lv_cfile TYPE string,
        lv_delete TYPE C,
        lv_bgcfile TYPE rlgrap-filename.

  CONCATENATE p_file pv_file INTO lv_cfile.

  IF rb_fore = 'X'.
    CALL METHOD cl_gui_frontend_services=>file_exist
    EXPORTING
      file                 = lv_cfile
      RECEIVING
      result               = lv_result
    EXCEPTIONS
      cntl_error           = 1
      error_no_gui         = 2
      wrong_parameter      = 3
      not_supported_by_gui = 4
      OTHERS               = 5.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF lv_result = abap_true.
      CALL METHOD cl_gui_frontend_services=>file_delete
      EXPORTING
        filename             = lv_cfile
      CHANGING
        rc                   = lv_rc
      EXCEPTIONS
        file_delete_failed   = 1
        cntl_error           = 2
        error_no_gui         = 3
        file_not_found       = 4
        access_denied        = 5
        unknown_error        = 6
        not_supported_by_gui = 7
        wrong_parameter      = 8
        OTHERS               = 9.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.

  ELSE.
    lv_bgcfile = lv_cfile.
    CLEAR lv_delete.
    OPEN DATASET lv_bgcfile FOR INPUT IN TEXT MODE ENCODING UTF-8 .
    IF sy-subrc = 0.
      lv_delete = abap_true.
    ENDIF.
    CLOSE DATASET lv_bgcfile.

    IF lv_delete = abap_true.
      DELETE DATASET lv_bgcfile.
    ENDIF.
  ENDIF.

endform.                    " CHECK_FILE
